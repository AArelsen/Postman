{
	"info": {
		"_postman_id": "fbac1560-7bd4-40e7-a01a-5eaa0be057fa",
		"name": "32554-E2E-Visma.Net-Integration Self Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "E2E-Integration Engine Connection",
			"item": [
				{
					"name": "BASIC Delete AllRealOperations",
					"item": [
						{
							"name": "Start",
							"item": [
								{
									"name": "IDP /connect/token Api INT - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        \r",
													"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        // console.log(pm.environment.get(\"TokenINT\"));\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"pm.environment.set(\"tryCounterLimit\", 10)\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeIntegration}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserIntegration}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassIntegration}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CLEANUP",
							"item": [
								{
									"name": "Start",
									"item": [
										{
											"name": "IDP /connect/token Api INT - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
															"        \r",
															"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        // console.log(pm.environment.get(\"TokenINT\"));\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"pm.environment.set(\"tryCounterLimit\", 10)\r",
															"\r",
															"pm.globals.set(\"retries\", 0);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ApiTestScopeIntegration}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{ApiTestUserIntegration}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{ApiTestPassIntegration}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "IDP /connect/token Api PWA - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
															"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"\r",
															"\r",
															"pm.globals.set(\"retries\", 0);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ApiTestScopeController}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{ApiTestUserController}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{ApiTestPassController}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA c-parameters/ Get all parameterIds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////////// Find PROJECT parameter Id /////////////\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    console.log(jsonDataLength);\r",
															"\r",
															"    var i = 0;\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    // pm.environment.set(\"aliasFound\", null);\r",
															"\r",
															"    // // Search for Alias by id\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].id == pm.environment.get(\"aliasId\")) {\r",
															"    //         pm.environment.set(\"aliasFound\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // pm.test(\"Alias found?\", function () {\r",
															"\r",
															"    //     pm.expect(pm.environment.get(\"aliasFound\")).to.be.not.null;\r",
															"    // });\r",
															"\r",
															"    // // Find TRANSACTIONTYPE ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // Find CUSTOMER ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // Find SUPPLIER ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // // Find PROJECTs ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // Find NS ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find FixedAsset ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"    // Find Dimension ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find CategoryType ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // Find VAT ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find Interim\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : parameterIds found\", function () {\r",
															"        pm.expect(pm.environment.get(\"parameterIdInterim\")).to.be.not.empty;\r",
															"        //pm.expect(pm.environment.get(\"parameterIdTransactionType\")).to.be.not.empty;\r",
															"        //pm.expect(pm.environment.get(\"parameterIdCustomer\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdSupplier\")).to.be.not.empty;\r",
															"        //pm.expect(pm.environment.get(\"parameterIdProject\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdDimension\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdLedger\")).to.be.not.empty;\r",
															"        //pm.expect(pm.environment.get(\"parameterIdCategoryType\")).to.be.not.empty;\r",
															"        //pm.expect(pm.environment.get(\"parameterIdFixedAsset\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdVAT\")).to.be.not.empty;\r",
															"    });\r",
															"\r",
															"    console.log(\r",
															"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
															"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
															"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
															"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
															"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
															"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
															"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
															"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
															"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
															"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
															"    );\r",
															"\r",
															"}\r",
															"\r",
															"console.log(pm.response.json())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"parameters",
														""
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														},
														{
															"key": "code",
															"value": "PROJECT",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Dimensions",
									"item": [
										{
											"name": "INT /dimensions/ - Get all active dimensions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
															"\r",
															"    pm.globals.set(\"i\", 0);\r",
															"\r",
															"    var dimensionsDeleteArray = [];\r",
															"    // Find active dimensions\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].status == \"Active\") {\r",
															"            dimensionsDeleteArray.push(jsonData[x].code);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray);\r",
															"    console.log(\"dimensionsDeleteArray : \" + dimensionsDeleteArray)\r",
															"\r",
															"\r",
															"// When there are no more dimensions left to clean, go to finish\r",
															"    if (dimensionsDeleteArray.length == 0) {\r",
															"        postman.setNextRequest(\"INT /health Cleanup ---FINISH---\");\r",
															"      console.log(\"INT /health Cleanup ---FINISH---\"); \r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
															"\r",
															"// var codeDeleteArrayLength = codeDeleteArray.length;\r",
															"\r",
															"// var i = pm.globals.get(\"i\");\r",
															"// if (i < codeDeleteArrayLength) {\r",
															"//     pm.environment.set(\"codeDelete\", codeDeleteArray[i]);\r",
															"//     console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
															"//     i++\r",
															"//     pm.globals.set(\"i\", i);\r",
															"//     postman.setNextRequest(pm.info.requestId); //Return to this request\r",
															"\r",
															"// }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														""
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/ID/values - Get all active dimension values",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
															"\r",
															"var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
															"\r",
															"var i = pm.globals.get(\"i\");\r",
															"if (i < dimensionsDeleteArrayLength) {\r",
															"    pm.environment.set(\"dimensionsDelete\", encodeURIComponent(dimensionsDeleteArray[i]));\r",
															"    // console.log(\"dimensionsDelete \" + i + \" \" + pm.environment.get(\"dimensionsDelete\"));\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
															"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    // console.log(\"jsonDataLength: \" + jsonDataLength);\r",
															"\r",
															"    var dimensionValuesDeleteArray = [];\r",
															"\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].status == \"Active\") {\r",
															"            dimensionValuesDeleteArray.push(jsonData[x].code);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.globals.set(\"i\", 0);\r",
															"\r",
															"    console.log(\"dimensionValuesDeleteArray \" + dimensionValuesDeleteArray);\r",
															"    pm.environment.set(\"dimensionValuesDeleteArray\", dimensionValuesDeleteArray);\r",
															"\r",
															"    // if (dimensionValuesDeleteArray.length == 0) {\r",
															"    //     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\")\r",
															"    // }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{dimensionsDelete}}",
														"values"
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "take",
															"value": "30",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "c-dimensionValues - Delete value from array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
															"});\r",
															"// postman.setNextRequest(\"dimensions-ListAll\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var dimensionValuesDeleteArray = pm.environment.get(\"dimensionValuesDeleteArray\");\r",
															"\r",
															"var dimensionValuesDeleteArrayLength = dimensionValuesDeleteArray.length;\r",
															"\r",
															"var i = pm.globals.get(\"i\");\r",
															"if (i < dimensionValuesDeleteArrayLength) {\r",
															"    pm.environment.set(\"dimensionValuesDelete\", encodeURIComponent(dimensionValuesDeleteArray[i]));\r",
															"    console.log(\"dimensionValuesDelete \" + i + \" \" + pm.environment.get(\"dimensionValuesDelete\"));\r",
															"    i++\r",
															"    pm.globals.set(\"i\", i);\r",
															"    postman.setNextRequest(pm.info.requestId); // Go to this request\r",
															"} else {\r",
															"    postman.setNextRequest(); // Go to next request\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}/values/{{dimensionValuesDelete}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{dimensionsDelete}}",
														"values",
														"{{dimensionValuesDelete}}"
													]
												},
												"description": "Delete a dimension value"
											},
											"response": []
										},
										{
											"name": "c-dimension - Delete dimension from array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
															"});\r",
															"// postman.setNextRequest(\"dimensions-ListAll\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
															"// // console.log(\"dimensionsDeleteArray \" + dimensionsDeleteArray);\r",
															"\r",
															"// var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
															"\r",
															"// var i = pm.globals.get(\"i\");\r",
															"// if (i < dimensionsDeleteArrayLength) {\r",
															"    \r",
															"//     pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray[i]);\r",
															"//     console.log(\"dimensionDelete \" + i + \" \" + pm.environment.get(\"dimensionDelete\"));\r",
															"//     i++\r",
															"//     pm.globals.set(\"i\", i);\r",
															"//     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
															"\r",
															"// }\r",
															"\r",
															"    postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{dimensionsDelete}}"
													]
												},
												"description": "Delete a dimension value"
											},
											"response": []
										},
										{
											"name": "INT /health Cleanup ---FINISH---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
															"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}../../../health",
													"host": [
														"{{INT}}",
														"",
														""
													],
													"path": [
														"..",
														"..",
														"health"
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "take",
															"value": "30",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "PWA c-parameters/condensed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // Find INTERIM ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find PROJECTs ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find FixedAsset ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CategoryType ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"\r",
													"\r",
													"\r",
													"    );\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/condensed",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"condensed"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /dimensions/parents - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].dimensionCode;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/parents",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"parents"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /parameters/DIMENSION/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.response.to.have.status(200);\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimension}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"{{parameterIdDimension}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/codeDelete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"{{codeDelete}}"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-dimension - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"} else {\r",
													"    return;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/INTERIM/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdInterim}}/values/devextreme?take=30&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"{{parameterIdInterim}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-ledger - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/ledger/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"ledger",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/NS/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find coode\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            // codeDeleteArray[x] = jsonData[x].code;\r",
													"            codeDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"{{parameterIdLedger}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-accountingcodes - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"accountingcodes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/VAT/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdVAT}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"{{parameterIdVAT}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-vatcodes - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/SUPPLIER/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												"{{parameterIdSupplier}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-Supplier - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"suppliers",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 10)\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token AdminSemine  - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeAdmin}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserAdmin}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassAdmin}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token AdminINTENG  - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenINTENGAd\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestIntegrationScopeAdmin}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestIntegrationUserAdmin}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestIntegrationPassAdmin}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//////// Get OrgID /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().list;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"TestAutomation\") {\r",
											"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
											"        }\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
											"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"}\r",
											"\r",
											"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
											"\r",
											"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /intOrganizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].client == \"Visma.NetClient-2110\") {\r",
											"            pm.environment.set(\"intDatasetId\", jsonData[x].clientId)\r",
											"        }\r",
											"        // if (jsonData[x].client == \"IntClient_1\") {\r",
											"        //     pm.environment.set(\"intDatasetId_1\", jsonData[x].clientId)\r",
											"        // }\r",
											"    }\r",
											"}\r",
											"console.log(\"1-IntDatasetId is: \" +pm.environment.get(\"intDatasetId\"));\r",
											"// console.log(\"2-IntDatasetId_1 is: \" +pm.environment.get(\"intDatasetId_1\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminClients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"organizations",
										"{{intOrganizationId}}",
										"adminClients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "Integration Engine",
					"item": [
						{
							"name": "Get Data From ERP",
							"item": [
								{
									"name": "Create/Check Int-Job",
									"item": [
										{
											"name": "Create New Integration",
											"item": [
												{
													"name": "PWA /Plugins",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Plugins Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"24 Seven Office\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"24SevenOfficeId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"CataCloud Plugin\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"cataCloudPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"     for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Power Office Go\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"powerOfficeGoId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Semine Plugin\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"seminePluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Tripletex\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"tripletexId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Visma.net Plugin\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"vismaNetPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    \r",
																	"}\r",
																	"console.log(\"24SevenOfficeId is: \" + pm.environment.get(\"24SevenOfficeId\"));\r",
																	"console.log(\"CataCloudPluginId is: \" + pm.environment.get(\"cataCloudPluginId\"));\r",
																	"console.log(\"PowerOfficeGoId is: \" + pm.environment.get(\"powerOfficeGoId\"));\r",
																	"console.log(\"SeminePluginId is: \" + pm.environment.get(\"seminePluginId\"));\r",
																	"console.log(\"TripletexId is: \" + pm.environment.get(\"tripletexId\"));\r",
																	"console.log(\"VismaNetPluginId is: \" + pm.environment.get(\"vismaNetPluginId\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/plugins",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"plugins"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /New Integration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"pm.environment.set('newIntegrationName', 'VismaNetPlugin-' + moment().format(\"YYMMDD\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Integration Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"            jsonDataInt=jsonData;\r",
																	"            pm.environment.set(\"newIntegrationId\", jsonDataInt.id);\r",
																	"    }\r",
																	"}\r",
																	"console.log(\"NewIntegrationId is: \" + pm.environment.get(\"newIntegrationId\"));\r",
																	"\r",
																	"//////// Get Integration Id /////////\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().rootSettingValues;\r",
																	"   //console.log(jsonData);\r",
																	"var jsonDataTok;\r",
																	"var i;\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"token\") {\r",
																	"           jsonDataTok=jsonData[i];     \r",
																	"    pm.environment.set(\"Visma.NetTokenId\", jsonDataTok.value);\r",
																	"}\r",
																	"}\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"companyid\") {\r",
																	"           jsonDataTok=jsonData[i];     \r",
																	"    pm.environment.set(\"companyid\", jsonDataTok.value);\r",
																	"}\r",
																	"}\r",
																	"\r",
																	"\r",
																	"}\r",
																	"console.log(\"companyid is: \" + pm.environment.get(\"companyid\"));\r",
																	"\r",
																	"console.log(\"Visma.NetTokenId is: \" + pm.environment.get(\"Visma.NetTokenId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"{{newIntegrationName}}\",\n    \"pluginId\": \"{{vismaNetPluginId}}\",\n    \"status\": \"Active\",\n    \"rootSettingValues\": [\n        {\n            \"key\": \"baseurl\",\n            \"value\": \"https://integration.visma.net/API/\"\n        },\n        {\n            \"key\": \"token\",\n            \"value\": \"0baec236-453c-4829-b681-8e279cd082e0\"\n        },\n        {\n            \"key\": \"companyid\",\n            \"value\": \"3391551\"\n        },\n        {\n            \"key\": \"dimensions\",\n            \"value\": \"SUBACCOUNT|Periode\"\n        },\n        {\n            \"key\": \"basecurrency\",\n            \"value\": \"NOK\"\n        },\n        {\n            \"key\": \"excludeddimensions\",\n            \"value\": \"SUBACCOUNT\"\n        },\n        {\n            \"key\": \"includeddimensions\",\n            \"value\": \"Avdelig|Min kosnadbærer 3|Huttemeitooooo|tudels\"\n        },\n        {\n            \"key\": \"shouldcreateorglevelparameters\",\n            \"value\": null\n        },\n        {\n            \"key\": \"accountrelations\",\n            \"value\": null\n        },\n        {\n            \"key\": \"ignoredvatcodes\",\n            \"value\": \"\"\n        },\n        {\n            \"key\": \"shouldmapprojectidtodescriptionfield\",\n            \"value\": null\n        },\n        {\n            \"key\": \"shouldsyncparameterrelationsonlyonce\",\n            \"value\": true\n        },\n        {\n            \"key\": \"configurablefields\",\n            \"value\": null\n        },\n        {\n            \"key\": \"paymentmethodvalue\",\n            \"value\": null\n        },\n        {\n            \"key\": \"taxcalculationmode\",\n            \"value\": \"TaxSetting\"\n        },\n        {\n            \"key\": \"taxcalculationmodeonpartialvat\",\n            \"value\": null\n        },\n        {\n            \"key\": \"branchnumber\",\n            \"value\": \"1\"\n        },\n        {\n            \"key\": \"projectid\",\n            \"value\": null\n        },\n        {\n            \"key\": \"releasedocumentimmediately\",\n            \"value\": true\n        },\n        {\n            \"key\": \"semineusername\",\n            \"value\": \"{{apiTestIntegrationEmail}}\"\n        },\n        {\n            \"key\": \"seminepassword\",\n            \"value\": \"Bluewhale2\"\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Plugins CheckNewIntegration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"if (pm.response.code == 200) {\r",
																	"   const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataInt1;\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"            jsonDataInt1 =jsonData[i];\r",
																	"            break;\r",
																	"\r",
																	"}\r",
																	"}\r",
																	"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New vismaNet Integration is found.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"status\", \"Active\");\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"vismaNetPluginId\"));\r",
																	"});\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Plugins CheckNewIntegration All",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New Visma.Net Integration is found.\", function () {\r",
																	"    pm.expect(jsonData).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
																	"    pm.expect(jsonData).to.have.property(\"name\", pm.environment.get(\"newIntegrationName\"));\r",
																	"    pm.expect(jsonData).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"}\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonDataInt = pm.response.json().integrationClients;\r",
																	"   console.log(jsonDataInt);\r",
																	"\r",
																	"var jsonDataClient;    \r",
																	"var i;\r",
																	"\r",
																	"    for (i in jsonDataInt) {\r",
																	"        if (jsonDataInt[i].clientName == \"Visma.NetClient-2110\") {\r",
																	"            jsonDataClient =jsonDataInt[i];\r",
																	"            break;\r",
																	"    console.log(jsonDataClient);     \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Visma.Nett_1 is found.\", function () {   \r",
																	"pm.expect(jsonDataClient).to.have.property(\"clientId\", pm.environment.get(\"intDatasetId\"));\r",
																	"pm.expect(jsonDataClient).to.have.property(\"status\", \"InActive\");\r",
																	"});   \r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration ChangeClientStatusToActive",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"{{newIntegrationName}}\",\n    \"id\": \"{{newIntegrationId}}\",\n    \"pluginId\": \"{{vismaNetPluginId}}\",\n    \"status\": \"Active\",\n    \"rootSettingValues\": [\n        {\n            \"key\": \"name\",\n            \"value\": \"{{newIntegrationName}}\"\n        },\n        {\n            \"key\": \"token\",\n            \"value\": \"0baec236-453c-4829-b681-8e279cd082e0\"\n        },\n        {\n            \"key\": \"companyid\",\n            \"value\": \"3391551\"\n        },\n        {\n            \"key\": \"dimensions\",\n            \"value\": \"SUBACCOUNT|Periode\"\n        },\n        {\n            \"key\": \"basecurrency\",\n            \"value\": \"NOK\"\n        },\n        {\n            \"key\": \"excludeddimensions\",\n            \"value\": \"SUBACCOUNT\"\n        },\n        {\n            \"key\": \"includeddimensions\",\n            \"value\": \"Avdelig|Min kosnadbærer 3|Huttemeitooooo|tudels\"\n        },\n        {\n            \"key\": \"shouldcreateorglevelparameters\",\n            \"value\": null\n        },\n        {\n            \"key\": \"accountrelations\",\n            \"value\": null\n        },\n        {\n            \"key\": \"ignoredvatcodes\",\n            \"value\": \"\"\n        },\n        {\n            \"key\": \"shouldmapprojectidtodescriptionfield\",\n            \"value\": null\n        },\n        {\n            \"key\": \"shouldsyncparameterrelationsonlyonce\",\n            \"value\": true\n        },\n        {\n            \"key\": \"configurablefields\",\n            \"value\": null\n        },\n        {\n            \"key\": \"paymentmethodvalue\",\n            \"value\": null\n        },\n        {\n            \"key\": \"taxcalculationmode\",\n            \"value\": \"TaxSetting\"\n        },\n        {\n            \"key\": \"taxcalculationmodeonpartialvat\",\n            \"value\": null\n        },\n        {\n            \"key\": \"branchnumber\",\n            \"value\": \"1\"\n        },\n        {\n            \"key\": \"projectid\",\n            \"value\": null\n        },\n        {\n            \"key\": \"releasedocumentimmediately\",\n            \"value\": true\n        },\n        {\n            \"key\": \"semineusername\",\n            \"value\": \"{{apiTestIntegrationEmail}}\"\n        },\n        {\n            \"key\": \"seminepassword\",\n            \"value\": \"Bluewhale2\"\n        }\n    ],\n    \"clientSettings\": [\n        {\n            \"clientId\": \"{{intDatasetId}}\",\n            \"status\": \"Active\",\n            \"settingValues\": []\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration CheckClientStatus",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonDataInt = pm.response.json().integrationClients;\r",
																	"   console.log(jsonDataClient);\r",
																	"\r",
																	"var jsonDataClient;;\r",
																	"    \r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonDataInt) {\r",
																	"        if (jsonDataInt[i].clientName == \"Visma.NetClient-2110\") {\r",
																	"            jsonDataClient =jsonDataInt[i];\r",
																	"            break;\r",
																	"            console.log(jsonDataClient);          \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VismaNet client is found.\", function () {\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"clientId\", pm.environment.get(\"intDatasetId\"));\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration TestConnections",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"key\": \"baseurl\",\n        \"value\": \"https://integration.visma.net/API/\"\n    },\n    {\n        \"key\": \"token\",\n        \"value\": \"0baec236-453c-4829-b681-8e279cd082e0\"\n    },\n    {\n        \"key\": \"companyid\",\n        \"value\": \"3391551\"\n    },\n    {\n        \"key\": \"dimensions\",\n        \"value\": \"SUBACCOUNT|Periode\"\n    },\n    {\n        \"key\": \"basecurrency\",\n        \"value\": \"NOK\"\n    },\n    {\n        \"key\": \"excludeddimensions\",\n        \"value\": \"SUBACCOUNT\"\n    },\n    {\n        \"key\": \"includeddimensions\",\n        \"value\": \"Avdelig|Min kosnadbærer 3|Huttemeitooooo|tudels\"\n    },\n    {\n        \"key\": \"shouldcreateorglevelparameters\",\n        \"value\": null\n    },\n    {\n        \"key\": \"accountrelations\",\n        \"value\": null\n    },\n    {\n        \"key\": \"ignoredvatcodes\",\n        \"value\": \"\"\n    },\n    {\n        \"key\": \"shouldmapprojectidtodescriptionfield\",\n        \"value\": null\n    },\n    {\n        \"key\": \"shouldsyncparameterrelationsonlyonce\",\n        \"value\": true\n    },\n    {\n        \"key\": \"configurablefields\",\n        \"value\": null\n    },\n    {\n        \"key\": \"paymentmethodvalue\",\n        \"value\": null\n    },\n    {\n        \"key\": \"taxcalculationmode\",\n        \"value\": \"TaxSetting\"\n    },\n    {\n        \"key\": \"taxcalculationmodeonpartialvat\",\n        \"value\": null\n    },\n    {\n        \"key\": \"branchnumber\",\n        \"value\": \"1\"\n    },\n    {\n        \"key\": \"projectid\",\n        \"value\": null\n    },\n    {\n        \"key\": \"releasedocumentimmediately\",\n        \"value\": true\n    },\n    {\n        \"key\": \"semineusername\",\n        \"value\": \"{{apiTestIntegrationEmaill}}\"\n    },\n    {\n        \"key\": \"seminepassword\",\n        \"value\": \"Bluewhale2\"\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/plugins/{{vismaNetPluginId}}/test",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"plugins",
																"{{vismaNetPluginId}}",
																"test"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										},
										{
											"name": "Create Jobs",
											"item": [
												{
													"name": "PWA /Integration AddJobSupplier",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"supplierSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"SupplierSyncId is: \" + pm.environment.get(\"supplierSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"SupplierSync\",\n        \"jobType\": \"SupplierSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetSuppliers\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddSuppliers\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobAccountingCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"accountingCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"AccountingCodeSync is: \" + pm.environment.get(\"accountingCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"AccountingCodeSync\",\n        \"jobType\": \"AccountingCodeSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetAccountingCodes\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddAccountingCodes\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobCurrencies",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CurrenciesSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"currenciesSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"CurrenciesSync is: \" + pm.environment.get(\"currenciesSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"CurrenciesSync\",\n        \"jobType\": \"CurrenciesSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetCurrencies\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddCurrencies\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobCustomer",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"customerSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"CustomerSync is: \" + pm.environment.get(\"customerSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"CustomerSync\",\n        \"jobType\": \"CustomerSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetCustomers\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddCustomers\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobDimension",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"dimensionSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"DimensionSync is: \" + pm.environment.get(\"dimensionSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"DimensionSync\",\n        \"jobType\": \"DimensionSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetDimensions\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddDimensions\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobDimensionValue",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"dimensionValueSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"DimensionValueSyncId is: \" + pm.environment.get(\"dimensionValueSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"DimensionValueSync\",\n        \"jobType\": \"DimensionValueSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetDimensionValues\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddDimensionValues\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobVatCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"vatCodeSyncId\", jsonDataJob.id);\r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"VatCodeSyncId is: \" + pm.environment.get(\"vatCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"VatCodeSync\",\n        \"jobType\": \"VatCodeSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetVatCodes\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddVatCodes\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobInvoice",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n       \"id\": null,\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"InvoiceSync\",\n        \"jobType\": \"InvoiceSync\",\n        \"status\": \"InActive\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetInvoices\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"PostInvoice\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /CheckJobs",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json();\r",
																	"   //console.log(jsonData);\r",
																	"\r",
																	"var jsonDataJob_1;\r",
																	"var jsonDataJob_2;\r",
																	"var jsonDataJob_3;\r",
																	"var jsonDataJob_4;\r",
																	"var jsonDataJob_5;\r",
																	"var jsonDataJob_6;\r",
																	"var jsonDataJob_7;\r",
																	"var jsonDataJob_8;\r",
																	"    \r",
																	"var i;\r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob_1 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingCode job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"id\", pm.environment.get(\"accountingCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"   \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CurrenciesSync\") {\r",
																	"            jsonDataJob_2 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currencies job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_2).to.have.property(\"id\", pm.environment.get(\"currenciesSyncId\"));\r",
																	"    pm.expect(jsonDataJob_2).to.have.property(\"status\", \"InActive\");\r",
																	"});   \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob_3 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Customer job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"id\", pm.environment.get(\"customerSyncId\"));\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"status\", \"InActive\");\r",
																	"});\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob_4 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"id\", pm.environment.get(\"dimensionSyncId\"));\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob_5 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionValue job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"id\", pm.environment.get(\"dimensionValueSyncId\"));\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob_6 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"id\", pm.environment.get(\"invoiceSyncId\"));\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob_7 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"id\", pm.environment.get(\"supplierSyncId\"));\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob_8 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"} \r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCodeSync job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_8).to.have.property(\"id\", pm.environment.get(\"vatCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_8).to.have.property(\"status\", \"InActive\");\r",
																	"});    \r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										},
										{
											"name": "Change Jobs Status To Active",
											"item": [
												{
													"name": "PWA /Integration JobSupplier",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"supplierSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"SupplierSyncId is: \" + pm.environment.get(\"supplierSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{supplierSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"SupplierSync\",\n        \"jobType\": \"SupplierSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetSuppliers\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddSuppliers\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobAccountingCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"accountingCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"AccountingCodeSync is: \" + pm.environment.get(\"accountingCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{accountingCodeSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"AccountingCodeSync\",\n        \"jobType\": \"AccountingCodeSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetAccountingCodes\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddAccountingCodes\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobCurrencies",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CurrenciesSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"currenciesSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"CurrenciesSync is: \" + pm.environment.get(\"currenciesSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{currenciesSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"CurrenciesSync\",\n        \"jobType\": \"CurrenciesSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetCurrencies\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddCurrencies\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobCustomer",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"customerSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"CustomerSync is: \" + pm.environment.get(\"customerSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{customerSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"CustomerSync\",\n        \"jobType\": \"CustomerSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetCustomers\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddCustomers\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobDimension",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"dimensionSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"DimensionSync is: \" + pm.environment.get(\"dimensionSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{dimensionSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"DimensionSync\",\n        \"jobType\": \"DimensionSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetDimensions\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddDimensions\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobDimensionValue",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"dimensionValueSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"DimensionValueSyncId is: \" + pm.environment.get(\"dimensionValueSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{dimensionValueSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"DimensionValueSync\",\n        \"jobType\": \"DimensionValueSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetDimensionValues\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddDimensionValues\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobVatCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"vatCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"VatCodeSyncId is: \" + pm.environment.get(\"vatCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{vatCodeSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"VatCodeSync\",\n        \"jobType\": \"VatCodeSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetVatCodes\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"AddVatCodes\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobInvoice",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob=jsonData[i];\r",
																	"            pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"}\r",
																	"console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"id\": \"{{invoiceSyncId}}\",\n        \"integrationId\": \"{{newIntegrationId}}\",\n        \"clientId\": \"{{intDatasetId}}\",\n        \"jobName\": \"InvoiceSync\",\n        \"jobType\": \"InvoiceSync\",\n        \"status\": \"Active\",\n        \"steps\": [\n            {\n                \"actionName\": \"GetInvoices\",\n                \"stepOrder\": 0,\n                \"stepType\": \"Fetch\",\n                \"status\": \"Active\"\n            },\n            {\n                \"actionName\": \"PostInvoice\",\n                \"stepOrder\": 1,\n                \"stepType\": \"Push\",\n                \"status\": \"Active\"\n            }\n        ]\n    }\n]\n"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /CheckJobs Status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json();\r",
																	"   //console.log(jsonData);\r",
																	"\r",
																	"var jsonDataJob_1;\r",
																	"var jsonDataJob_2;\r",
																	"var jsonDataJob_3;\r",
																	"var jsonDataJob_4;\r",
																	"var jsonDataJob_5;\r",
																	"var jsonDataJob_6;\r",
																	"var jsonDataJob_7;\r",
																	"var jsonDataJob_8;\r",
																	"    \r",
																	"var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob_1 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);    \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingCode job is found and Active.\", function () {\r",
																	"    //pm.expect(jsonDataJob_1).to.have.property(\"id\", pm.environment.get(\"accountingCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CurrenciesSync\") {\r",
																	"            jsonDataJob_2 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currencies job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_2).to.have.property(\"id\", pm.environment.get(\"currenciesSyncId\"));\r",
																	"    pm.expect(jsonDataJob_2).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob_3 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Customer job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_3).to.have.property(\"id\", pm.environment.get(\"customerSyncId\"));\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"status\", \"Active\");\r",
																	"});   \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob_4 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_4).to.have.property(\"id\", pm.environment.get(\"dimensionSyncId\"));\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"status\", \"Active\");\r",
																	"});   \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob_5 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionValue job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_5).to.have.property(\"id\", pm.environment.get(\"dimensionValueSyncId\"));\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob_6 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_6).to.have.property(\"id\", pm.environment.get(\"invoiceSyncId\"));\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob_7 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_7).to.have.property(\"id\", pm.environment.get(\"supplierSyncId\"));\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob_8 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCodeSync job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_8).to.have.property(\"id\", pm.environment.get(\"vatCodeSyncId\"));\r",
																	"pm.expect(jsonDataJob_8).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Sync Jobs",
									"item": [
										{
											"name": "PWA /Integration Sync Supplier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}\r\n"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{supplierSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync AccountingCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{accountingCodeSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Currencies",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{currenciesSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{currenciesSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Customer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{customerSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Dimension",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{dimensionSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync DimensionValue",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{dimensionValueSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Vatcode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{vatCodeSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "--- Sleep 3 min---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(180);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Data From Client",
							"item": [
								{
									"name": "List parameters",
									"item": [
										{
											"name": "Parameters",
											"item": [
												{
													"name": "PWA /parameters/condensed",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
																	"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"ledgerCode\", jsonData[x].code)\r",
																	"\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
																	"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"vatCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
																	"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"interimCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"SUPPLIER\") {\r",
																	"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"supplierCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Min kostnadsbærer 3\") {\r",
																	"            pm.environment.set(\"parameterIdDimensionMin_kostnadsbarer_3\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"Min_kostnadsbærer_3_Code\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"tudels\") {\r",
																	"            pm.environment.set(\"parameterIdDimensionTudels\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"tudelsCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Avdeling\") {\r",
																	"            pm.environment.set(\"parameterIdDimensionAvdeling\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"AvdelingCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Periode\") {\r",
																	"            pm.environment.set(\"parameterIdDimensionPeriode\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"PeriodeCode\", jsonData[x].code)\r",
																	"        }\r",
																	"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Huttemeitooooo\") {\r",
																	"            pm.environment.set(\"parameterIdDimensionHuttemeitooooo\", jsonData[x].parameterId)\r",
																	"            pm.environment.set(\"HuttemeitoooooCode\", jsonData[x].code)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"// console.log(\"ParameterIdLedger is :\" + pm.environment.get(\"parameterIdLedger\"));\r",
																	"// console.log(\"ParameterIdLedger code is :\" + pm.environment.get(\"ledgerCode\"));\r",
																	"\r",
																	"// console.log(\"ParameterIdVat is :\" + pm.environment.get(\"parameterIdVat\"));\r",
																	"// console.log(\"ParameterIdVat code is :\" + pm.environment.get(\"vatCode\"));\r",
																	"\r",
																	"// console.log(\"ParameterIdInterim is :\" + pm.environment.get(\"parameterIdInterim\"));\r",
																	"// console.log(\"ParameterIdInterim code is :\" + pm.environment.get(\"interimCode\"));\r",
																	"\r",
																	"// console.log(\"ParameterIdSupplier is :\" + pm.environment.get(\"parameterIdSupplier\"));\r",
																	"// console.log(\"ParameterIdSupplier code is :\" + pm.environment.get(\"supplierCode\"));\r",
																	"\r",
																	"// console.log(\"parameterIdDimensionMin_kostnadsbærer_3 is :\" + pm.environment.get(\"parameterIdDimensionMin_kostnadsbærer_3\"));\r",
																	"// console.log(\"Min_kostnadsbærer_3_Code is :\" + pm.environment.get(\"Min_kostnadsbærer_3_Code\"));\r",
																	"\r",
																	"// console.log(\"parameterIdDimensionTudels is :\" + pm.environment.get(\"parameterIdDimensionTudels\"));\r",
																	"// console.log(\"tudelsCode is :\" + pm.environment.get(\"departudelsCodetmentCode\"));\r",
																	"\r",
																	"// console.log(\"parameterIdDimensionAvdeling is :\" + pm.environment.get(\"parameterIdDimensionAvdeling\"));\r",
																	"// console.log(\"AvdelingCode is :\" + pm.environment.get(\"AvdelingCode\"));\r",
																	"\r",
																	"// console.log(\"parameterIdDimensionPeriode is :\" + pm.environment.get(\"parameterIdDimensionPeriode\"));\r",
																	"// console.log(\"PeriodeCode is :\" + pm.environment.get(\"PeriodeCode\"));\r",
																	"\r",
																	"// console.log(\"parameterIdDimensionHuttemeitooooo is :\" + pm.environment.get(\"parameterIdDimensionHuttemeitooooo\"));\r",
																	"// console.log(\"HuttemeitoooooCode is :\" + pm.environment.get(\"HuttemeitoooooCode\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-language-code",
																"value": "en",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/condensed",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"condensed"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA / client/currencies",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataCur;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].currencyCode ==\"DKK\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
																	"          jsonDataCur=jsonData[i]\r",
																	"          pm.environment.set(\"validFrom\", jsonDataCur.validFrom);\r",
																	"          pm.environment.set(\"currencyCode\", jsonDataCur.currencyCode);\r",
																	"          pm.environment.set(\"conversionRate\", jsonDataCur.conversionRate);\r",
																	"          pm.environment.set(\"numberOfUnits\", jsonDataCur.numberOfUnits);\r",
																	"          pm.environment.set(\"modified\", jsonDataCur.modified);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].currencyCode ==\"EUR\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
																	"          jsonDataCur=jsonData[i]\r",
																	"          pm.environment.set(\"validFrom_1\", jsonDataCur.validFrom);\r",
																	"          pm.environment.set(\"currencyCode_1\", jsonDataCur.currencyCode);\r",
																	"          pm.environment.set(\"conversionRate_1\", jsonDataCur.conversionRate);\r",
																	"          pm.environment.set(\"numberOfUnits_1\", jsonDataCur.numberOfUnits);\r",
																	"          pm.environment.set(\"modified_1\", jsonDataCur.modified);\r",
																	"    }\r",
																	"    }\r",
																	"      for(i in jsonData){\r",
																	"      if(jsonData[i].currencyCode ==\"GBP\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
																	"          jsonDataCur=jsonData[i]\r",
																	"          pm.environment.set(\"validFrom_2\", jsonDataCur.validFrom);\r",
																	"          pm.environment.set(\"currencyCode_2\", jsonDataCur.currencyCode);\r",
																	"          pm.environment.set(\"conversionRate_2\", jsonDataCur.conversionRate);\r",
																	"          pm.environment.set(\"numberOfUnits_2\", jsonDataCur.numberOfUnits);\r",
																	"          pm.environment.set(\"modified_2\", jsonDataCur.modified);\r",
																	"    }\r",
																	"    }\r",
																	"  \r",
																	"}\r",
																	"\r",
																	"\r",
																	"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode\"));\r",
																	"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom\"));\r",
																	"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate\"));\r",
																	"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits\"));\r",
																	"// console.log(\"Modified is : \" +pm.environment.get(\"modified\"));\r",
																	"\r",
																	"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode_1\"));\r",
																	"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom_1\"));\r",
																	"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate_1\"));\r",
																	"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits_1\"));\r",
																	"// console.log(\"Modified is : \" +pm.environment.get(\"modified_1\"));\r",
																	"\r",
																	"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode_2\"));\r",
																	"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom_2\"));\r",
																	"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate_2\"));\r",
																	"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits_2\"));\r",
																	"// console.log(\"Modified is : \" +pm.environment.get(\"modified_2\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currencies",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"currencies"
															]
														},
														"description": "Gets a fixed asset object based on the ERP code."
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - Supplier",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"50001\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"    pm.environment.set(\"parameterValueIdSupplier\", jsonDataDep.parameterValueId);\r",
																	"    pm.environment.set(\"supplierDescription\", jsonDataDep.description);\r",
																	"    pm.environment.set(\"supplierCreatedDate\", jsonDataDep.createdDate);\r",
																	"    pm.environment.set(\"cSupplierCode-A\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"    \r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"50002\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"    pm.environment.set(\"parameterValueIdSupplier_2\", jsonDataDep.parameterValueId);\r",
																	"    pm.environment.set(\"supplierDescription_2\", jsonDataDep.description);\r",
																	"    pm.environment.set(\"supplierCreatedDate_2\", jsonDataDep.createdDate);\r",
																	"    pm.environment.set(\"cSupplierCode-A-2\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"    \r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"50003\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"    pm.environment.set(\"parameterValueIdSupplier_3\", jsonDataDep.parameterValueId);\r",
																	"    pm.environment.set(\"supplierDescription_3\", jsonDataDep.description);\r",
																	"    pm.environment.set(\"supplierCreatedDate_3\", jsonDataDep.createdDate);\r",
																	"    pm.environment.set(\"cSupplierCode-A-3\", jsonDataDep.code); \r",
																	"    }\r",
																	"    }\r",
																	"    \r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"50004\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"    pm.environment.set(\"parameterValueIdSupplier_4\", jsonDataDep.parameterValueId);\r",
																	"    pm.environment.set(\"supplierDescription_4\", jsonDataDep.description);\r",
																	"    pm.environment.set(\"supplierCreatedDate_4\", jsonDataDep.createdDate);\r",
																	"    pm.environment.set(\"cSupplierCode-A-4\", jsonDataDep.code);  \r",
																	"    }\r",
																	"    }\r",
																	"     \r",
																	"}\r",
																	"\r",
																	"// console.log(\"ParameterValueIdSupplier is : \" +pm.environment.get(\"parameterValueIdSupplier\"));\r",
																	"// console.log(\"SupplierDescription is : \" +pm.environment.get(\"supplierDescription\"));\r",
																	"// console.log(\"SupplierCreatedDate is : \" +pm.environment.get(\"supplierCreatedDate\"));\r",
																	"// console.log(\"SupplierValueCode is : \" +pm.environment.get(\"cSupplierCode-A\"));\r",
																	"\r",
																	"// console.log(\"ParameterValueIdSupplier_2 is : \" +pm.environment.get(\"parameterValueIdSupplier_2\"));\r",
																	"// console.log(\"SupplierDescription_2 is : \" +pm.environment.get(\"supplierDescription_2\"));\r",
																	"// console.log(\"SupplierCreatedDate_2 is : \" +pm.environment.get(\"supplierCreatedDate_2\"));\r",
																	"// console.log(\"SupplierValueCode_2 is : \" +pm.environment.get(\"cSupplierCode-A-2\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"ParameterValueIdSupplier_3 is : \" +pm.environment.get(\"parameterValueIdSupplier_3\"));\r",
																	"// console.log(\"SupplierDescription_3 is : \" +pm.environment.get(\"supplierDescription_3\"));\r",
																	"// console.log(\"SupplierCreatedDate_3 is : \" +pm.environment.get(\"supplierCreatedDate_3\"));\r",
																	"// console.log(\"SupplierValueCode_3 is : \" +pm.environment.get(\"cSupplierCode-A-3\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"ParameterValueIdSupplier_4 is : \" +pm.environment.get(\"parameterValueIdSupplier_4\"));\r",
																	"// console.log(\"SupplierDescription_4 is : \" +pm.environment.get(\"supplierDescription_4\"));\r",
																	"// console.log(\"SupplierCreatedDate_4 is : \" +pm.environment.get(\"supplierCreatedDate_4\"));\r",
																	"// console.log(\"SupplierValueCode_4 is : \" +pm.environment.get(\"cSupplierCode-A-4\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdSupplier}}",
																"values",
																"devextreme"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - Supplier Semine AS",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// if (pm.response.code == 200) {\r",
																	"// var jsonData = pm.response.json();\r",
																	"// //console.log(jsonData);\r",
																	"// var jsonDataDep;\r",
																	"\r",
																	"//       if(jsonData.code ==\"1\"){\r",
																	"//           jsonDataDep=jsonData\r",
																	"//     }\r",
																	"//     pm.environment.set(\"supplierCode\", jsonDataDep.code);\r",
																	"//     pm.environment.set(\"supplierName\", jsonDataDep.name);\r",
																	"//     pm.environment.set(\"supplierorganizationNumber\", jsonDataDep.organizationNumber);\r",
																	"//     pm.environment.set(\"supplierorganizationAuthorityCode\", jsonDataDep.organizationAuthorityCode);\r",
																	"//     pm.environment.set(\"supplierStreet\", jsonDataDep.address.street);\r",
																	"//     pm.environment.set(\"supplierCity\", jsonDataDep.address.city);\r",
																	"//     pm.environment.set(\"supplierZipcode\", jsonDataDep.address.zipcode);\r",
																	"//     pm.environment.set(\"supplierPhone\", jsonDataDep.address.phone);\r",
																	"//     pm.environment.set(\"supplierEmail\", jsonDataDep.address.email);\r",
																	"//     pm.environment.set(\"supplierCountry\", jsonDataDep.address.country);\r",
																	"//     pm.environment.set(\"supplierStatus\", jsonDataDep.status);\r",
																	"//     pm.environment.set(\"supplierDefaultAccountingCode\", jsonDataDep.defaultAccountingCode);\r",
																	"//     pm.environment.set(\"supplierExternalId\", jsonDataDep.externalId);\r",
																	"// }\r",
																	"\r",
																	"// console.log(\"supplierCode is : \" +pm.environment.get(\"supplierCode\"));\r",
																	"// console.log(\"supplierName is : \" +pm.environment.get(\"supplierName\"));\r",
																	"// console.log(\"supplierorganizationNumber is : \" +pm.environment.get(\"supplierorganizationNumber\"));\r",
																	"// console.log(\"supplierorganizationAuthorityCode is : \" +pm.environment.get(\"supplierorganizationAuthorityCode-A\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"supplierStreet is : \" +pm.environment.get(\"supplierStreet\"));\r",
																	"// console.log(\"supplierCity is : \" +pm.environment.get(\"supplierCity\"));\r",
																	"// console.log(\"supplierZipcode is : \" +pm.environment.get(\"supplierZipcode\"));\r",
																	"// console.log(\"supplierPhone is : \" +pm.environment.get(\"supplierPhone\"));\r",
																	"\r",
																	"// console.log(\"supplierEmail is : \" +pm.environment.get(\"supplierEmail\"));\r",
																	"// console.log(\"supplierCountry is : \" +pm.environment.get(\"supplierCountry\"));\r",
																	"// console.log(\"supplierStatus is : \" +pm.environment.get(\"supplierStatus\"));\r",
																	"// console.log(\"supplierDefaultAccountingCode is : \" +pm.environment.get(\"supplierDefaultAccountingCode\"));\r",
																	"// console.log(\"supplierExternalId is : \" +pm.environment.get(\"supplierExternalId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{cSupplierCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"suppliers",
																"{{cSupplierCode-A}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - SupplierMinHakkeBakke",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json();\r",
																	"//console.log(jsonData);\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"      if(jsonData.code ==\"50001\"){\r",
																	"          jsonDataDep=jsonData\r",
																	"    \r",
																	"    pm.environment.set(\"supplierCode\", jsonDataDep.code);\r",
																	"    pm.environment.set(\"supplierName\", jsonDataDep.name);\r",
																	"    pm.environment.set(\"supplierorganizationNumber\", jsonDataDep.organizationNumber);\r",
																	"    pm.environment.set(\"supplierorganizationAuthorityCode\", jsonDataDep.organizationAuthorityCode);\r",
																	"    pm.environment.set(\"supplierStreet\", jsonDataDep.address.street);\r",
																	"    pm.environment.set(\"supplierCity\", jsonDataDep.address.city);\r",
																	"    pm.environment.set(\"supplierZipcode\", jsonDataDep.address.zipcode);\r",
																	"    pm.environment.set(\"supplierPhone\", jsonDataDep.address.phone);\r",
																	"    pm.environment.set(\"supplierEmail\", jsonDataDep.address.email);\r",
																	"    pm.environment.set(\"supplierCountry\", jsonDataDep.address.country);\r",
																	"\r",
																	"    pm.environment.set(\"supplierBankName\", jsonDataDep.bankAccounts[0].bankName);\r",
																	"    pm.environment.set(\"supplierAccountNumber\", jsonDataDep.bankAccounts[0].accountNumber);\r",
																	"    pm.environment.set(\"supplierIbanAccountNumber\", jsonDataDep.bankAccounts[0].ibanAccountNumber);\r",
																	"    pm.environment.set(\"supplierSwiftCode\", jsonDataDep.bankAccounts[0].swiftCode);\r",
																	"    pm.environment.set(\"supplierBankAccountsStatus\", jsonDataDep.bankAccounts[0].status);\r",
																	"\r",
																	"\r",
																	"    pm.environment.set(\"supplierStatus\", jsonDataDep.status);\r",
																	"    pm.environment.set(\"supplierDefaultAccountingCode\", jsonDataDep.defaultAccountingCode);\r",
																	"    pm.environment.set(\"supplierExternalId\", jsonDataDep.externalId);\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"// console.log(\"supplierCode is : \" +pm.environment.get(\"supplierCode\"));\r",
																	"// console.log(\"supplierName is : \" +pm.environment.get(\"supplierName\"));\r",
																	"// console.log(\"supplierorganizationNumber is : \" +pm.environment.get(\"supplierorganizationNumber\"));\r",
																	"// console.log(\"supplierorganizationAuthorityCode is : \" +pm.environment.get(\"supplierorganizationAuthorityCode\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"supplierStreet is : \" +pm.environment.get(\"supplierStreet\"));\r",
																	"// console.log(\"supplierCity is : \" +pm.environment.get(\"supplierCity\"));\r",
																	"// console.log(\"supplierZipcode is : \" +pm.environment.get(\"supplierZipcode\"));\r",
																	"// console.log(\"supplierPhone is : \" +pm.environment.get(\"supplierPhone\"));\r",
																	"// console.log(\"supplierEmail is : \" +pm.environment.get(\"supplierEmail\"));\r",
																	"// console.log(\"supplierCountry is : \" +pm.environment.get(\"supplierCountry\"));\r",
																	"\r",
																	"// console.log(\"supplierBankName is : \" +pm.environment.get(\"supplierBankName\"));\r",
																	"// console.log(\"supplierAccountNumber is : \" +pm.environment.get(\"supplierAccountNumber\"));\r",
																	"// console.log(\"supplierIbanAccountNumber is : \" +pm.environment.get(\"supplierIbanAccountNumber\"));\r",
																	"// console.log(\"supplierSwiftCode is : \" +pm.environment.get(\"supplierSwiftCode\"));\r",
																	"// console.log(\"supplierBankAccountsStatus is : \" +pm.environment.get(\"supplierBankAccountsStatus\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"supplierStatus is : \" +pm.environment.get(\"supplierStatus\"));\r",
																	"// console.log(\"supplierDefaultAccountingCode is : \" +pm.environment.get(\"supplierDefaultAccountingCode\"));\r",
																	"// console.log(\"supplierExternalId is : \" +pm.environment.get(\"supplierExternalId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{cSupplierCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"suppliers",
																"{{cSupplierCode-A}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Parameters Values",
											"item": [
												{
													"name": "PWA /values//ID 1 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataInt;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1000\"){\r",
																	"          jsonDataInt=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdLedger\", jsonDataInt.parameterValueId);\r",
																	"          pm.environment.set(\"ledgerDescription\", jsonDataInt.description);\r",
																	"          pm.environment.set(\"ledgerCreatedDate\", jsonDataInt.createdDate);\r",
																	"          pm.environment.set(\"ledgerValueCode\", jsonDataInt.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1020\"){\r",
																	"          jsonDataInt=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdLedger_1\", jsonDataInt.parameterValueId);\r",
																	"          pm.environment.set(\"ledgerDescription_1\", jsonDataInt.description);\r",
																	"          pm.environment.set(\"ledgerCreatedDate_1\", jsonDataInt.createdDate);\r",
																	"          pm.environment.set(\"ledgerValueCode_1\", jsonDataInt.code);\r",
																	"    }\r",
																	"    }\r",
																	"      for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1030\"){\r",
																	"          jsonDataInt=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdLedger_2\", jsonDataInt.parameterValueId);\r",
																	"          pm.environment.set(\"ledgerDescription_2\", jsonDataInt.description);\r",
																	"          pm.environment.set(\"ledgerCreatedDate_2\", jsonDataInt.createdDate);\r",
																	"          pm.environment.set(\"ledgerValueCode_2\", jsonDataInt.code);\r",
																	"    }\r",
																	"    }\r",
																	"  \r",
																	"}\r",
																	"\r",
																	"\r",
																	"console.log(\"ParameterValueIdLedger is : \" +pm.environment.get(\"parameterValueIdLedger\"));\r",
																	"console.log(\"LedgerDescription is : \" +pm.environment.get(\"ledgerDescription\"));\r",
																	"console.log(\"LedgerCreatedDate is : \" +pm.environment.get(\"ledgerCreatedDate\"));\r",
																	"console.log(\"LedgerValueCode is : \" +pm.environment.get(\"ledgerValueCode\"));\r",
																	"\r",
																	"\r",
																	"console.log(\"ParameterValueIdLedger_1 is : \" +pm.environment.get(\"parameterValueIdLedger_1\"));\r",
																	"console.log(\"LedgerDescription_1 is : \" +pm.environment.get(\"ledgerDescription_1\"));\r",
																	"console.log(\"LedgerCreatedDate_1 is : \" +pm.environment.get(\"ledgerCreatedDate_1\"));\r",
																	"console.log(\"LedgerValueCode_1 is : \" +pm.environment.get(\"ledgerValueCode_1\"));\r",
																	"\r",
																	"\r",
																	"console.log(\"ParameterValueIdLedger_2 is : \" +pm.environment.get(\"parameterValueIdLedger_2\"));\r",
																	"console.log(\"LedgerDescription_2 is : \" +pm.environment.get(\"ledgerDescription_2\"));\r",
																	"console.log(\"LedgerCreatedDate_2 is : \" +pm.environment.get(\"ledgerCreatedDate_2\"));\r",
																	"console.log(\"LedgerValueCode_2 is : \" +pm.environment.get(\"ledgerValueCode_2\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1000\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdInterim\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"interimDescription\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"interimCreatedDate\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"interimValueCode\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1020\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"           pm.environment.set(\"parameterValueIdInterim_1\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"interimDescription_1\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"interimCreatedDate_1\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"interimValueCode_1\", jsonDataDep.code);\r",
																	"\r",
																	"    }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdInterim is : \" +pm.environment.get(\"parameterValueIdInterim\"));\r",
																	"// console.log(\"interimDescription is : \" +pm.environment.get(\"interimDescription\"));\r",
																	"// console.log(\"interimCreatedDate is : \" +pm.environment.get(\"interimCreatedDate\"));\r",
																	"// console.log(\"interimValueCode is : \" +pm.environment.get(\"interimValueCode\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdInterim_1 is : \" +pm.environment.get(\"parameterValueIdInterim_1\"));\r",
																	"// console.log(\"interimDescription_1 is : \" +pm.environment.get(\"interimDescription_1\"));\r",
																	"// console.log(\"interimCreatedDate_1 is : \" +pm.environment.get(\"interimCreatedDate_1\"));\r",
																	"// console.log(\"interimValueCode_1 is : \" +pm.environment.get(\"interimValueCode_1\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdInterim}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - Vat",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataVat;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"0\"){\r",
																	"          jsonDataVat=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdVatCode\", jsonDataVat.parameterValueId);\r",
																	"          pm.environment.set(\"vatCodeDescription\", jsonDataVat.description);\r",
																	"          pm.environment.set(\"vatCodeCreatedDate\", jsonDataVat.createdDate);\r",
																	"          pm.environment.set(\"vatValueCode\", jsonDataVat.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"13R\"){\r",
																	"          jsonDataVat=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdVatCode_1\", jsonDataVat.parameterValueId);\r",
																	"          pm.environment.set(\"vatCodeDescription_1\", jsonDataVat.description);\r",
																	"          pm.environment.set(\"vatCodeCreatedDate_1\", jsonDataVat.createdDate);\r",
																	"          pm.environment.set(\"vatValueCode_1\", jsonDataVat.code);\r",
																	"    }\r",
																	"    }\r",
																	"      for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"14\"){\r",
																	"          jsonDataVat=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdVatCode_2\", jsonDataVat.parameterValueId);\r",
																	"          pm.environment.set(\"vatCodeDescription_2\", jsonDataVat.description);\r",
																	"          pm.environment.set(\"vatCodeCreatedDate_2\", jsonDataVat.createdDate);\r",
																	"          pm.environment.set(\"vatValueCode_2\", jsonDataVat.code);\r",
																	"    }\r",
																	"    }\r",
																	"  \r",
																	"}\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdVatCode is : \" +pm.environment.get(\"parameterValueIdVatCode\"));\r",
																	"// console.log(\"VatCodeDescription is : \" +pm.environment.get(\"vatCodeDescription\"));\r",
																	"// console.log(\"VatCodeCreatedDate is : \" +pm.environment.get(\"vatCodeCreatedDate\"));\r",
																	"// console.log(\"VatValueCode is : \" +pm.environment.get(\"vatValueCode\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdVatCode_1 is : \" +pm.environment.get(\"parameterValueIdVatCode_1\"));\r",
																	"// console.log(\"VatCodeDescription_1 is : \" +pm.environment.get(\"vatCodeDescription_1\"));\r",
																	"// console.log(\"VatCodeCreatedDate_1 is : \" +pm.environment.get(\"vatCodeCreatedDate_1\"));\r",
																	"// console.log(\"VatValueCode_1 is : \" +pm.environment.get(\"vatValueCode_1\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdVatCode_2 is : \" +pm.environment.get(\"parameterValueIdVatCode_2\"));\r",
																	"// console.log(\"VatCodeDescription_2 is : \" +pm.environment.get(\"vatCodeDescription_2\"));\r",
																	"// console.log(\"VatCodeCreatedDate_2 is : \" +pm.environment.get(\"vatCodeCreatedDate_2\"));\r",
																	"// console.log(\"VatValueCode_2 is : \" +pm.environment.get(\"vatValueCode_2\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdVat}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - DimensionMinKostnadbarer_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataPro;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"22533\"){\r",
																	"          jsonDataPro=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionMin_kostnadsbarer_3\", jsonDataPro.parameterValueId);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3Description\", jsonDataPro.description);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3CreatedDate\", jsonDataPro.createdDate);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3ValueCode\", jsonDataPro.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"3154\"){\r",
																	"          jsonDataPro=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionMin_kostnadsbarer_3_1\", jsonDataPro.parameterValueId);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3Description_1\", jsonDataPro.description);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3CreatedDate_1\", jsonDataPro.createdDate);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3ValueCode_1\", jsonDataPro.code);\r",
																	"    }\r",
																	"    }\r",
																	"      for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"f23fg\"){\r",
																	"          jsonDataPro=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionMin_kostnadsbarer_3_2\", jsonDataPro.parameterValueId);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3Description_2\", jsonDataPro.description);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3CreatedDate_2\", jsonDataPro.createdDate);\r",
																	"          pm.environment.set(\"Min_kostnadsbarer_3ValueCode_2\", jsonDataPro.code);\r",
																	"    }\r",
																	"    }\r",
																	"  \r",
																	"}\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionMin_kostnadsbarer_3 is : \" +pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3Description is : \" +pm.environment.get(\"Min_kostnadsbarer_3Description\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3CreatedDate is : \" +pm.environment.get(\"Min_kostnadsbarer_3CreatedDate\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3ValueCode is : \" +pm.environment.get(\"Min_kostnadsbarer_3ValueCode\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionMin_kostnadsbarer_3_1 is : \" +pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3_1\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3Description_1 is : \" +pm.environment.get(\"Min_kostnadsbarer_3Description_1\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3CreatedDate_1 is : \" +pm.environment.get(\"Min_kostnadsbarer_3CreatedDate_1\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3ValueCode_1 is : \" +pm.environment.get(\"Min_kostnadsbarer_3ValueCode_1\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionMin_kostnadsbarer_3_2 is : \" +pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3_2\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3Description_2 is : \" +pm.environment.get(\"Min_kostnadsbarer_3Description_2\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3CreatedDate_2 is : \" +pm.environment.get(\"Min_kostnadsbarer_3CreatedDate_2\"));\r",
																	"// console.log(\"Min_kostnadsbarer_3ValueCode_2 is : \" +pm.environment.get(\"Min_kostnadsbarer_3ValueCode_2\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionMin_kostnadsbarer_3}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdDimensionMin_kostnadsbarer_3}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - DimensionTudels",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"32G23G\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionTudels\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"TudelsDescription\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"TudelsCreatedDate\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"TudelsValueCode\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"TG2W4TG\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionTudels_1\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"TudelsDescription_1\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"TudelsCreatedDate_1\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"TudelsValueCode_1\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionTudels is : \" +pm.environment.get(\"parameterValueIdDimensionTudels\"));\r",
																	"// console.log(\"TudelsDescription is : \" +pm.environment.get(\"TudelsDescription\"));\r",
																	"// console.log(\"TudelsCreatedDate is : \" +pm.environment.get(\"TudelsCreatedDate\"));\r",
																	"// console.log(\"TudelsValueCode is : \" +pm.environment.get(\"TudelsValueCode\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionTudels_1 is : \" +pm.environment.get(\"parameterValueIdDimensionTudels_1\"));\r",
																	"// console.log(\"TudelsDescription_1 is : \" +pm.environment.get(\"TudelsDescription_1\"));\r",
																	"// console.log(\"TudelsCreatedDate_1 is : \" +pm.environment.get(\"TudelsCreatedDate_1\"));\r",
																	"// console.log(\"TudelsValueCode_1 is : \" +pm.environment.get(\"TudelsValueCode_1\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionTudels}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdDimensionTudels}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - DimensionAvdeling",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"0\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionAvdeling\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"AvdelingDescription\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"AvdelingCreatedDate\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"AvdelingValueCode\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"  for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionAvdeling_1\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"AvdelingDescription_1\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"AvdelingCreatedDate_1\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"AvdelingValueCode_1\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionAvdeling is : \" +pm.environment.get(\"parameterValueIdDimensionAvdeling\"));\r",
																	"// console.log(\"AvdelingDescription is : \" +pm.environment.get(\"AvdelingDescription\"));\r",
																	"// console.log(\"AvdelingCreatedDate is : \" +pm.environment.get(\"AvdelingCreatedDate\"));\r",
																	"// console.log(\"AvdelingValueCode is : \" +pm.environment.get(\"AvdelingValueCode\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionAvdeling_1 is : \" +pm.environment.get(\"parameterValueIdDimensionAvdeling_1\"));\r",
																	"// console.log(\"AvdelingDescription_1 is : \" +pm.environment.get(\"AvdelingDescription_1\"));\r",
																	"// console.log(\"AvdelingCreatedDate_1 is : \" +pm.environment.get(\"AvdelingCreatedDate_1\"));\r",
																	"// console.log(\"AvdelingValueCode_1 is : \" +pm.environment.get(\"AvdelingValueCode_1\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionAvdeling}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdDimensionAvdeling}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - DimensionPeriode",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"6MÅNEDER\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionPeriode\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"PeriodeDescription\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"PeriodeCreatedDate\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"PeriodeValueCode\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionPeriode is : \" +pm.environment.get(\"parameterValueIdDimensionPeriode\"));\r",
																	"// console.log(\"PeriodeDescription is : \" +pm.environment.get(\"PeriodeDescription\"));\r",
																	"// console.log(\"PeriodeCreatedDate is : \" +pm.environment.get(\"PeriodeCreatedDate\"));\r",
																	"// console.log(\"PeriodeValueCode is : \" +pm.environment.get(\"PeriodeValueCode\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionPeriode}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdDimensionPeriode}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values//ID 1 - DimensionHuttemeitooooo",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json().data;\r",
																	"var jsonDataDep;\r",
																	"\r",
																	"for(i in jsonData){\r",
																	"      if(jsonData[i].code ==\"1231\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionHuttemeitooooo\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"HuttemeitoooooDescription\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"HuttemeitoooooCreatedDate\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"HuttemeitoooooValueCode\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"    for(i in jsonData){\r",
																	"     if(jsonData[i].code ==\"1234\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionHuttemeitooooo_1\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"HuttemeitoooooDescription_1\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"HuttemeitoooooCreatedDate_1\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"HuttemeitoooooValueCode_1\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"    for(i in jsonData){\r",
																	"     if(jsonData[i].code ==\"41T5\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionHuttemeitooooo_2\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"HuttemeitoooooDescription_2\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"HuttemeitoooooCreatedDate_2\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"HuttemeitoooooValueCode_2\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"    for(i in jsonData){\r",
																	"     if(jsonData[i].code ==\"G23\"){\r",
																	"          jsonDataDep=jsonData[i]\r",
																	"          pm.environment.set(\"parameterValueIdDimensionHuttemeitooooo_3\", jsonDataDep.parameterValueId);\r",
																	"          pm.environment.set(\"HuttemeitoooooDescription_3\", jsonDataDep.description);\r",
																	"          pm.environment.set(\"HuttemeitoooooCreatedDate_3\", jsonDataDep.createdDate);\r",
																	"          pm.environment.set(\"HuttemeitoooooValueCode_3\", jsonDataDep.code);\r",
																	"    }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionHuttemeitooooo is : \" +pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo\"));\r",
																	"// console.log(\"HuttemeitoooooDescription is : \" +pm.environment.get(\"HuttemeitoooooDescription\"));\r",
																	"// console.log(\"HuttemeitoooooCreatedDate is : \" +pm.environment.get(\"HuttemeitoooooCreatedDate\"));\r",
																	"// console.log(\"HuttemeitoooooValueCode is : \" +pm.environment.get(\"HuttemeitoooooValueCode\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionHuttemeitooooo_1 is : \" +pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_1\"));\r",
																	"// console.log(\"HuttemeitoooooDescription_1 is : \" +pm.environment.get(\"HuttemeitoooooDescription_1\"));\r",
																	"// console.log(\"HuttemeitoooooCreatedDate_1 is : \" +pm.environment.get(\"HuttemeitoooooCreatedDate_1\"));\r",
																	"// console.log(\"HuttemeitoooooValueCode_1 is : \" +pm.environment.get(\"HuttemeitoooooValueCode_1\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionHuttemeitooooo_2 is : \" +pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_2\"));\r",
																	"// console.log(\"HuttemeitoooooDescription_2 is : \" +pm.environment.get(\"HuttemeitoooooDescription_2\"));\r",
																	"// console.log(\"HuttemeitoooooCreatedDate_2 is : \" +pm.environment.get(\"HuttemeitoooooCreatedDate_2\"));\r",
																	"// console.log(\"HuttemeitoooooValueCode_2 is : \" +pm.environment.get(\"HuttemeitoooooValueCode_2\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"// console.log(\"parameterValueIdDimensionHuttemeitooooo_3 is : \" +pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_3\"));\r",
																	"// console.log(\"HuttemeitoooooDescription_3 is : \" +pm.environment.get(\"HuttemeitoooooDescription_3\"));\r",
																	"// console.log(\"HuttemeitoooooCreatedDate_3 is : \" +pm.environment.get(\"HuttemeitoooooCreatedDate_3\"));\r",
																	"// console.log(\"HuttemeitoooooValueCode_3 is : \" +pm.environment.get(\"HuttemeitoooooValueCode_3\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionHuttemeitooooo}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"parameters",
																"{{parameterIdDimensionHuttemeitooooo}}",
																"values",
																"devextreme"
															],
															"query": [
																{
																	"key": "filter",
																	"value": "[\"isActive\",\"=\",true]"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Check Data on ClientLevel",
									"item": [
										{
											"name": "List parameters",
											"item": [
												{
													"name": "Supplier and Parameters",
													"item": [
														{
															"name": "PWA /parameters/condensed",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"//////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json();\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Min kostnadsbærer 3\") {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min kostnadsbærer 3 is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", \"Min kostnadsbærer 3\");\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", \"Min kostnadsbærer 3\");\r",
																			"    });\r",
																			"    \r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"tudels\") {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Tudels is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", \"tudels\");\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", \"tudels\");\r",
																			"    });\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Avdeling\") {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Avdeling is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", \"Avdeling\");\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", \"Avdeling\");\r",
																			"    });\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Periode\") {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Periode is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", \"Periode\");\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", \"Periode\");\r",
																			"    });\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"Huttemeitooooo\") {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", \"Huttemeitooooo\");\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", \"Huttemeitooooo\");\r",
																			"    });\r",
																			"\r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-language-code",
																		"value": "en",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/condensed",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"condensed"
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 - Supplier",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"//////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdSupplier\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier min hakke bakke is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"supplierCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-A\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"supplierDescription\"));\r",
																			"    });\r",
																			"    \r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdSupplier_2\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier prekka dikka is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"supplierCreatedDate_2\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"supplierDescription_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-A-2\"));\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdSupplier_3\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier Semine AS is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"supplierCreatedDate_3\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"supplierDescription_3\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-A-3\"));\r",
																			"    });\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdSupplier_4\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier FrontByte AS is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"supplierCreatedDate_4\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"supplierDescription_4\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-A-4\"));\r",
																			"    });\r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdSupplier}}",
																		"values",
																		"devextreme"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Parameters Values",
													"item": [
														{
															"name": "PWA /values//ID 1 - Ledger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"//////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdLedger\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"       \r",
																			"    }\r",
																			"    }\r",
																			"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"ledgerCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"ledgerValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"ledgerDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"   \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdLedger_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"             break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account_1 is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"ledgerCreatedDate_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"ledgerValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"ledgerDescription_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdLedger_2\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"             break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account_2 is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"ledgerCreatedDate_2\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"ledgerValueCode_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"ledgerDescription_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"   \r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdLedger}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 - Vat",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdVatCode\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCode is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"vatCodeCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"vatValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"vatCodeDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdVatCode_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"       \r",
																			"    }\r",
																			"    }\r",
																			"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCode_1 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"vatCodeCreatedDate_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"vatValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"vatCodeDescription_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"   \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdVatCode_2\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"       \r",
																			"    }\r",
																			"    }\r",
																			"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCode_2 is found. \", function () {\r",
																			"       // pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"vatCodeCreatedDate_2\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"vatValueCode_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"vatCodeDescription_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"}\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdVat}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdVat}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 - DimensionMinKostnadbarer_3",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break; \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min_kostnadsbarer_3 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"Min_kostnadsbarer_3CreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"Min_kostnadsbarer_3ValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"Min_kostnadsbarer_3Description\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"   \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min_kostnadsbarer_3_1 is found. \", function () {\r",
																			"       // pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"Min_kostnadsbarer_3CreatedDate_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"Min_kostnadsbarer_3ValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"Min_kostnadsbarer_3Description_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionMin_kostnadsbarer_3_2\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min_kostnadsbarer_3_2 is found. \", function () {\r",
																			"       // pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"Min_kostnadsbarer_3CreatedDate_2\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"Min_kostnadsbarer_3ValueCode_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"Min_kostnadsbarer_3Description_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"    \r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionMin_kostnadsbarer_3}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdDimensionMin_kostnadsbarer_3}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 - DimensionTudels",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionTudels\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Tudels is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"TudelsCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"TudelsValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"TudelsDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionTudels_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Tudels_1 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"TudelsCreatedDate_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"TudelsValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"TudelsDescription_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionTudels}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdDimensionTudels}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 -  DimensionAvdeling",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionAvdeling\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Avdeling is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"AvdelingCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"AvdelingValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"AvdelingDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionAvdeling_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Avdeling_1 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"AvdelingCreatedDate_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"AvdelingValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"AvdelingDescription_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    \r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionAvdeling}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdDimensionAvdeling}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 -  DimensionPeriode",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionPeriode\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Periode is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"PeriodeCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"PeriodeValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"PeriodeDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionPeriode}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdDimensionPeriode}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA /values//ID 1 -  DimensionHuttemeitooooo",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"HuttemeitoooooCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_1\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo_1 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"HuttemeitoooooCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_2\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo_2 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"HuttemeitoooooCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"    for (x in jsonData) {\r",
																			"        if (jsonData[x].parameterValueId == pm.environment.get(\"parameterValueIdDimensionHuttemeitooooo_3\")) {\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"            break;\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo_3 is found. \", function () {\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"createdDate\", pm.environment.get(\"HuttemeitoooooCreatedDate\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode_3\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription_3\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"isActive\", true);\r",
																			"    });\r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionHuttemeitooooo}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"parameters",
																		"{{parameterIdDimensionHuttemeitooooo}}",
																		"values",
																		"devextreme"
																	],
																	"query": [
																		{
																			"key": "filter",
																			"value": "[\"isActive\",\"=\",true]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "PWA / client/currencies",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"/////// Check Data Which came from ERP /////////\r",
																			"if (pm.response.code == 200) {\r",
																			"    const jsonData = pm.response.json().data;\r",
																			"    var jsonDataERP;\r",
																			"    var x;\r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if(jsonData[x].currencyCode ==\"DKK\" && jsonData[x].baseCurrencyCode==\"NOK\"  ){\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"validFrom\", pm.environment.get(\"validFrom\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"conversionRate\", pm.environment.get(\"conversionRate\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"numberOfUnits\", pm.environment.get(\"numberOfUnits\"));\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"modified\", pm.environment.get(\"modified\"));\r",
																			"    });\r",
																			"    \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if(jsonData[x].currencyCode ==\"EUR\" && jsonData[x].baseCurrencyCode==\"NOK\"  ){\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency_1 is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"validFrom\", pm.environment.get(\"validFrom_1\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"conversionRate\", pm.environment.get(\"conversionRate_1\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"numberOfUnits\", pm.environment.get(\"numberOfUnits_1\"));\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"modified\", pm.environment.get(\"modified_1\"));\r",
																			"    });\r",
																			"   \r",
																			"\r",
																			"    for (x in jsonData) {\r",
																			"        if(jsonData[x].currencyCode ==\"GBP\" && jsonData[x].baseCurrencyCode==\"NOK\"  ){\r",
																			"            jsonDataERP=jsonData[x];\r",
																			"        \r",
																			"    }\r",
																			"    }\r",
																			"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency_2 is found. \", function () {\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"validFrom\", pm.environment.get(\"validFrom_2\"));    \r",
																			"        pm.expect(jsonDataERP).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"conversionRate\", pm.environment.get(\"conversionRate_2\"));\r",
																			"        pm.expect(jsonDataERP).to.have.property(\"numberOfUnits\", pm.environment.get(\"numberOfUnits_2\"));\r",
																			"        //pm.expect(jsonDataERP).to.have.property(\"modified\", pm.environment.get(\"modified_2\"));\r",
																			"    });\r",
																			"    \r",
																			"}\r",
																			"\r",
																			"\r",
																			"\r",
																			"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode\"));\r",
																			"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom\"));\r",
																			"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate\"));\r",
																			"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits\"));\r",
																			"// console.log(\"Modified is : \" +pm.environment.get(\"modified\"));\r",
																			"\r",
																			"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode_1\"));\r",
																			"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom_1\"));\r",
																			"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate_1\"));\r",
																			"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits_1\"));\r",
																			"// console.log(\"Modified is : \" +pm.environment.get(\"modified_1\"));\r",
																			"\r",
																			"// console.log(\"Currency is : \" +pm.environment.get(\"currencyCode_2\"));\r",
																			"// console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom_2\"));\r",
																			"// console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate_2\"));\r",
																			"// console.log(\"NumberOfUnits is : \" +pm.environment.get(\"numberOfUnits_2\"));\r",
																			"// console.log(\"Modified is : \" +pm.environment.get(\"modified_2\"));\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"\r",
																			"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy is found.\", function () {\r",
																			"//         pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode\"));\r",
																			"//         pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"validFrom\"));\r",
																			"//         });\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currencies",
																	"host": [
																		"{{PWA}}"
																	],
																	"path": [
																		"organizations",
																		"{{intOrganizationId}}",
																		"clients",
																		"{{intDatasetId}}",
																		"currencies"
																	]
																},
																"description": "Gets a fixed asset object based on the ERP code."
															},
															"response": []
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Invoices",
							"item": [
								{
									"name": "Invoice-1",
									"item": [
										{
											"name": "INT /invoices - Cost Minimum - Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															"pm.environment.set(\"invoiceCount\", 1);\r",
															"\r",
															"console.log(pm.environment.get(\"invoiceCount\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}"
													]
												},
												"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
											},
											"response": []
										},
										{
											"name": "INT /invoices - Cost Minimum - Repeat N",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"var invoiceCount;\r",
															"\r",
															"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
															"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
															"\r",
															"invoiceCount++;\r",
															"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
															"\r",
															"console.log(pm.environment.get(\"invoiceNumber\"));\r",
															"\r",
															"\r",
															"// Invoice dates\r",
															"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
															"pm.environment.set(\"cInvoiceDate\", moment());\r",
															"pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
															"\r",
															"pm.environment.set(\"dateStart\", moment().format(\"DD.MM.YYYY\"));\r",
															"pm.environment.set(\"dateEnd\", moment().add(10, 'days').format(\"DD.MM.YYYY\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
															"}\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"console.log(\"invoiceCountLimit is: \" + pm.environment.get(\"invoiceCountLimit\"));\r",
															"console.log(pm.response.json());\r",
															"\r",
															"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
															"    postman.setNextRequest(pm.info.requestId);\r",
															"} else {\r",
															"    postman.setNextRequest(); // Just move on to the next request\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"{{currencyCode}}\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"{{supplierAccountNumber}}\",\r\n        \"IbanAccountNumber\": \"{{supplierIbanAccountNumber}}\",\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"{{supplierName}}\",\r\n        \"Code\": \"{{supplierCode}}\",\r\n        \"VatNumber\": \"{{vatValueCode}}\",\r\n        \"OrganizationNumber\": \"{{supplierorganizationNumber}}\",\r\n        \"OrganizationNumberAuthority\": \"{{supplierorganizationAuthorityCode}}\",\r\n        \"Phone\": \"{{supplierPhone}}\",\r\n        \"Mobile\": \"{{supplierPhone}}\",\r\n        \"Web\": \"{{supplierEmail}}\",\r\n        \"Street\": \"{{supplierStreet}}\",\r\n        \"Zip\": \"{{supplierZipcode}}\",\r\n        \"Country\": \"{{supplierCountry}}\",\r\n        \"City\": \"{{supplierCity}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": \"{{supplierIbanAccountNumber}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"{{customerName}}\",\r\n        \"Code\": \"{{customerCode}}\",\r\n        \"VatNumber\": \"{{vatValueCode}}\",\r\n        \"OrganizationNumber\": \"{{supplierorganizationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"{{currencyCode}}\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"{{currencyCode}}\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{cInvoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"{{currencyCode}}\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"{{currencyCode}}\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices"
													]
												},
												"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
											},
											"response": []
										},
										{
											"name": "--- Sleep 5 sec---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(7);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - Poll available state",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
															"});\r",
															"\r",
															"function sleep(milisecond) {\r",
															"    var date = Date.now();\r",
															"    while ((date + milisecond) > Date.now());\r",
															"}\r",
															"\r",
															"var retries = pm.globals.get(\"retries\");\r",
															"\r",
															"if (retries < 15) { // Try every 20s for 5 minutes\r",
															"    if (pm.response.code == 200) {\r",
															"        var jsonData = pm.response.json();\r",
															"        var i = 0;\r",
															"        if (typeof jsonData == \"object\") {\r",
															"\r",
															"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\" || jsonData.status == \"MissingWorkflow\"|| jsonData.status == \"Approved\")) {\r",
															"\r",
															"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
															"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
															"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
															"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
															"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
															"                });\r",
															"                postman.setNextRequest();\r",
															"                pm.globals.set(\"retries\", 0);\r",
															"\r",
															"                console.log(jsonData);\r",
															"\r",
															"            } else {\r",
															"                retries++;\r",
															"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
															"                postman.setNextRequest(pm.info.requestId);\r",
															"                console.log(jsonData);\r",
															"                sleep(20000); // Wait 20s and then try again\r",
															"            }\r",
															"\r",
															"        } else {\r",
															"            retries++;\r",
															"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
															"            postman.setNextRequest(pm.info.requestId);\r",
															"            console.log(jsonData);\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate, MissingWorkflow, Approved]\", function () {\r",
															"                pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\", \"MissingWorkflow\", \"Approved\"]);\r",
															"            });\r",
															"            sleep(20000); // Wait 20s and then try again\r",
															"        }\r",
															"\r",
															"    } else {\r",
															"        retries++;\r",
															"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
															"        postman.setNextRequest(pm.info.requestId);\r",
															"        console.log(pm.response.json());\r",
															"        sleep(20000); // Wait 20s and then try again\r",
															"    }\r",
															"} else {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate, MissingWorkflow, Approved ]\", function () {\r",
															"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\", \"MissingWorkflow\", \"Approved\"]);\r",
															"    });\r",
															"    console.log(\"retries: \" + retries);\r",
															"    postman.setNextRequest(\"--- Skip to END ---\");\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "INT /invoices - checkSupplierAndLines",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and sublier are found. \", function () {",
															"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
															"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", pm.environment.get(\"supplierName\"));",
															"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Api\");",
															"        ",
															"    });",
															"",
															"if (pm.response.code == 200) {",
															"",
															"var jsonDataAL = pm.response.json().invoiceLines;",
															"   //console.log(jsonDataAL);",
															"",
															"   var jsonDataAL1;",
															"    ",
															"    var i;",
															"    for (i in jsonDataAL) {",
															"        if (jsonDataAL[i].lineNumber == 1) {",
															"        jsonDataAL1 =jsonDataAL[i];",
															"        break;",
															"    }",
															"    }  ",
															"    pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-1 is found. \", function () {",
															"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 1);",
															"    });",
															"    for (i in jsonDataAL) {",
															"    if (jsonDataAL[i].lineNumber == 2) {",
															"        jsonDataAL1 =jsonDataAL[i];",
															"        break;",
															"    }  ",
															"    }",
															"    pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-2 is found. \", function () {",
															"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 2);",
															"    });",
															"    }",
															"       console.log(\"LineNumber is \" + pm.environment.get(\"lineNumber\"));",
															"     ",
															"",
															"/////----Check Supplier//////",
															"if (pm.response.code == 200) {",
															"",
															"    const jsonData = pm.response.json().supplierParty;",
															"",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min Hakke Bakke supplier is found. \", function () {",
															"        pm.expect(jsonData).to.have.property(\"name\", pm.environment.get(\"supplierName\"));",
															"        //pm.expect(jsonData).to.have.property(\"vatNumber\", pm.environment.get(\"vatValueCode\"));",
															"        //pm.expect(jsonData).to.have.property(\"organizationNumber\", pm.environment.get(\"supplierorganizationNumber\"));",
															"        pm.expect(jsonData).to.have.property(\"phone\", null);",
															"        pm.expect(jsonData).to.have.property(\"mobile\", null);",
															"        pm.expect(jsonData).to.have.property(\"web\", null);",
															"        pm.expect(jsonData).to.have.property(\"zip\", pm.environment.get(\"supplierZipcode\"));",
															"        pm.expect(jsonData).to.have.property(\"street\", pm.environment.get(\"supplierStreet\"));",
															"        pm.expect(jsonData).to.have.property(\"country\", pm.environment.get(\"supplierCountry\"));",
															"        pm.expect(jsonData).to.have.property(\"city\", pm.environment.get(\"supplierCity\"));",
															"",
															"        pm.expect(jsonData).to.have.property(\"bankAccountNumber\", pm.environment.get(\"supplierAccountNumber\"));",
															"        //pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", pm.environment.get(\"supplierIbanAccountNumber\"));",
															"        //pm.expect(jsonData).to.have.property(\"externalId\", pm.environment.get(\"supplierExternalId\"));",
															"    });",
															"}",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}"
													]
												},
												"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
											},
											"response": []
										}
									]
								},
								{
									"name": "Line",
									"item": [
										{
											"name": "PWA /invoiceLines/ID 1 -seeLine",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// if (pm.response.code == 200) {\r",
															"//     pm.environment.set(\"parameterId\", pm.response.json().invoiceLines[0].accountingParameters[0].parameterId);\r",
															"// }\r",
															"\r",
															" var jsonDataAL = pm.response.json().invoiceLines;\r",
															"   //console.log(jsonDataAL);\r",
															"    var jsonDataAL1;\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].lineNumber == 1) {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"             pm.environment.set(\"cInvoiceLineId_1\", jsonDataAL1.invoiceLineId);\r",
															"    }  \r",
															"        if (jsonDataAL[i].lineNumber == 2) {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"            pm.environment.set(\"cInvoiceLineId_2\", jsonDataAL1.invoiceLineId);\r",
															"    }\r",
															"    }\r",
															"    "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/invoicelines",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - PutAllRequeredPar_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// if (pm.response.code == 200) {",
															"",
															"// const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
															"//    //console.log(jsonDataAL);",
															"",
															"//     var jsonDataAL1;",
															"",
															"//     var i;",
															"",
															"//     for (i in jsonDataAL) {",
															"//         if (jsonDataAL[i].parameterTypeCode == \"Interim\" && jsonDataAL[i].code == pm.environment.get(\"Interim-1\")) {",
															"//             var jsonDataAL1 =jsonDataAL[i];",
															"//         pm.environment.set(\"interimCode\", jsonDataAL1.code);",
															"//         pm.environment.set(\"interimDescription\", jsonDataAL1.description);",
															"//          pm.environment.set(\"interimParameterTypeCode\", jsonDataAL1.parameterTypeCode);",
															"//     }",
															"//     }",
															"//     }",
															"//     console.log(\"Description: \" + pm.environment.get(\"description\"));",
															"",
															"//     console.log(pm.environment.get(\"fexedassetParameterId\"))",
															"//     console.log(pm.environment.get(\"ledgerParameterValueId\"))",
															"//     console.log(pm.environment.get(\"transactionTypeId\"))",
															"//     console.log(pm.environment.get(\"transactionTypeParameterValueId\"))",
															"//     console.log(pm.environment.get(\"interimParameterId\"))",
															"//     console.log(pm.environment.get(\"InterimParameterValueId\"))",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");",
															"",
															"",
															"pm.environment.set(\"startPeriodeMonth\", moment().format(\"MM\"));",
															"pm.environment.set(\"startPeriodeYear\", moment().format(\"YY\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"text\": null,\n    \"quantity\": 1,\n    \"unitPrice\": 1,\n    \"netAmount\": 1,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"{{cIssueDate}}\",\n    \"startPeriodMonth\": \"{{startPeriodeMonth}}\",\n    \"startPeriodYear\": \"{{startPeriodeYear}}\",\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-{{cInvoiceNumber}}\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdInterim}}\",\n            \"parameterValueId\": \"{{parameterValueIdInterim}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdVat}}\",\n            \"parameterValueId\": \"{{parameterValueIdVatCode}}\"\n         },\n        {\n            \"parameterId\": \"{{parameterIdDimensionMin_kostnadsbarer_3}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionMin_kostnadsbarer_3}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionTudels}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionTudels}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionAvdeling}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionAvdeling}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionPeriode}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionPeriode}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionHuttemeitooooo}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionHuttemeitooooo}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId_1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId_1}}"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - PutAllRequeredPar_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");",
															"",
															"",
															"pm.environment.set(\"startPeriodeMonth\", moment().format(\"MM\"));",
															"pm.environment.set(\"startPeriodeYear\", moment().format(\"YY\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"text\": null,\n    \"quantity\": 1,\n    \"unitPrice\": 100,\n    \"netAmount\": 100,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"{{cIssueDate}}\",\n    \"startPeriodMonth\": \"{{startPeriodeMonth}}\",\n    \"startPeriodYear\": \"{{startPeriodeYear}}\",\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-{{cInvoiceNumber}}\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdInterim}}\",\n            \"parameterValueId\": \"{{parameterValueIdInterim_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdVat}}\",\n            \"parameterValueId\": \"{{parameterValueIdVatCode_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionMin_kostnadsbarer_3}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionMin_kostnadsbarer_3_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionTudels}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionTudels_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionAvdeling}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionAvdeling_1}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionPeriode}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionPeriode}}\"\n        },\n        {\n            \"parameterId\": \"{{parameterIdDimensionHuttemeitooooo}}\",\n            \"parameterValueId\": \"{{parameterValueIdDimensionHuttemeitooooo_1}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId_2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId_2}}"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 -seeParametersLine_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//\r",
															"    //  Find ALs\r",
															"    //\r",
															"    if (pm.response.code == 200) {\r",
															"\r",
															"   const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"  // console.log(jsonDataAL);\r",
															"\r",
															"    var jsonDataAL1;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"ledgerValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"        \r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"ledgerDescription\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"ledgerValueCode\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"interimValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Interim is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"interimDescription\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"interimValueCode\"));\r",
															"});\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Vat\" && jsonDataAL[i].code == pm.environment.get(\"vatValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"vatValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"vatCodeDescription\"));\r",
															"});\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"Min_kostnadsbarer_3ValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min_kostnadsbarer_3 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"Min_kostnadsbarer_3ValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"Min_kostnadsbarer_3Description\"));\r",
															"});\r",
															"\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"TudelsValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Tudels is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"TudelsValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"TudelsDescription\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"AvdelingValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Avdeling is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"AvdelingValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"AvdelingDescription\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"PeriodeValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Periode is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"PeriodeValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"PeriodeDescription\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"HuttemeitoooooValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription\"));\r",
															"});\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId_1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId_1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 -seeParametersLine_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//\r",
															"    //  Find ALs\r",
															"    //\r",
															"    if (pm.response.code == 200) {\r",
															"\r",
															"   const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"  // console.log(jsonDataAL);\r",
															"\r",
															"    var jsonDataAL1;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"ledgerValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"        \r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"ledgerDescription_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"ledgerValueCode_1\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"interimValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Interim_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"interimDescription_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"interimValueCode_1\"));\r",
															"});\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Vat\" && jsonDataAL[i].code == pm.environment.get(\"vatValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"vatValueCode_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"vatCodeDescription_1\"));\r",
															"});\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"Min_kostnadsbarer_3ValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Min_kostnadsbarer_3_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"Min_kostnadsbarer_3ValueCode_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"Min_kostnadsbarer_3Description_1\"));\r",
															"});\r",
															"\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"TudelsValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Tudels_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"TudelsValueCode_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"TudelsDescription_1\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"AvdelingValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Avdeling_1 is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"AvdelingValueCode_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"AvdelingDescription_1\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"PeriodeValueCode\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Periode is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"PeriodeValueCode\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"PeriodeDescription\"));\r",
															"});\r",
															"for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"HuttemeitoooooValueCode_1\")) {\r",
															"            jsonDataAL1 =jsonDataAL[i];\r",
															"            break;\r",
															"}\r",
															"}\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Huttemeitooooo is found.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"HuttemeitoooooValueCode_1\"));\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"HuttemeitoooooDescription_1\"));\r",
															"});\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId_2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId_2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Generate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonDataAL = pm.response.json().accountingLines;\r",
															"   //console.log(jsonDataAL);\r",
															"\r",
															"    var jsonDataAL1;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.environment.set(\"accountingLinesId\", jsonDataAL1.id);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"    console.log(\"AccountingLinesId is: \" + pm.environment.get(\"accountingLinesId\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"accountinglines",
														"generate"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														},
														{
															"key": "documentType",
															"value": "CostInvoice"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "--- Sleep 5 sec---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(7);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - seeGenerate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"if (pm.response.code == 200) {",
															"",
															"const jsonDataAL = pm.response.json().accountingLines;",
															"   //console.log(jsonDataAL);",
															"",
															"    var jsonDataAL1;",
															"",
															"    var i;",
															"",
															"    for (i in jsonDataAL) {",
															"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {",
															"            jsonDataAL1 =jsonDataAL[i];",
															"            break;",
															"}",
															"}",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : The invoice is genereted.\", function () {",
															"        pm.expect(jsonDataAL1).to.have.property(\"id\", pm.environment.get(\"accountingLinesId\"));",
															"});",
															"}",
															"    console.log(\"AccountingLinesId is: \" + pm.environment.get(\"accountingLinesId\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/accountinglines",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"accountinglines"
													]
												}
											},
											"response": []
										},
										{
											"name": "--- Sleep 10 sec---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(10);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - checkStatusApproved",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is approved.\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"Approved\");\r",
															"});\r",
															"console.log(jsonData.status);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /invoices - Post",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"actionType\": \"Post\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/actions",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"actions"
													]
												},
												"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
											},
											"response": []
										},
										{
											"name": "--- Sleep 5 sec---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(7);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - checkStatusPosted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is genereted and posted.\", function () {\r",
															"    pm.expect(jsonData.status).to.be.oneOf([ \"Posted\", \"Posting\"]);\r",
															"            });\r",
															"console.log(jsonData.status);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Invoice",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{invoiceSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{invoiceSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "--- Sleep 20 sec---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(20);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - checkStatusPosted_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is genereted and posted.\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"Posted\");\r",
															"});\r",
															"console.log(jsonData.status);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Check Invoice in ERP",
			"item": [
				{
					"name": "--- Sleep 10 sec---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(10);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Invoices In ERP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//Check Invoice in ERP\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData);\r",
									"    for (i in jsonData) {\r",
									"        if (jsonData[i].supplierReference == pm.environment.get(\"invoiceNumber\")); {\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" \" +pm.environment.get(\"invoiceNumber\") + \" Invoice  is found in Visma.Net.\", function () { \r",
									"    pm.expect(jsonDataERP).to.have.property(\"supplierReference\", pm.environment.get(\"invoiceNumber\"));\r",
									"                });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"VismaNetURL\", \"https://integration.visma.net/API/controller/api/v1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Visma.NetTokenId}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "restRequest.AddHeader",
								"value": "(\"Authorization\", $\"Bearer {AuthenticationOptions.Token}\");:",
								"type": "text"
							},
							{
								"key": "restRequest.AddHeader",
								"value": "(\"ipp-company-id\", AuthenticationOptions.CompanyId);:",
								"type": "text"
							},
							{
								"key": "restRequest.AddHeader",
								"value": "(\"ipp-application-type\", \"Visma.net Financials\");:",
								"type": "text"
							},
							{
								"key": "restRequest.AddHeader",
								"value": "(\"Accept\", \"application/json\");:",
								"type": "text"
							},
							{
								"key": "ipp-company-id",
								"value": "{{companyid}}",
								"type": "text"
							},
							{
								"key": "ipp-application-type",
								"value": "Visma.net Financials",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{VismaNetURL}}/supplierinvoice",
							"host": [
								"{{VismaNetURL}}"
							],
							"path": [
								"supplierinvoice"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{CCToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete Integration Engine-Jobs",
			"item": [
				{
					"name": "Delete Jobs",
					"item": [
						{
							"name": "PWA /Integration DeleteSupplierJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{supplierSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteAccountingJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{accountingCodeSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteCurrenciesJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{currenciesSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{currenciesSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteCustomerJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{customerSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteDimensionJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{dimensionSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteDimensionValueJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{dimensionValueSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteVatCodeJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{vatCodeSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration DeleteInvoiceJobs",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{invoiceSyncId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"integrations",
										"{{newIntegrationId}}",
										"jobs",
										"{{invoiceSyncId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Integration Engine",
					"item": [
						{
							"name": "PWA /Integration Delete Integration Engine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// //////// Get Jobs Id /////////\r",
											"// if (pm.response.code == 200) {\r",
											"//     var jsonData = pm.response.json();\r",
											"//      for (i in jsonData) {\r",
											"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
											"//             jsonDataJob=jsonData[i];\r",
											"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
											"    \r",
											"//     }\r",
											"// }\r",
											"// }\r",
											"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"integrations",
										"{{newIntegrationId}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "--- Skip to END ---",
			"item": [
				{
					"name": "--- Skip to END ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// console.log('--- Skipping to END ---');\r",
									"postman.setNextRequest(\"--- END ---\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteParameters",
			"item": [
				{
					"name": "Delete parameters",
					"item": [
						{
							"name": "Delete Accountingcodes",
							"item": [
								{
									"name": "Delete Accounts",
									"item": [
										{
											"name": "INT client/accountingcodes/LedgerValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT client/accountingcodes/LedgerValue_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT organization/accountingcodes/LedgerValue_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode_2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode_2}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Customers",
									"item": [
										{
											"name": "INT client/accountingcodes/Customer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/customers/{{customerValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"customers",
														"{{customerValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT client/accountingcodes/Customer_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/customers/{{customerValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"customers",
														"{{customerValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Supplier",
							"item": [
								{
									"name": "INT /supplier/supplier Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{supplierCode}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"suppliers",
												"{{supplierCode}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Dimensions",
							"item": [
								{
									"name": "Projects",
									"item": [
										{
											"name": "INT /dimensions/Project Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project_1 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project_2 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode_2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode_2}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Departments",
									"item": [
										{
											"name": "INT /dimensions/Departments Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}/values/{{departmentValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}",
														"values",
														"{{departmentValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Departments_1 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}/values/{{departmentValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}",
														"values",
														"{{departmentValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Departments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete VAT",
							"item": [
								{
									"name": "INT /VAT/Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /VAT/Value_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode_1}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode_1}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /VAT/Value_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode_2}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode_2}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Currency",
							"item": [
								{
									"name": "Currency Client Level",
									"item": [
										{
											"name": "INT/ client/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT/ client/currency_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode_1}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode_1}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT/ client/currency_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode_2}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode_2}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PWA /invoices - Approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var jsonData = pm.response.json();",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is approved.\", function () {",
									"    pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);",
									"    pm.expect(jsonData).to.have.property(\"closeCurrentInvoice\", true);",
									"});",
									"console.log(jsonData.actionExecutedSuccessfully);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionType\": \"Approve\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/invoices/{{cInvoiceId}}/actions",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"actions"
							]
						},
						"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
					},
					"response": []
				}
			]
		},
		{
			"name": "All Setting-Users-Groups-Client-Roles",
			"item": [
				{
					"name": "Roles",
					"item": [
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//////// Get OrgID /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().list;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"TestAutomation\") {\r",
											"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"Integration Self Service Test_1\") {\r",
											"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"AdamsOrganization\") {\r",
											"            pm.environment.set(\"AdamsOrganizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    // for (x in jsonData) {\r",
											"    //     if (jsonData[x].name == \"Integration Self Service Test\") {\r",
											"    //         pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
											"    //     }\r",
											"    // }\r",
											"    \r",
											"}\r",
											"\r",
											"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
											"\r",
											"console.log(\"AdamsOrganizationId is: \" +pm.environment.get(\"AdamsOrganizationId\"));\r",
											"\r",
											"console.log(\"Integration Self Service Test_1: \" +pm.environment.get(\"intOrganizationId\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /Organization/NonAdminRoleList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataRole;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Editor\" || jsonData[i].name ==\"InvoiceEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceEditorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Flow Report\"|| jsonData[i].name == \"FlagEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceFlowReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"IntegrationEngineAdmin\" || jsonData[i].name ==\"Integration Engine Admin\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationEngineAdminRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Integration\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Inbound Status\" || jsonData[i].name == \"InboundStatusReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"inboundStatusRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Automation Report\" || jsonData[i].name ==\"AutomationReportAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"automationReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Approver\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Reader\" || jsonData[i].name ==\"InvoiceReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceReaderRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Statistics Report\" || jsonData[i].name ==\"StatisticsReportAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"statisticsReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Controller\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Lead Time\"|| jsonData[i].name ==\"ApproverReadAny\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"leadTimeRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Controller without upload\" || jsonData[i].name ==\"ControllerWithoutUpload\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerWithoutUploadRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Inbound Inbox\"|| jsonData[i].name ==\"InboundStatusReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"inboundInboxRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Approver - Set Flag\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverSetFlagRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"System\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"systemRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ControllerReadOnly\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerReadOnlyRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Visningsadministrator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"visningsadministratorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"BasicAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"basicAccessRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Impersonator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"impersonatorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ActionButtons\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"actionButtonsRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"FlagEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"flagEditorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApproverReadAny\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverReadAnyRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"IntegrationUpload\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationUploadRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"RoleCheck\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"roleCheckRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    \r",
											"    }\r",
											"\r",
											"console.log(\"1-Invoice Editor Role Id is : \" + pm.environment.get(\"invoiceEditorRoleId\"));\r",
											"\r",
											"console.log(\"2-Invoice Flow Report Role Id is : \" + pm.environment.get(\"invoiceFlowReportRoleId\"));\r",
											"\r",
											"console.log(\"3-Integration Engine Admin Role Id is : \" + pm.environment.get(\"integrationEngineAdminRoleId\"));\r",
											"\r",
											"console.log(\"4-Integration Role Id is : \" + pm.environment.get(\"integrationRoleId\"));\r",
											"\r",
											"console.log(\"5-Inbound Status Role Id is : \" + pm.environment.get(\"inboundStatusRoleId\"));\r",
											"\r",
											"console.log(\"6-Automation Report Role Id is : \" + pm.environment.get(\"automationReportRoleId\"));\r",
											"\r",
											"console.log(\"7-Approver Role Id is : \" + pm.environment.get(\"approverRoleId\"));\r",
											"\r",
											"console.log(\"8-Invoice Reader Role Id is : \" + pm.environment.get(\"invoiceReaderRoleId\"));\r",
											"\r",
											"console.log(\"9-Statistics Report Role Id is : \" + pm.environment.get(\"statisticsReportRoleId\"));\r",
											"\r",
											"console.log(\"10-Controller Role Id is : \" + pm.environment.get(\"controllerRoleId\"));\r",
											"\r",
											"console.log(\"11-Lead Time Role Id is : \" + pm.environment.get(\"leadTimeRoleId\"));\r",
											"\r",
											"console.log(\"12-Controller without upload Role Id is : \" + pm.environment.get(\"controllerWithoutUploadRoleId\"));\r",
											"\r",
											"console.log(\"13-Inbound Inbox Role Id is : \" + pm.environment.get(\"inboundInboxRoleId\"));\r",
											"\r",
											"console.log(\"14-Approver - Set Flag Role Id is : \" + pm.environment.get(\"approverSetFlagRoleId\"));\r",
											"\r",
											"console.log(\"15-System Role Id is : \" + pm.environment.get(\"systemRoleId\"));\r",
											"\r",
											"console.log(\"16-ControllerReadOnly Role Id is : \" + pm.environment.get(\"controllerReadOnlyRoleId\"));\r",
											"\r",
											"console.log(\"17-Visningsadministrator Role Id is : \" + pm.environment.get(\"visningsadministratorRoleId\"));\r",
											"\r",
											"console.log(\"18-BasicAccess Role Id is : \" + pm.environment.get(\"basicAccessRoleId\"));\r",
											"\r",
											"console.log(\"19-ImpersonatorRoleId Role Id is : \" + pm.environment.get(\"impersonatorRoleId\"));\r",
											"\r",
											"console.log(\"20-ActionButtons Role Id is : \" + pm.environment.get(\"actionButtonsRoleId\"));\r",
											"\r",
											"console.log(\"21-FlagEditor Role Id is : \" + pm.environment.get(\"flagEditorRoleId\"));\r",
											"\r",
											"console.log(\"22-ApproverReadAny Role Id is : \" + pm.environment.get(\"approverReadAnyRoleId\"));\r",
											"\r",
											"console.log(\"23-IntegrationUpload Role Id is : \" + pm.environment.get(\"integrationUploadRoleId\"));\r",
											"\r",
											"console.log(\"24-RoleCheck Role Id is : \" + pm.environment.get(\"roleCheckRoleId\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require(\"moment\");\r",
											"\r",
											"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-language-code",
										"value": "en",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/nonadminroleslist",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"nonadminroleslist"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Organization/AdminRoleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataRole;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Administrator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"administratorId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"}\r",
											"\r",
											"console.log(\"Admin Role Id is : \" + pm.environment.get(\"administratorId\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require(\"moment\");\r",
											"\r",
											"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-language-code",
										"value": "en",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/admin/defaultroles",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"defaultroles"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clients",
					"item": [
						{
							"name": "PWA/ Organizations/Clientsettings-WorkFlowOff Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": null\n    },\n    {\n        \"key\": \"EnableVatHandling\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": null\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Periodization_UseCostAccountToVatCode\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Integration_RecalcCurrencyFactor\",\n        \"value\": null\n    },\n    {\n        \"key\": \"OCR_ValidationTypes\",\n        \"value\": \"\"\n    },\n    {\n        \"key\": \"Reinvoicing_Enable\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Workflow_MissingBuyerRefStepEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_PassthroughInvoicesWithoutWorkflow\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Workflow_WorkflowType\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_ContractType\",\n        \"value\": null\n    }\n]"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/settings",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"settings"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].client == \"Visma.NetClient-2110\") {\r",
											"            pm.environment.set(\"intDatasetId\", jsonData[x].clientId);\r",
											"            pm.environment.set(\"intDatasetERPId\", jsonData[x].clientErpId);\r",
											"        }\r",
											"        // if (jsonData[x].client == \"Visma.NetClient-2110\") {\r",
											"        //     pm.environment.set(\"VismaNetDatasetId\", jsonData[x].clientId);\r",
											"        //     pm.environment.set(\"VismaNetDatasetERPId\", jsonData[x].clientErpId)\r",
											"        // }\r",
											"    }\r",
											"}\r",
											"console.log(\"1-IntDatasetId is: \" +pm.environment.get(\"intDatasetId\"));\r",
											"console.log(\"2-intDatasetERPId is: \" +pm.environment.get(\"intDatasetERPId\"));\r",
											"console.log(\"3-VismaNetDatasetId is: \" +pm.environment.get(\"VismaNetDatasetId\"));\r",
											"console.log(\"4-VismaNetDatasetERPId is: \" +pm.environment.get(\"VismaNetDatasetERPId\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminClients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"organizations",
										"{{intOrganizationId}}",
										"adminClients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "All Users And Groups Settings",
					"item": [
						{
							"name": "Users&Groups Settings",
							"item": [
								{
									"name": "Get Userd Id",
									"item": [
										{
											"name": "PWA /currentuser - Controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
															"});\r",
															"\r",
															"\r",
															"if(pm.response.code == 200){\r",
															"   pm.environment.set(\"apiTestuserId\", pm.response.json().id);\r",
															"   pm.environment.set(\"apiTestControllerUserId\", pm.response.json().id);\r",
															"   pm.environment.set(\"apiTestUserName\", (pm.response.json().firstName + \" \" +pm.response.json().lastName));\r",
															"   pm.environment.set(\"apiTestControllerEmail\", pm.response.json().email);\r",
															"}\r",
															"\r",
															"if (pm.response.code != 200) {\r",
															"    console.log(pm.response)\r",
															"} \r",
															"\r",
															"console.log(\"ApiTestUserName is : \" + pm.environment.get(\"apiTestUserName\"));\r",
															"console.log(\"apiTestControllerEmail is : \" + pm.environment.get(\"apiTestControllerEmail\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/currentuser",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"currentuser"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /currentuser - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].userFullName == \"ApiTestIntegration Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.userId);\r",
															"        pm.environment.set(\"apiTestIntegrationAdminName\", jsonDataUser.userFullName);\r",
															"        pm.environment.set(\"apiTestIntegrationAdminEmail\", jsonDataUser.userEmail);\r",
															"    }\r",
															"    }\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].userFullName == \"ApiTest Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.userId);\r",
															"        pm.environment.set(\"apiTestIntegrationName\", jsonDataUser.userFullName);\r",
															"        pm.environment.set(\"apiTestIntegrationEmail\", jsonDataUser.userEmail);\r",
															"    }\r",
															"    }\r",
															"}\r",
															"\r",
															"console.log(\"ApiTestIntegrationAdminUserId is : \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
															"console.log(\"ApiTestIntegrationAdminName is : \" + pm.environment.get(\"apiTestIntegrationAdminName\"));\r",
															"console.log(\"ApiTestIntegrationAdminEmail is : \" + pm.environment.get(\"apiTestIntegrationAdminEmail\"));\r",
															"\r",
															"\r",
															"console.log(\"ApiTestIntegrationUserId is : \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
															"console.log(\"ApiTestIntegrationName is : \" + pm.environment.get(\"apiTestIntegrationName\"));\r",
															"console.log(\"ApiTestIntegrationEmail is : \" + pm.environment.get(\"apiTestIntegrationEmail\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminusers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"adminusers"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /user - AllUsersIntEng",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Approver\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestApproverUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestControllerUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTestIntegration Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ApiTest Approver User Id is : \" + pm.environment.get(\"apiTestApproverUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"apiTestControllerUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Admin Id is: \" + pm.environment.get(\"apiTestAdminUserId\"));\r",
															"\r",
															"console.log(\"ApiTestIntegration Admin Id is: \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/users",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"users"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /user - AllUsersParent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Approver\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testApproverUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Adam Arelsen\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"adamArelsenUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Controller\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testControllerUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testIntegrationUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Adam Semine\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"adamSemineUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    \r",
															"    }\r",
															"\r",
															"console.log(\"Test Approver User Id is : \" + pm.environment.get(\"testApproverUserId\"));\r",
															"\r",
															"console.log(\"Adam Arelsen User Id is : \" + pm.environment.get(\"adamArelsenUserId\"));\r",
															"\r",
															"console.log(\"Test Controller Id is : \" + pm.environment.get(\"testControllerUserId\"));\r",
															"\r",
															"console.log(\"Test Integration Id is: \" + pm.environment.get(\"testIntegrationUserId\"));\r",
															"\r",
															"console.log(\"Test Admin Id is: \" + pm.environment.get(\"testAdminUserId\"));\r",
															"\r",
															"console.log(\"Adam Semine Id is: \" + pm.environment.get(\"adamSemineUserId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/users",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"users"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Groups Id",
									"item": [
										{
											"name": "PWA /organizations/ID/groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json().data;\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].group == \"IntContgroup\") {\r",
															"            pm.environment.set(\"IntContgroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntIntgroup\") {\r",
															"            pm.environment.set(\"IntIntgroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntContOrgLevel\") {\r",
															"            pm.environment.set(\"IntContOrgLevelId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntIntOrgLevel\") {\r",
															"            pm.environment.set(\"IntIntOrgLevelId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"ApiTestIntegrationAdminGroup\") {\r",
															"            pm.environment.set(\"ApiTestIntegrationAdminGroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"    }\r",
															"}\r",
															"console.log(\"1-IntControllerGroup id is: \" +pm.environment.get(\"IntContgroupId\"));\r",
															"console.log(\"2-IntIntegrationGroup id is: \" +pm.environment.get(\"IntIntgroupId\"));\r",
															"console.log(\"3-IntContOrgLevel id is: \" +pm.environment.get(\"IntContOrgLevelId\"));\r",
															"console.log(\"4-IntIntOrgLevel id is: \" +pm.environment.get(\"IntIntOrgLevelId\"));\r",
															"console.log(\"5-ApiTestIntegrationAdmin id is: \" +pm.environment.get(\"ApiTestIntegrationAdminGroupId\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/admingroups",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"admingroups"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /Grid/User/invoiceList/Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataGroup;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group Org\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integration Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
															"\r",
															"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
															"\r",
															"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
															"\r",
															"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
															"\r",
															"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
															"\r",
															"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
															"\r",
															"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
															"console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/admingroups?skip=0&take=20",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"admingroups"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /Grid/User/invoiceList/Groups_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataGroup;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group Org\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integration Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
															"\r",
															"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
															"\r",
															"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
															"\r",
															"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
															"\r",
															"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
															"\r",
															"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
															"\r",
															"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
															"//console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{organizationId}}/admingroups?skip=0&take=20",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{organizationId}}",
														"admingroups"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										}
									]
								},
								{
									"name": "Put User To Groups",
									"item": [
										{
											"name": "PWA /Add contUserToGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestControllerUserId}}\",\n    \"email\": \"ApiTestController@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        },\n        {\n            \"id\": \"{{organizationId}}\",\n            \"name\": \"AdamsOrganization\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{controllerGroupId}}\",\n            \"name\": \"Controller Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{controllerGroupOrgId}}\",\n            \"name\": \"Controller Group Org\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonKlientnivåId}}\",\n            \"name\": \"Integrasjon Klientnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonOrganisasjonsnivåId}}\",\n            \"name\": \"Integrasjon Organisasjonsnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrationGroupId}}\",\n            \"name\": \"Integration Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{settingsControllerGroupId}}\",\n            \"name\": \"Settings Controller Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContgroupId}}\",\n            \"name\": \"IntContgroup\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContOrgLevelId}}\",\n            \"name\": \"IntContOrgLevel\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Add IntUserToGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestIntegrationUserId}}\",\n    \"email\": \"ApiTestIntegration@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        },\n        {\n            \"id\": \"{{organizationId}}\",\n            \"name\": \"AdamsOrganization\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{integrasjonKlientnivåId}}\",\n            \"name\": \"Integrasjon Klientnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonOrganisasjonsnivåId}}\",\n            \"name\": \"Integrasjon Organisasjonsnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrationGroupId}}\",\n            \"name\": \"Integration Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntgroupId}}\",\n            \"name\": \"IntIntgroup\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntOrgLevelId}}\",\n            \"name\": \"IntIntOrgLevel\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Add AdUserToIntAdGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestIntegrationAdminUserId}}\",\n    \"email\": \"ApiTestIntegrationAdmin@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{ApiTestIntegrationAdminGroupId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										}
									]
								},
								{
									"name": "Put Client To Groups",
									"item": [
										{
											"name": "PWA /organization PutClientToIntContGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{IntContgroupId}}\",\n    \"groupName\": \"IntContgroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{IntContgroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{IntContgroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /organization PutClientToIntIntGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{IntIntgroupId}}\",\n    \"groupName\": \"IntIntgroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{IntIntgroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{IntIntgroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /organization PutClientToIntAdminGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{ApiTestIntegrationAdminGroupId}}\",\n    \"groupName\": \"ApiTestIntegrationAdminGroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{ApiTestIntegrationAdminGroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{ApiTestIntegrationAdminGroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "OrgSettings",
					"item": [
						{
							"name": "PWA/ Organizations/settings-WorkFlowOff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": null\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Integration_RecalcCurrencyFactor\",\n        \"value\": null\n    },\n    {\n        \"key\": \"InvoiceDetails_Edit_Lock_Enabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"ManualVoucher_Extra_Fields_Enabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Organization_InheritanceEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Organization_ShowClientErpIdInDropDowns\",\n        \"value\": true\n    },\n    {\n        \"key\": \"SendEmailOnUserMention\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": true\n    }\n]"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/settings",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"settings"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "--- END ---",
			"item": [
				{
					"name": "--- END ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"invoiceType : \" + pm.environment.get(\"invoiceType\"))\r",
									"console.log('/// END ///');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenPWA}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8a1ac084-89ee-4663-9fec-f2bb4dee1de1",
			"key": "cDimensionCode-X",
			"value": ""
		},
		{
			"id": "8b6db45b-35de-45d1-98b1-049e089932ba",
			"key": "code-Delivery",
			"value": ""
		},
		{
			"id": "afdedc49-81a5-4c8b-83bb-31c2b8e346c6",
			"key": "externalCode-Delivery",
			"value": ""
		},
		{
			"id": "7e0277e6-719b-4207-bae4-5b4f0010ff95",
			"key": "name-Delivery",
			"value": ""
		},
		{
			"id": "175399fd-d63e-43b5-8bdc-0f82e03b81d4",
			"key": "addressType-Delivery",
			"value": ""
		},
		{
			"id": "082bd6c8-9937-4569-8522-da7ec8cb249a",
			"key": "address1-Delivery",
			"value": ""
		},
		{
			"id": "b0c8b406-00f9-4515-95a0-0123f6573879",
			"key": "address2-Delivery",
			"value": ""
		},
		{
			"id": "8de8000a-3e27-4ad9-bc93-b73a97b039a0",
			"key": "zipCode-Delivery",
			"value": ""
		},
		{
			"id": "fac6894a-4f0b-4fa1-92dd-9b7ba71b5f14",
			"key": "city-Delivery",
			"value": ""
		},
		{
			"id": "06059de7-54a5-4527-a6bb-3857c9a3a8fc",
			"key": "country-Delivery",
			"value": ""
		},
		{
			"id": "be4425f0-ffdf-42a2-a495-2f9aad932312",
			"key": "status",
			"value": ""
		},
		{
			"id": "3a186a08-6982-4984-8019-a1bd2f1d1e96",
			"key": "code-Delivery-Encoded",
			"value": ""
		},
		{
			"id": "458fd66a-f47e-40cb-935b-240d207b6fee",
			"key": "CCToken",
			"value": ""
		}
	]
}