{
	"info": {
		"_postman_id": "0d4cee1b-cb51-4c88-ad92-d259bd6871d2",
		"name": "33395-Semine Connect-Master Data Testing POGO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Switch",
			"item": [
				{
					"name": "---  Switch ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var environment = pm.environment.get(\"ENV\");\r",
									"// console.log(environment)\r",
									"switch (environment) {\r",
									"\r",
									"    case \"DEV\":\r",
									"        console.log(environment);\r",
									"        postman.setNextRequest(\"--- START TEST ---\");\r",
									"        break;\r",
									"    case \"PROD\":\r",
									"        console.log(environment);\r",
									"        postman.setNextRequest(\"--- END ---\");\r",
									"        break;\r",
									"\r",
									"    case \"TEST\":\r",
									"        console.log(environment);\r",
									"        postman.setNextRequest(\"--- START TEST ---\")\r",
									"        break;\r",
									"\r",
									"    case \"UAT\":\r",
									"        console.log(environment);\r",
									"        postman.setNextRequest(\"--- END ---\")\r",
									"        break;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "--- START TEST ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BASIC Delete AllRealOperations",
			"item": [
				{
					"name": "CLEANUP",
					"item": [
						{
							"name": "Start",
							"item": [
								{
									"name": "IDP /connect/token Api INT - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestIntegration\"));\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        \r",
													"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        // console.log(pm.environment.get(\"TokenINT\"));\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"pm.environment.set(\"tryCounterLimit\", 10)\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeIntegration}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserIntegration}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassIntegration}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token Api PWA - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestController\"));\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeController}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserController}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassController}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token AdminSemine  - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Try N times\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestAdmin\"));\r",
													"\r",
													"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"    if (pm.response.code == 200) {\r",
													"        if (pm.response.json().access_token != null) {\r",
													"\r",
													"            // If we get a token, pass test and go directly to the next request\r",
													"\r",
													"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
													"            postman.setNextRequest();\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
													"            return;\r",
													"        } else {\r",
													"            // Try again if tryCounter < tryCounterLimit\r",
													"            tryCounter++;\r",
													"            pm.globals.set(\"tryCounter\", tryCounter);\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"        }\r",
													"    } else {\r",
													"        // Try again if tryCounter < tryCounterLimit\r",
													"        tryCounter++;\r",
													"        pm.globals.set(\"tryCounter\", tryCounter);\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"    }\r",
													"} else {\r",
													"    // Fail after 10 tries\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
													"\r",
													"    postman.setNextRequest();\r",
													"}\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeAdmin}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserAdmin}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassAdmin}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token AdminINTENG  - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Try N times\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestIntegrationAdmin\"));\r",
													"\r",
													"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"    if (pm.response.code == 200) {\r",
													"        if (pm.response.json().access_token != null) {\r",
													"\r",
													"            // If we get a token, pass test and go directly to the next request\r",
													"\r",
													"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"            pm.environment.set(\"TokenINTENGAd\", pm.response.json().access_token);\r",
													"            postman.setNextRequest();\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
													"            return;\r",
													"        } else {\r",
													"            // Try again if tryCounter < tryCounterLimit\r",
													"            tryCounter++;\r",
													"            pm.globals.set(\"tryCounter\", tryCounter);\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"        }\r",
													"    } else {\r",
													"        // Try again if tryCounter < tryCounterLimit\r",
													"        tryCounter++;\r",
													"        pm.globals.set(\"tryCounter\", tryCounter);\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"    }\r",
													"} else {\r",
													"    // Fail after 10 tries\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
													"\r",
													"    postman.setNextRequest();\r",
													"}\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestIntegrationScopeAdmin}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestIntegrationUserAdmin}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestIntegrationPassAdmin}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /currentuser/organizations - take 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"//////// Get OrgID /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json().list;\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].name == \"TestAutomation\") {\r",
													"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
													"        }\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
													"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
													"        }\r",
													"    }\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
													"\r",
													"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"currentUser",
												"organizations"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "take",
													"value": "10"
												}
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								},
								{
									"name": "PWA /intOrganizations/ID/clients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//////// Set Environment Variables /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json().data;\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].client == \"PowerOfficeClient-2111\") {\r",
													"            pm.environment.set(\"intDatasetId\", jsonData[x].clientId)\r",
													"        }\r",
													"        // if (jsonData[x].client == \"IntClient_1\") {\r",
													"        //     pm.environment.set(\"intDatasetId_1\", jsonData[x].clientId)\r",
													"        // }\r",
													"    }\r",
													"}\r",
													"console.log(\"1-IntDatasetId is: \" +pm.environment.get(\"intDatasetId\"));\r",
													"// console.log(\"2-IntDatasetId_1 is: \" +pm.environment.get(\"intDatasetId_1\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminClients",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"admin",
												"organizations",
												"{{intOrganizationId}}",
												"adminClients"
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								},
								{
									"name": "PWA c-parameters/ Get all parameterIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // pm.environment.set(\"aliasFound\", null);\r",
													"\r",
													"    // // Search for Alias by id\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].id == pm.environment.get(\"aliasId\")) {\r",
													"    //         pm.environment.set(\"aliasFound\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // pm.test(\"Alias found?\", function () {\r",
													"\r",
													"    //     pm.expect(pm.environment.get(\"aliasFound\")).to.be.not.null;\r",
													"    // });\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"    //         pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find PROJECTs ID\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"    //         pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find FixedAsset ID\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"    //         pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CategoryType ID\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"    //         pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find Interim\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : parameterIds found\", function () {\r",
													"        pm.expect(pm.environment.get(\"parameterIdInterim\")).to.be.not.empty;\r",
													"        //pm.expect(pm.environment.get(\"parameterIdTransactionType\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdCustomer\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdSupplier\")).to.be.not.empty;\r",
													"        //pm.expect(pm.environment.get(\"parameterIdProject\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdDimension\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdLedger\")).to.be.not.empty;\r",
													"        //pm.expect(pm.environment.get(\"parameterIdCategoryType\")).to.be.not.empty;\r",
													"        //pm.expect(pm.environment.get(\"parameterIdFixedAsset\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdVAT\")).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        //+ \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"       // + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        //+ \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        //+ \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"    );\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"parameters",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Dimensions",
							"item": [
								{
									"name": "INT /dimensions/ - Get all active dimensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var dimensionsDeleteArray = [];\r",
													"    // Find active dimensions\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionsDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray);\r",
													"    console.log(\"dimensionsDeleteArray : \" + dimensionsDeleteArray)\r",
													"\r",
													"\r",
													"// When there are no more dimensions left to clean, go to finish\r",
													"    if (dimensionsDeleteArray.length == 0) {\r",
													"        postman.setNextRequest(\"INT /health Cleanup ---FINISH---\");\r",
													"      console.log(\"INT /health Cleanup ---FINISH---\"); \r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"// var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < codeDeleteArrayLength) {\r",
													"//     pm.environment.set(\"codeDelete\", codeDeleteArray[i]);\r",
													"//     console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(pm.info.requestId); //Return to this request\r",
													"\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions"
											],
											"query": [
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/ID/values - Get all active dimension values",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"\r",
													"var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionsDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionsDelete\", encodeURIComponent(dimensionsDeleteArray[i]));\r",
													"    // console.log(\"dimensionsDelete \" + i + \" \" + pm.environment.get(\"dimensionsDelete\"));\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    // console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    var dimensionValuesDeleteArray = [];\r",
													"\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionValuesDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    console.log(\"dimensionValuesDeleteArray \" + dimensionValuesDeleteArray);\r",
													"    pm.environment.set(\"dimensionValuesDeleteArray\", dimensionValuesDeleteArray);\r",
													"\r",
													"    // if (dimensionValuesDeleteArray.length == 0) {\r",
													"    //     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\")\r",
													"    // }\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}/values?filter=[\"isActive\",\"=\",true]&take=100",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												},
												{
													"key": "take",
													"value": "100"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-dimensionValues - Delete value from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionValuesDeleteArray = pm.environment.get(\"dimensionValuesDeleteArray\");\r",
													"\r",
													"var dimensionValuesDeleteArrayLength = dimensionValuesDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionValuesDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionValuesDelete\", encodeURIComponent(dimensionValuesDeleteArray[i]));\r",
													"    console.log(\"dimensionValuesDelete \" + i + \" \" + pm.environment.get(\"dimensionValuesDelete\"));\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId); // Go to this request\r",
													"} else {\r",
													"    postman.setNextRequest(); // Go to next request\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}/values/{{dimensionValuesDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values",
												"{{dimensionValuesDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "c-dimension - Delete dimension from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"// // console.log(\"dimensionsDeleteArray \" + dimensionsDeleteArray);\r",
													"\r",
													"// var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < dimensionsDeleteArrayLength) {\r",
													"    \r",
													"//     pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray[i]);\r",
													"//     console.log(\"dimensionDelete \" + i + \" \" + pm.environment.get(\"dimensionDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													"\r",
													"// }\r",
													"\r",
													"    postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{dimensionsDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"dimensions",
												"{{dimensionsDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "INT /health Cleanup ---FINISH---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}../../../health",
											"host": [
												"{{INT}}",
												"",
												""
											],
											"path": [
												"..",
												"..",
												"health"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "PWA c-parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////////// Find PROJECT parameter Id /////////////\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(jsonDataLength);\r",
											"\r",
											"    var i = 0;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    // Find INTERIM ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find TRANSACTIONTYPE ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find CUSTOMER ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find SUPPLIER ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find PROJECTs ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    \r",
											"    // Find NS ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find FixedAsset ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    // Find Dimension ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find CategoryType ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"    // Find VAT ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    console.log(\r",
											"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
											"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
											"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
											"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
											"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
											"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
											"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
											"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
											"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
											"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
											"\r",
											"\r",
											"\r",
											"    );\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"condensed"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]",
											"disabled": true
										},
										{
											"key": "code",
											"value": "PROJECT",
											"disabled": true
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /dimensions/parents - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].dimensionCode;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/parents?take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"dimensions",
										"parents"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /parameters/DIMENSION/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimension}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdDimension}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensions/codeDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{codeDelete}}?take=100",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"dimensions",
										"{{codeDelete}}"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-dimension - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"} else {\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"dimensions",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/CUSTOMER/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdCustomer}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdCustomer}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-customers/A - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/customers/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"customers",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/INTERIM/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdInterim}}/values/devextreme?filter=[\"isActive\",\"=\",true]&take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdInterim}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-ledger - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/ledger/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"ledger",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/NS/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find coode\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            // codeDeleteArray[x] = jsonData[x].code;\r",
											"            codeDeleteArray.push(jsonData[x].code);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?filter=[\"isActive\",\"=\",true]&take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdLedger}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-accountingcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"accountingcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/VAT/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdVAT}}/values/devextreme?filter=[\"isActive\",\"=\",true]&take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdVAT}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-vatcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"vatcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/SUPPLIER/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"    codeDeleteArray = [];\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme?filter=[\"isActive\",\"=\",true]&take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"{{parameterIdSupplier}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-Supplier - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"suppliers",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "E2E-Integration Engine Connection",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestUserIntegration\"));\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 10)\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestUserController\"));\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token AdminSemine  - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestUserAdmin\"));\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeAdmin}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserAdmin}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassAdmin}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token AdminINTENG  - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestIntegrationUserAdmin\"))\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenINTENGAd\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestIntegrationScopeAdmin}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestIntegrationUserAdmin}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestIntegrationPassAdmin}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clients Settings",
					"item": [
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//////// Get OrgID /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().list;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"TestAutomation\") {\r",
											"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
											"        }\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
											"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    }\r",
											"}\r",
											"\r",
											"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
											"\r",
											"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].client == \"PowerOfficeClient-2111\") {\r",
											"            pm.environment.set(\"intDatasetId\", jsonData[x].clientId);\r",
											"            pm.environment.set(\"intDatasetName\", jsonData[x].client);\r",
											"            pm.environment.set(\"intDatasetERPId\", jsonData[x].clientErpId);\r",
											"        }\r",
											"        // if (jsonData[x].client == \"Visma.NetClient-2110\") {\r",
											"        //     pm.environment.set(\"VismaNetDatasetId\", jsonData[x].clientId);\r",
											"        //     pm.environment.set(\"VismaNetDatasetERPId\", jsonData[x].clientErpId)\r",
											"        // }\r",
											"    }\r",
											"}\r",
											"console.log(\"1-PowerOfficeClient id is: \" +pm.environment.get(\"intDatasetId\"));\r",
											"console.log(\"2-PowerOfficeClient id is: \" +pm.environment.get(\"intDatasetERPId\"));\r",
											"console.log(\"3-PowerOfficeClient id is: \" +pm.environment.get(\"intDatasetName\"));\r",
											"// console.log(\"3-VismaNetDatasetId is: \" +pm.environment.get(\"VismaNetDatasetId\"));\r",
											"// console.log(\"4-VismaNetDatasetERPId is: \" +pm.environment.get(\"VismaNetDatasetERPId\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminClients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"organizations",
										"{{intOrganizationId}}",
										"adminClients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA/ Organizations/Clientsettings-WorkFlowOff Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": null\n    },\n    {\n        \"key\": \"EnableVatHandling\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": null\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Periodization_UseCostAccountToVatCode\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Integration_RecalcCurrencyFactor\",\n        \"value\": null\n    },\n    {\n        \"key\": \"OCR_ValidationTypes\",\n        \"value\": \"\"\n    },\n    {\n        \"key\": \"Reinvoicing_Enable\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Workflow_MissingBuyerRefStepEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_PassthroughInvoicesWithoutWorkflow\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Workflow_WorkflowType\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_ContractType\",\n        \"value\": null\n    }\n]"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/settings",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"settings"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Userd Id",
					"item": [
						{
							"name": "PWA /currentuser - Controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"apiTestuserId\", pm.response.json().id);\r",
											"   pm.environment.set(\"apiTestControllerUserId\", pm.response.json().id);\r",
											"   pm.environment.set(\"apiTestControllerUserName\", (pm.response.json().firstName + \" \" +pm.response.json().lastName));\r",
											"   pm.environment.set(\"apiTestControllerEmail\", pm.response.json().email);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} \r",
											"\r",
											"console.log(\"apiTestControllerUserName is : \" + pm.environment.get(\"apiTestControllerUserName\"));\r",
											"console.log(\"apiTestControllerEmail is : \" + pm.environment.get(\"apiTestControllerEmail\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentuser",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentuser"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /currentuser - Admin-Integration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json().data;\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataUser;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].userFullName == \"ApiTestIntegration Admin\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.userId);\r",
											"        pm.environment.set(\"apiTestIntegrationAdminName\", jsonDataUser.userFullName);\r",
											"        pm.environment.set(\"apiTestIntegrationAdminEmail\", jsonDataUser.userEmail);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].userFullName == \"ApiTest Integration\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.userId);\r",
											"        pm.environment.set(\"apiTestIntegrationName\", jsonDataUser.userFullName);\r",
											"        pm.environment.set(\"apiTestIntegrationEmail\", jsonDataUser.userEmail);\r",
											"    }\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"console.log(\"ApiTestIntegrationAdminUserId is : \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
											"console.log(\"ApiTestIntegrationAdminName is : \" + pm.environment.get(\"apiTestIntegrationAdminName\"));\r",
											"console.log(\"ApiTestIntegrationAdminEmail is : \" + pm.environment.get(\"apiTestIntegrationAdminEmail\"));\r",
											"\r",
											"console.log(\"ApiTestIntegrationUserId is : \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
											"console.log(\"ApiTestIntegrationName is : \" + pm.environment.get(\"apiTestIntegrationName\"));\r",
											"console.log(\"ApiTestIntegrationEmail is : \" + pm.environment.get(\"apiTestIntegrationEmail\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminusers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"organizations",
										"{{intOrganizationId}}",
										"adminusers"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /user - AllUsersIntEng",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataUser;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Approver\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestApproverUserId\", jsonDataUser.id);\r",
											"        pm.environment.set(\"ApiTestApprover\", jsonDataUser.name);\r",
											"\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestControllerUserId\", jsonDataUser.id);\r",
											"        pm.environment.set(\"ApiTestController\", jsonDataUser.name);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTestIntegration Admin\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.id);\r",
											"        pm.environment.set(\"ApiTestIntegrationAdmin\", jsonDataUser.name);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Admin\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestAdminUserId\", jsonDataUser.id);\r",
											"        pm.environment.set(\"ApiTestAdmin\", jsonDataUser.name);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Integration\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.id);\r",
											"        pm.environment.set(\"ApiTestIntegration\", jsonDataUser.name);\r",
											"    }\r",
											"    }\r",
											"    }\r",
											"\r",
											"console.log(\"ApiTest Approver User Id is : \" + pm.environment.get(\"apiTestApproverUserId\"));\r",
											"console.log(\"ApiTest Approver User is : \" + pm.environment.get(\"ApiTestController\"));\r",
											"\r",
											"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"apiTestControllerUserId\"));\r",
											"\r",
											"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
											"\r",
											"console.log(\"ApiTest Admin Id is: \" + pm.environment.get(\"apiTestAdminUserId\"));\r",
											"\r",
											"console.log(\"ApiTestIntegration Admin Id is: \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/users",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"users"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
											"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"ledgerCode\", jsonData[x].code)\r",
											"\r",
											"        }\r",
											"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
											"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"vatCode\", jsonData[x].code)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
											"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"interimCode\", jsonData[x].code)\r",
											"        }\r",
											"         if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"project\") {\r",
											"            pm.environment.set(\"parameterIdDimensionProject\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"projectCode\", jsonData[x].code)\r",
											"\r",
											"        }\r",
											"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == \"department\") {\r",
											"            pm.environment.set(\"parameterIdDimensionDepartment\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"departmentCode\", jsonData[x].code)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"SUPPLIER\") {\r",
											"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"supplierCode\", jsonData[x].code)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"CUSTOMER\") {\r",
											"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].parameterId)\r",
											"            pm.environment.set(\"customerCode\", jsonData[x].code)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"// console.log(\"ParameterIdLedger is :\" + pm.environment.get(\"parameterIdLedger\"));\r",
											"// console.log(\"ParameterIdLedger code is :\" + pm.environment.get(\"ledgerCode\"));\r",
											"\r",
											"// console.log(\"ParameterIdVat is :\" + pm.environment.get(\"parameterIdVat\"));\r",
											"// console.log(\"ParameterIdVat code is :\" + pm.environment.get(\"vatCode\"));\r",
											"\r",
											"// console.log(\"ParameterIdInterim is :\" + pm.environment.get(\"parameterIdInterim\"));\r",
											"// console.log(\"ParameterIdInterim code is :\" + pm.environment.get(\"interimCode\"));\r",
											"\r",
											"// console.log(\"ParameterIdSupplier is :\" + pm.environment.get(\"parameterIdSupplier\"));\r",
											"// console.log(\"ParameterIdSupplier code is :\" + pm.environment.get(\"supplierCode\"));\r",
											"\r",
											"// console.log(\"ParameterIdDimensionProject is :\" + pm.environment.get(\"parameterIdDimensionProject\"));\r",
											"// console.log(\"ParameterIdDimensionProject code is :\" + pm.environment.get(\"projectCode\"));\r",
											"\r",
											"// console.log(\"ParameterIdDimensionDepartment is :\" + pm.environment.get(\"parameterIdDimensionDepartment\"));\r",
											"// console.log(\"ParameterIdDimensionDepartment code is :\" + pm.environment.get(\"departmentCode\"));\r",
											"\r",
											"// console.log(\"parameterIdCustomer is :\" + pm.environment.get(\"parameterIdCustomer\"));\r",
											"// console.log(\"parameterIdCustomer code is :\" + pm.environment.get(\"customerCode\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-language-code",
										"value": "en",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"clients",
										"{{intDatasetId}}",
										"parameters",
										"condensed"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Integration Engine",
					"item": [
						{
							"name": "Get Data From ERP",
							"item": [
								{
									"name": "Create/Check Int-Job",
									"item": [
										{
											"name": "Create New Integration",
											"item": [
												{
													"name": "PWA /Plugins",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Plugins Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"24 Seven Office\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"24SevenOfficeId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"CataCloud Plugin\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"cataCloudPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"     for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Power Office Go\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"powerOfficeGoPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Semine Plugin\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"seminePluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Tripletex\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"tripletexPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].displayName == \"Visma.net Plugin\" && jsonData[x].status== \"Active\") {\r",
																	"            jsonDataPlug=jsonData[x];\r",
																	"            pm.environment.set(\"vismaNetPluginId\", jsonDataPlug.id);\r",
																	"        }\r",
																	"    }\r",
																	"    \r",
																	"}\r",
																	"console.log(\"24SevenOfficeId is: \" + pm.environment.get(\"24SevenOfficeId\"));\r",
																	"console.log(\"CataCloudPluginId is: \" + pm.environment.get(\"cataCloudPluginId\"));\r",
																	"console.log(\"PowerOfficeGoId is: \" + pm.environment.get(\"powerOfficeGoPluginId\"));\r",
																	"console.log(\"SeminePluginId is: \" + pm.environment.get(\"seminePluginId\"));\r",
																	"console.log(\"TripletexId is: \" + pm.environment.get(\"tripletexPluginId\"));\r",
																	"console.log(\"VismaNetPluginId is: \" + pm.environment.get(\"vismaNetPluginId\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/plugins",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"plugins"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration Plugin-Settings",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// if (pm.response.code == 200) {\r",
																	"//    const jsonData = pm.response.json();\r",
																	"//    console.log(jsonData);\r",
																	"\r",
																	"//     var jsonDataInt1;\r",
																	"//     var i;\r",
																	"\r",
																	"//      if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"//             jsonDataInt1 =jsonData;  \r",
																	"// }\r",
																	"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New 24SevenOffice Integration is found.\", function () {\r",
																	"//     pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
																	"//     pm.expect(jsonDataInt1).to.have.property(\"status\", \"Active\");\r",
																	"//     pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"24SevenOfficePluginId\"));\r",
																	"// });\r",
																	"// }\r",
																	"\r",
																	"// console.log(\"NewIntegration CataCloud Id is: \" + pm.environment.get(\"newIntegrationId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/plugins/{{powerOfficeGoPluginId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"plugins",
																"{{powerOfficeGoPluginId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /New Integration-InActive",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"pm.environment.set('newIntegrationName', 'PowerOfficePlugin-' + moment().format(\"YYMMDD-HHmmss\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Integration Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"            jsonDataInt=jsonData;\r",
																	"            pm.environment.set(\"newIntegrationId\", jsonDataInt.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"NewIntegrationId is: \" + pm.environment.get(\"newIntegrationId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"{{newIntegrationName}}\",\n    \"status\": \"InActive\",\n    \"pluginId\": \"{{powerOfficeGoPluginId}}\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration CheckNewIntegration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"if (pm.response.code == 200) {\r",
																	"   const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataInt1;\r",
																	"    var i;\r",
																	"\r",
																	"     if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"        jsonDataInt1 =jsonData;  \r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New powerOfficeGo Integration is found.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"status\", \"InActive\");\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"powerOfficeGoPluginId\"));\r",
																	"});\r",
																	"}\r",
																	"\r",
																	"console.log(\"NewIntegration CataCloud Id is: \" + pm.environment.get(\"newIntegrationId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration-Active",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Integration Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//         if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"//             jsonDataInt=jsonData;\r",
																	"//             pm.environment.set(\"newIntegrationId\", jsonDataInt.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"\r",
																	"// console.log(\"NewIntegrationId is: \" + pm.environment.get(\"newIntegrationId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"name\": \"{{newIntegrationName}}\",\n    \"status\": \"Active\",\n    \"pluginId\": \"{{powerOfficeGoPluginId}}\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration CheckNewIntegration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"if (pm.response.code == 200) {\r",
																	"   const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataInt1;\r",
																	"    var i;\r",
																	"\r",
																	"     if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"            jsonDataInt1 =jsonData;  \r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New powerOfficeGo Integration is found.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"status\", \"Active\");\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"powerOfficeGoPluginId\"));\r",
																	"});\r",
																	"}\r",
																	"\r",
																	"console.log(\"NewIntegration powerOfficeGo Id is: \" + pm.environment.get(\"newIntegrationId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration-Settings",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Integration Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//         if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"//             jsonDataInt=jsonData;\r",
																	"//             pm.environment.set(\"newIntegrationId\", jsonDataInt.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"\r",
																	"// console.log(\"NewIntegrationId is: \" + pm.environment.get(\"newIntegrationId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"key\": \"applicationkey\",\n        \"value\": \"{{applicationkey}}\"\n    },\n    {\n        \"key\": \"clientkey\",\n        \"value\": \"{{clientkey}}\"\n    },\n    {\n        \"key\": \"endpointmode\",\n        \"value\": \"{{endpointmode}}\"\n    },\n    {\n        \"key\": \"dimensions\",\n        \"value\": \"{{dimensions}}\"\n    },\n    {\n        \"key\": \"semineusername\",\n        \"value\": \"{{apiTestIntegrationEmail}}\"\n    },\n    {\n        \"key\": \"seminepassword\",\n        \"value\": \"{{seminepassword}}\"\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration-Settings",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"if (pm.response.code == 200) {\r",
																	"   const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataInt1;\r",
																	"\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"endpointmode\") {\r",
																	"        jsonDataInt1 =jsonData[i];\r",
																	"\r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings endpointmode is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\", pm.collectionVariables.get(\"endpointmode\"));\r",
																	"});\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"applicationkey\") {\r",
																	"            jsonDataInt1 =jsonData[i];  \r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings applicationkey is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\", pm.collectionVariables.get(\"applicationkey\"));\r",
																	"});\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"clientkey\") {\r",
																	"            jsonDataInt1 =jsonData[i];  \r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings clientkey is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\", pm.collectionVariables.get(\"clientkey\"));\r",
																	"});\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"dimensions\") {\r",
																	"            jsonDataInt1 =jsonData[i];  \r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings dimensions is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\", pm.collectionVariables.get(\"dimensions\"));\r",
																	"});\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"semineusername\") {\r",
																	"            jsonDataInt1 =jsonData[i];  \r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings semineusername is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\",  pm.environment.get(\"apiTestIntegrationEmail\"));\r",
																	"});\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].key == \"seminepassword\") {\r",
																	"            jsonDataInt1 =jsonData[i];  \r",
																	"}\r",
																	"}\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New PowerOffice Integration settings seminepassword is set.\", function () {\r",
																	"    pm.expect(jsonDataInt1).to.have.property(\"value\", pm.collectionVariables.get(\"seminepassword\"));\r",
																	"});\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration/Client-Settings",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Integration Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//         if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
																	"//             jsonDataInt=jsonData;\r",
																	"//             pm.environment.set(\"newIntegrationId\", jsonDataInt.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"\r",
																	"// console.log(\"NewIntegrationId is: \" + pm.environment.get(\"newIntegrationId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"settingValues\": [\n        {\n            \"key\": \"applicationkey\",\n            \"value\": \"{{applicationkey}}\"\n        },\n        {\n            \"key\": \"clientkey\",\n            \"value\": \"{{clientkey}}\"\n        },\n        {\n            \"key\": \"endpointmode\",\n            \"value\": \"{{endpointmode}}\"\n        },\n        {\n            \"key\": \"dimensions\",\n            \"value\": \"{{dimensions}}\"\n        },\n        {\n            \"key\": \"semineusername\",\n            \"value\": \"{{apiTestIntegrationEmail}}\"\n        },\n        {\n            \"key\": \"seminepassword\",\n            \"value\": \"{{seminepassword}}\"\n        }\n    ],\n    \"clientName\": \"{{intDatasetName}}\",\n    \"status\": \"InActive\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration/Client-Settings",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"var jsonDataInt = pm.response.json();\r",
																	"   console.log(jsonDataInt);\r",
																	"var jsonDataClient;\r",
																	"var i;\r",
																	"    if (jsonDataInt.integrationId == pm.environment.get(\"newIntegrationId\")) {\r",
																	"        jsonDataClient =jsonDataInt;\r",
																	"            console.log(jsonDataClient);    \r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : IntClient is found and InActive.\", function () {\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"clientId\", pm.environment.get(\"intDatasetId\"));\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"clientName\", pm.environment.get(\"intDatasetName\"));\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"status\", \"InActive\");\r",
																	"}); \r",
																	"}   \r",
																	"  \r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration/Client ChangeClientStatusToActive",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"settingValues\": [\n        {\n            \"key\": \"applicationkey\",\n            \"value\": \"{{applicationkey}}\"\n        },\n        {\n            \"key\": \"clientkey\",\n            \"value\": \"{{clientkey}}\"\n        },\n        {\n            \"key\": \"endpointmode\",\n            \"value\": \"{{endpointmode}}\"\n        },\n        {\n            \"key\": \"dimensions\",\n            \"value\": \"{{dimensions}}\"\n        },\n        {\n            \"key\": \"semineusername\",\n            \"value\": \"{{apiTestIntegrationEmail}}\"\n        },\n        {\n            \"key\": \"seminepassword\",\n            \"value\": \"{{seminepassword}}\"\n        }\n    ],\n    \"clientName\": \"{{intDatasetName}}\",\n    \"status\": \"Active\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration/Client-Settings Check Status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"var jsonDataInt = pm.response.json();\r",
																	"   console.log(jsonDataInt);\r",
																	"var jsonDataClient;\r",
																	"var i;\r",
																	"    if (jsonDataInt.integrationId == pm.environment.get(\"newIntegrationId\")) {\r",
																	"        jsonDataClient =jsonDataInt;\r",
																	"            console.log(jsonDataClient);    \r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : IntClient is found and Active.\", function () {\r",
																	"    //pm.expect(jsonDataClient).to.have.property(\"clientId\", pm.environment.get(\"intDatasetId\"));\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"clientName\", pm.environment.get(\"intDatasetName\"));\r",
																	"    pm.expect(jsonDataClient).to.have.property(\"status\", \"Active\");\r",
																	"}); \r",
																	"}   \r",
																	"  \r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/settings",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"settings"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration/Client-Settings Check Status Copy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"// if (pm.response.code == 200) {\r",
																	"\r",
																	"// var jsonDataInt = pm.response.json();\r",
																	"//    console.log(jsonDataInt);\r",
																	"// var jsonDataClient;\r",
																	"// var i;\r",
																	"//     if (jsonDataInt.integrationId == pm.environment.get(\"newIntegrationId\")) {\r",
																	"//         jsonDataClient =jsonDataInt;\r",
																	"//             console.log(jsonDataClient);    \r",
																	"// }\r",
																	"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : IntClient is found and Active.\", function () {\r",
																	"//     //pm.expect(jsonDataClient).to.have.property(\"clientId\", pm.environment.get(\"intDatasetId\"));\r",
																	"//     pm.expect(jsonDataClient).to.have.property(\"clientName\", pm.environment.get(\"intDatasetName\"));\r",
																	"//     pm.expect(jsonDataClient).to.have.property(\"status\", \"Active\");\r",
																	"// }); \r",
																	"// }   \r",
																	"  \r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}/clients",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"{{newIntegrationId}}",
																"clients"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration TestConnections",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"key\": \"applicationkey\",\n        \"value\": \"{{applicationkey}}\"\n    },\n    {\n        \"key\": \"clientkey\",\n        \"value\": \"{{clientkey}}\"\n    },\n    {\n        \"key\": \"endpointmode\",\n        \"value\": \"{{endpointmode}}\"\n    },\n    {\n        \"key\": \"dimensions\",\n        \"value\": \"{{dimensions}}\"\n    },\n    {\n        \"key\": \"semineusername\",\n        \"value\": \"{{apiTestIntegrationEmail}}\"\n    },\n    {\n        \"key\": \"seminepassword\",\n        \"value\": \"{{seminepassword}}\"\n    }\n]"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/plugins/{{powerOfficeGoPluginId}}/test",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"integrations",
																"plugins",
																"{{powerOfficeGoPluginId}}",
																"test"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										},
										{
											"name": "Create Jobs",
											"item": [
												{
													"name": "PWA /Integration AddJobVatCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"vatCodeSyncId\", jsonDataJob.id);\r",
																	"    }\r",
																	"}\r",
																	"console.log(\"VatCodeSyncId is: \" + pm.environment.get(\"vatCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"VatCodeSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetVatCodes\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddVatCodes\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"VatCodeSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobSupplier",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"supplierSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"console.log(\"SupplierSyncId is: \" + pm.environment.get(\"supplierSyncId\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"SupplierSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetSuppliers\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddSuppliers\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"SupplierSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobCustomer",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"customerSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"console.log(\"CustomerSync is: \" + pm.environment.get(\"customerSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"CustomerSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetCustomers\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddCustomers\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"CustomerSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobDimension",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"dimensionSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"DimensionSync is: \" + pm.environment.get(\"dimensionSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"DimensionSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetDimensions\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddDimensions\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"DimensionSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobDimensionValue",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"dimensionValueSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"console.log(\"DimensionValueSyncId is: \" + pm.environment.get(\"dimensionValueSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"DimensionValueSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetDimensionValues\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddDimensionValues\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"DimensionValueSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobAccountingCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"accountingCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"console.log(\"AccountingCodeSync is: \" + pm.environment.get(\"accountingCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"AccountingCodeSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetAccountingCodes\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddAccountingCodes\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"AccountingCodeSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "--- Sleep 5 sec---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// Wait 5 secs before the next try\r",
																	"(function myLoop(i) {\r",
																	"    setTimeout(function () {\r",
																	"        console.log('sleep ' + i);\r",
																	"        if (--i) myLoop(i);\r",
																	"    }, 1000)\r",
																	"})(5);  "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /Integration AddJobInvoice",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Get Jobs Id /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    var jsonData = pm.response.json();\r",
																	"        if (jsonData.jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob=jsonData;\r",
																	"            pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"InActive\",\n    \"jobType\": \"InvoiceSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetInvoices\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"PostInvoice\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"InvoiceSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integrations-CheckJobs",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json();\r",
																	"   //console.log(jsonData);\r",
																	"\r",
																	"var jsonDataJob_1;\r",
																	"var jsonDataJob_2;\r",
																	"var jsonDataJob_3;\r",
																	"var jsonDataJob_4;\r",
																	"var jsonDataJob_5;\r",
																	"var jsonDataJob_6;\r",
																	"var jsonDataJob_7;\r",
																	"var jsonDataJob_8;\r",
																	"    \r",
																	"var i;\r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob_1 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingCode job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"id\", pm.environment.get(\"accountingCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob_3 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Customer job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"id\", pm.environment.get(\"customerSyncId\"));\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"status\", \"InActive\");\r",
																	"});\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob_4 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"id\", pm.environment.get(\"dimensionSyncId\"));\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob_5 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionValue job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"id\", pm.environment.get(\"dimensionValueSyncId\"));\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob_6 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"id\", pm.environment.get(\"invoiceSyncId\"));\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob_7 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"id\", pm.environment.get(\"supplierSyncId\"));\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"status\", \"InActive\");\r",
																	"});  \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob_8 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"} \r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCodeSync job is found.\", function () {\r",
																	"    pm.expect(jsonDataJob_8).to.have.property(\"id\", pm.environment.get(\"vatCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_8).to.have.property(\"status\", \"InActive\");\r",
																	"});    \r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										},
										{
											"name": "Change Jobs Status To Active",
											"item": [
												{
													"name": "PWA /Integration JobSupplier",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"supplierSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"SupplierSyncId is: \" + pm.environment.get(\"supplierSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"SupplierSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetSuppliers\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddSuppliers\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"SupplierSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{supplierSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobAccountingCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"accountingCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"AccountingCodeSync is: \" + pm.environment.get(\"accountingCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"AccountingCodeSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetAccountingCodes\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddAccountingCodes\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"AccountingCodeSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{accountingCodeSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobCustomer",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"customerSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"CustomerSync is: \" + pm.environment.get(\"customerSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"CustomerSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetCustomers\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddCustomers\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"CustomerSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{customerSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobDimension",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"dimensionSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"DimensionSync is: \" + pm.environment.get(\"dimensionSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"DimensionSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetDimensions\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddDimensions\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"DimensionSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{dimensionSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobDimensionValue",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"dimensionValueSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"DimensionValueSyncId is: \" + pm.environment.get(\"dimensionValueSyncId\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"DimensionValueSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetDimensionValues\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddDimensionValues\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"DimensionValueSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{dimensionValueSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobVatCode",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"vatCodeSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"VatCodeSyncId is: \" + pm.environment.get(\"vatCodeSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"VatCodeSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetVatCodes\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"AddVatCodes\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"VatCodeSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{vatCodeSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration JobInvoice",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"// //////// Get Jobs Id /////////\r",
																	"// if (pm.response.code == 200) {\r",
																	"//     var jsonData = pm.response.json();\r",
																	"//      for (i in jsonData) {\r",
																	"//         if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"//             jsonDataJob=jsonData[i];\r",
																	"//             pm.environment.set(\"invoiceSyncId\", jsonDataJob.id);\r",
																	"    \r",
																	"//     }\r",
																	"// }\r",
																	"// }\r",
																	"// console.log(\"InvoiceSynIdc is: \" + pm.environment.get(\"invoiceSyncId\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"status\": \"Active\",\n    \"jobType\": \"InvoiceSync\",\n    \"includeInactive\": \"false\",\n    \"cron\": \"0 0 * * *\",\n    \"batchSize\": \"10\",\n    \"ignoreLastChangedDate\": \"false\",\n    \"steps\": [\n        {\n            \"actionName\": \"GetInvoices\",\n            \"stepOrder\": 0,\n            \"stepType\": \"Fetch\",\n            \"status\": \"Active\"\n        },\n        {\n            \"actionName\": \"PostInvoice\",\n            \"stepOrder\": 1,\n            \"stepType\": \"Push\",\n            \"status\": \"Active\"\n        }\n    ],\n    \"jobName\": \"InvoiceSync\"\n}"
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{invoiceSyncId}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs",
																"{{invoiceSyncId}}"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												},
												{
													"name": "PWA /Integration-CheckJobs Status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require('moment');\r",
																	"// pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"// pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"// // pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
																	"// // pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"////Check the New Integrations tings/////\r",
																	"if (pm.response.code == 200) {\r",
																	"var jsonData = pm.response.json();\r",
																	"   //console.log(jsonData);\r",
																	"\r",
																	"var jsonDataJob_1;\r",
																	"var jsonDataJob_2;\r",
																	"var jsonDataJob_3;\r",
																	"var jsonDataJob_4;\r",
																	"var jsonDataJob_5;\r",
																	"var jsonDataJob_6;\r",
																	"var jsonDataJob_7;\r",
																	"var jsonDataJob_8;\r",
																	"    \r",
																	"var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"AccountingCodeSync\") {\r",
																	"            jsonDataJob_1 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);    \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingCode job is found and Active.\", function () {\r",
																	"    //pm.expect(jsonDataJob_1).to.have.property(\"id\", pm.environment.get(\"accountingCodeSyncId\"));\r",
																	"    pm.expect(jsonDataJob_1).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"     \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"CustomerSync\") {\r",
																	"            jsonDataJob_3 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Customer job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_3).to.have.property(\"id\", pm.environment.get(\"customerSyncId\"));\r",
																	"    pm.expect(jsonDataJob_3).to.have.property(\"status\", \"Active\");\r",
																	"});   \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionSync\") {\r",
																	"            jsonDataJob_4 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_4).to.have.property(\"id\", pm.environment.get(\"dimensionSyncId\"));\r",
																	"    pm.expect(jsonDataJob_4).to.have.property(\"status\", \"Active\");\r",
																	"});   \r",
																	"    \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"DimensionValueSync\") {\r",
																	"            jsonDataJob_5 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionValue job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_5).to.have.property(\"id\", pm.environment.get(\"dimensionValueSyncId\"));\r",
																	"    pm.expect(jsonDataJob_5).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"InvoiceSync\") {\r",
																	"            jsonDataJob_6 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);\r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_6).to.have.property(\"id\", pm.environment.get(\"invoiceSyncId\"));\r",
																	"    pm.expect(jsonDataJob_6).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"SupplierSync\") {\r",
																	"            jsonDataJob_7 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob);  \r",
																	"}\r",
																	"}\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_7).to.have.property(\"id\", pm.environment.get(\"supplierSyncId\"));\r",
																	"    pm.expect(jsonDataJob_7).to.have.property(\"status\", \"Active\");\r",
																	"});  \r",
																	"   \r",
																	"for (i in jsonData) {\r",
																	"        if (jsonData[i].jobType == \"VatCodeSync\") {\r",
																	"            jsonDataJob_8 =jsonData[i];\r",
																	"            break;\r",
																	"            //console.log(jsonDataJob); \r",
																	"}\r",
																	"}\r",
																	" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCodeSync job is found and Active..\", function () {\r",
																	"    //pm.expect(jsonDataJob_8).to.have.property(\"id\", pm.environment.get(\"vatCodeSyncId\"));\r",
																	"pm.expect(jsonDataJob_8).to.have.property(\"status\", \"Active\");\r",
																	"});\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINTENGAd}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{intOrganizationId}}",
																"clients",
																"{{intDatasetId}}",
																"integrations",
																"{{newIntegrationId}}",
																"jobs"
															]
														},
														"description": "Inserts and updates a set of suppliers for a client"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Sync Job",
									"item": [
										{
											"name": "PWA /Integration Sync Supplier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}\r\n"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{supplierSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync AccountingCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{accountingCodeSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Customer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{customerSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Dimension",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{dimensionSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync DimensionValue",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{dimensionValueSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Integration Sync Vatcode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}/start",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"integrations",
														"{{newIntegrationId}}",
														"jobs",
														"{{vatCodeSyncId}}",
														"start"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "--- Sleep 5 min---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(300);  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Compare All Master Data Between ERP and Semine",
			"item": [
				{
					"name": "IDP /connect/token POGO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            //console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            //console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"POGO\", \"https://api-demo.poweroffice.net\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDP /connect/token POGORefresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{TokenPOGORefresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-AccountingCodesList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var accountCodesPOGO = [];\r",
									"// var accountNamesPOGO=[];\r",
									"// var accountvatCodesPOGO=[];\r",
									"// //console.log(ERPInvoiceNumber.AccountName);\r",
									"// for (i in masterData) {\r",
									"// accountCodesPOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// accountNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// accountvatCodesPOGO.push(masterData[i].vatCode)\r",
									"// }\r",
									"\r",
									"// accountCodesPOGO=accountCodesPOGO.sort(); \r",
									"// pm.environment.set(\"accountCodesPOGO\", accountCodesPOGO);\r",
									"// console.log(pm.environment.get(\"accountCodesPOGO\"));\r",
									"\r",
									"// accountNamesPOGO=accountNamesPOGO.sort();\r",
									"// pm.environment.set(\"accountNamesPOGO\", accountNamesPOGO);\r",
									"// console.log(pm.environment.get(\"accountNamesPOGO\"));\r",
									"\r",
									"// accountvatCodesPOGO=accountvatCodesPOGO.sort();\r",
									"// pm.environment.set(\"accountvatCodesPOGO\", accountvatCodesPOGO);\r",
									"// console.log(pm.environment.get(\"accountvatCodesPOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/GeneralLedgerAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"GeneralLedgerAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - LedgerSemine Check Code-Description-Id-Relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"    var findMasterData=[];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===parseInt(masterDataSemine[i].code)\r",
									"    );\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data accounting Code; codes are equal to POGO ERP's  codes.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.name===masterDataSemine[i].description[0].description\r",
									"    );\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data accounting Code; descriptions  are equal to POGO ERP's  names.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId));\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data accounting Code; externalIds are equal to POGO ERP's vatIds.\", function () { \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    // for(i in masterDataSemine){\r",
									"    //     var findMasterData=masterDataPOGO.find(x=>\r",
									"    //     x.vatCode===parseInt(masterDataSemine[i].relations[0].code));\r",
									"    //     if(findMasterData===undefined){\r",
									"    //         failed=true;\r",
									"    //         break;\r",
									"    //     }\r",
									"    // }\r",
									"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data accounting Code; relation is equal to POGO ERP's vatCode.\", function () { \r",
									"    //     pm.expect(failed).to.be.equal(false);\r",
									"    // });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// for(i in masterDataSemine){\r",
									"    //     var findMasterData=masterDataPOGO.find(x=>\r",
									"    //     x.code===parseInt(masterDataSemine[i].code)&& \r",
									"    //     x.name===masterDataSemine[i].description[0].description&&\r",
									"    //     x.id===parseInt(masterDataSemine[i].externalId));\r",
									"    //     //&&x.vatCode===parseInt(masterDataSemine[i].relations[0].code));\r",
									"    //     //console.log(findMasterData);\r",
									"    //     if(findMasterData===undefined){\r",
									"    //         failed=true;\r",
									"    //         break;\r",
									"    //     }\r",
									"    //     //console.log(findMasterData);\r",
									"    // }\r",
									"\r",
									"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data accounting Code; code, description and vatRelation are equal to POGO ERP's accountingCode, name, and vatCode relation.\", function () {\r",
									"           \r",
									"    //     pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    // });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var accountCodesSemine = [];\r",
									"// var accountNamesSemine=[];\r",
									"// var accountCodesSemineINT=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// var accountCodesSemine= parseInt(masterData[i].code) \r",
									"// accountCodesSemineINT.push(accountCodesSemine)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// accountNamesSemine.push(masterData[i].description)\r",
									"// }\r",
									"// accountCodesSemineINT=accountCodesSemineINT.sort();\r",
									"// pm.environment.set(\"accountCodesSemineINT\", accountCodesSemineINT);\r",
									"// console.log(pm.environment.get(\"accountCodesSemineINT\"));\r",
									"\r",
									"// pm.environment.set(\"accountNamesSemine\", accountNamesSemine);\r",
									"// accountNamesSemine=accountNamesSemine.sort();\r",
									"// console.log(pm.environment.get(\"accountNamesSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountCodesSemine And ERP accountCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"accountCodesSemineINT\"))).to.be.equal(JSON.stringify(pm.environment.get(\"accountCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountNamesSemine And ERP accountNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"accountNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"accountNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - LedgerSemine Check Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json().data;\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"    var failed=false;\r",
									"    var findMasterData=[];\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===parseInt(masterDataSemine[i].code)&&\r",
									"        x.name===masterDataSemine[i].description&&\r",
									"        x.isActive===masterDataSemine[i].isActive);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        // pm.environment.set(\"findMasterData\", findMasterData)\r",
									"        // console.log(pm.environment.get(\"findMasterData\"));\r",
									"\r",
									"    }\r",
									"    \r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine status of accounting codes and POGO ERP's accaunting's status are equal.\", function () {\r",
									"           \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var accountCodesSemine = [];\r",
									"// var accountNamesSemine=[];\r",
									"// var accountCodesSemineINT=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// var accountCodesSemine= parseInt(masterData[i].code) \r",
									"// accountCodesSemineINT.push(accountCodesSemine)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// accountNamesSemine.push(masterData[i].description)\r",
									"// }\r",
									"// accountCodesSemineINT=accountCodesSemineINT.sort();\r",
									"// pm.environment.set(\"accountCodesSemineINT\", accountCodesSemineINT);\r",
									"// console.log(pm.environment.get(\"accountCodesSemineINT\"));\r",
									"\r",
									"// pm.environment.set(\"accountNamesSemine\", accountNamesSemine);\r",
									"// accountNamesSemine=accountNamesSemine.sort();\r",
									"// console.log(pm.environment.get(\"accountNamesSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountCodesSemine And ERP accountCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"accountCodesSemineINT\"))).to.be.equal(JSON.stringify(pm.environment.get(\"accountCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountNamesSemine And ERP accountNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"accountNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"accountNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values",
								"devextreme"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-VatCodeList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var vatCodesPOGO = [];\r",
									"// var vatNamesPOGO=[];\r",
									"// var vatCodeRatesPOGO=[];\r",
									"// var vatCodeIdsPOGO=[];\r",
									"\r",
									"// var accountOcjects=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"//     var bankAccountNumPOGO_1=pm.environment.get(\"supplierIdPOGO\")\r",
									"\r",
									"//     var bankAccountNumPOGO_2=bankAccountNumPOGO_1.find(x=>x===parseInt(masterData[i].partyId))\r",
									"//     if(bankAccountNumPOGO_2!=undefined){\r",
									"//         bankAccountNumPOGO.push(masterData[i].code)\r",
									"//         bankAccountNumIsActivePOGO.push(masterData[i].isActive)\r",
									"//         accountOcjects.push(masterData[i]);\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatCodesPOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// vatCodeRatesPOGO.push(masterData[i].rate)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// vatCodeIdsPOGO.push(masterData[i].id)\r",
									"// }\r",
									"// vatCodesPOGO=vatCodesPOGO.sort(); \r",
									"// pm.environment.set(\"vatCodesPOGO\", vatCodesPOGO);\r",
									"// console.log(pm.environment.get(\"vatCodesPOGO\"));\r",
									"\r",
									"// vatNamesPOGO=vatNamesPOGO.sort();\r",
									"// pm.environment.set(\"vatNamesPOGO\", vatNamesPOGO);\r",
									"// console.log(pm.environment.get(\"vatNamesPOGO\"));\r",
									"\r",
									"// vatCodeRatesPOGO=vatCodeRatesPOGO.sort();\r",
									"// pm.environment.set(\"vatCodeRatesPOGO\", vatCodeRatesPOGO);\r",
									"// console.log(pm.environment.get(\"vatCodeRatesPOGO\"));\r",
									"\r",
									"// vatCodeIdsPOGO=vatCodeIdsPOGO.sort();\r",
									"// pm.environment.set(\"vatCodeIdsPOGO\", vatCodeIdsPOGO);\r",
									"// console.log(pm.environment.get(\"vatCodeIdsPOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/VatCode/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"VatCode",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Vat Semine Check-Code-Descriptions-Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json().data;\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===masterDataSemine[i].code);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data Vat Code; codes are equal to POGO ERP's vatCodes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.name===masterDataSemine[i].description);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data Vat Code; descriptions are equal to POGO ERP's names.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.isActive===masterDataSemine[i].isActive);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data Vat Code; statuses are equal to POGO ERP's statuses.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.vatBasisRatio===masterDataSemine[i].cost);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data Vat Code; costs are equal to POGO ERP's vatBasisRatios.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.rate===masterDataSemine[i].vatPercentage);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 5-Semine master Data Vat Code; vatPercentages are equal to POGO ERP's vatRates.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" // for(i in masterDataSemine){\r",
									"    //     var findMasterData=masterDataPOGO.find(x=>\r",
									"    //     x.code===masterDataSemine[i].code&&\r",
									"    //     x.name===masterDataSemine[i].description&&\r",
									"    //     x.isActive===masterDataSemine[i].isActive&&\r",
									"    //     x.vatBasisRatio===masterDataSemine[i].cost);\r",
									"    //     //&&x.rate===masterDataSemine[i].vatPercentage);\r",
									"    //     //console.log(findMasterData);\r",
									"    //     if(findMasterData===undefined){\r",
									"    //         failed=true;\r",
									"    //         break;\r",
									"    //     }\r",
									"    //     //console.log(findMasterData);\r",
									"    // }\r",
									"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data Vat Code; codes, descriptions, statuses and vatRetes are equal to POGO ERP's vatCodes, names, statuses and vatRates.\", function () {  \r",
									"    //     pm.expect(failed).to.be.equal(false);\r",
									"    // });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     var masterDataSemine = pm.response.json();\r",
									"\r",
									"//     var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"//     console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"//     var findMasterData; [];\r",
									"//     var failed=false;\r",
									"//     for(i in masterDataSemine){\r",
									"//         if(masterDataSemine[i].vatRates==null){\r",
									"//             var findMasterData=masterDataPOGO.find(x=>x.code===masterDataSemine[i].code&& x.name===masterDataSemine[i].description[0].description&&x.id===parseInt(masterDataSemine[i].externalId));\r",
									"\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//         if(findMasterData===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//     }\r",
									"    \r",
									"\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data Vat Code; codes, descriptions and vatRetes are equal to POGO ERP's vatCodes, names, and vatRates.\", function () {\r",
									"           \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatCodes",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"vatCodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Vat Semine ExternalId-Relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    \r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data accounting Code; externalIds are equal to POGO ERP's vatIds.\", function () {\r",
									"           \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json();\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var vatCodesSemine = [];\r",
									"// var vatNamesSemine=[];\r",
									"// var vatCodeRatesSemine=[];\r",
									"// var vatCodeExternalIdsSemine=[];\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatNamesSemine.push(masterData[i].description[0].description)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatCodeRatesSemine.push(masterData[i].vatRates)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// vatCodeExternalIdsSemine.push(masterData[i].externalId)\r",
									"// }\r",
									"\r",
									"// vatCodesSemine=vatCodesSemine.sort(); \r",
									"// pm.environment.set(\"vatCodesSemine\", vatCodesSemine);\r",
									"// console.log(pm.environment.get(\"vatCodesSemine\"));\r",
									"\r",
									"// vatNamesSemine=vatNamesSemine.sort(); \r",
									"// pm.environment.set(\"vatNamesSemine\", vatNamesSemine);\r",
									"// console.log(pm.environment.get(\"vatNamesSemine\"));\r",
									"\r",
									"// vatCodeRatesSemine=vatCodeRatesSemine.sort();\r",
									"// pm.environment.set(\"vatCodeRatesSemine\", vatCodeRatesSemine);\r",
									"// console.log(pm.environment.get(\"vatCodeRatesSemine\"));\r",
									"\r",
									"// vatCodeExternalIdsSemine=vatCodeExternalIdsSemine.sort();\r",
									"// pm.environment.set(\"vatCodeExternalIdsSemine\", vatCodeExternalIdsSemine);\r",
									"// console.log(pm.environment.get(\"vatCodeExternalIdsSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : vatCodesSemine And ERP vatCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"vatCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"vatCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : vatNamesSemine And ERP vatNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"vatNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"vatNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCodeExternalIdsSemine And ERP vatCodeIdsPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"vatCodeExternalIdsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"vatCodeIdsPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     var masterData = pm.response.json();\r",
									"\r",
									"//     var accountOcjects=pm.environment.get(\"accountOcjects\");\r",
									"//     console.log(pm.environment.get(\"accountOcjects\"));\r",
									"//     var failed=false;\r",
									"//     for(i in masterData){\r",
									"//         var findAccountObject=accountOcjects.find(x=>x.partyId===parseInt(masterData[i].externalId)&&(\r",
									"//             (x.isActive===true&&masterData[i].status===\"Active\")\r",
									"//         ||(x.isActive===false&&masterData[i].status===\"Inactive\")\r",
									"//         ))\r",
									"//         if(findAccountObject===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//        console.log(findAccountObject);\r",
									"//     }\r",
									"\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierAccountNumberStatusSemine And ERP bankAccountNumIsActivePOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdVat}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdVat}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-SupplierList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"\r",
									"// var supplierNamesPOGO=[];\r",
									"// var supplierVatNumberPOGO=[];\r",
									"// var supplierIdPOGO = [];\r",
									"// var supplierCodePOGO = [];\r",
									"// var supplierCityPOGO = [];\r",
									"// var supplierZipCodePOGO = [];\r",
									"// var supplierAddressPOGO = [];\r",
									"// var supplierCountryCodePOGO = [];\r",
									"// var supplierEmailAddressPOGO = [];\r",
									"// var supplierPhoneNumberPOGO = [];\r",
									"\r",
									"\r",
									"\r",
									"// //console.log(ERPInvoiceNumber.AccountName);\r",
									"// for (i in masterData) {\r",
									"// supplierNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierVatNumberPOGO.push(masterData[i].vatNumber)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierIdPOGO.push(masterData[i].id)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierCodePOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierCityPOGO.push(masterData[i].mailAddress.city)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierZipCodePOGO.push(masterData[i].mailAddress.zipCode)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierAddressPOGO.push(masterData[i].mailAddress.address1)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierCountryCodePOGO.push(masterData[i].mailAddress.countryCode)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierEmailAddressPOGO.push(masterData[i].emailAddress)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierPhoneNumberPOGO.push(masterData[i].phoneNumber)\r",
									"// }\r",
									"\r",
									"// supplierNamesPOGO=supplierNamesPOGO.sort(); \r",
									"// pm.environment.set(\"supplierNamesPOGO\", supplierNamesPOGO);\r",
									"// console.log(\"supplierNamesPOGO:\"+ pm.environment.get(\"supplierNamesPOGO\"));\r",
									"\r",
									"// supplierVatNumberPOGO=supplierVatNumberPOGO.sort();\r",
									"// pm.environment.set(\"supplierVatNumberPOGO\", supplierVatNumberPOGO);\r",
									"// console.log(\"supplierVatNumberPOGO:\"+ pm.environment.get(\"supplierVatNumberPOGO\"));\r",
									"\r",
									"// supplierIdPOGO=supplierIdPOGO.sort();\r",
									"// pm.environment.set(\"supplierIdPOGO\", supplierIdPOGO);\r",
									"// console.log(\"supplierIdPOGO:\"+ pm.environment.get(\"supplierIdPOGO\"));\r",
									"\r",
									"\r",
									"// supplierCodePOGO=supplierCodePOGO.sort();\r",
									"// pm.environment.set(\"supplierCodePOGO\", supplierCodePOGO);\r",
									"// console.log(\"supplierCodePOGO:\"+ pm.environment.get(\"supplierCodePOGO\"));\r",
									"\r",
									"// supplierCityPOGO=supplierCityPOGO.sort();\r",
									"// pm.environment.set(\"supplierCityPOGO\", supplierCityPOGO);\r",
									"// console.log(\"supplierCityPOGO:\"+ pm.environment.get(\"supplierCityPOGO\"));\r",
									"\r",
									"// supplierZipCodePOGO=supplierZipCodePOGO.sort();\r",
									"// pm.environment.set(\"supplierZipCodePOGO\", supplierZipCodePOGO);\r",
									"// console.log(\"supplierZipCodePOGO:\"+ pm.environment.get(\"supplierZipCodePOGO\"));\r",
									"\r",
									"// supplierAddressPOGO=supplierAddressPOGO.sort();\r",
									"// pm.environment.set(\"supplierAddressPOGO\", supplierAddressPOGO);\r",
									"// console.log(\"supplierAddressPOGO:\"+ pm.environment.get(\"supplierAddressPOGO\"));\r",
									"\r",
									"// supplierCountryCodePOGO=supplierCountryCodePOGO.sort();\r",
									"// pm.environment.set(\"supplierCountryCodePOGO\", supplierCountryCodePOGO);\r",
									"// console.log(\"supplierCountryCodePOGO:\"+ pm.environment.get(\"supplierCountryCodePOGO\"));\r",
									"\r",
									"\r",
									"// supplierEmailAddressPOGO=supplierEmailAddressPOGO.sort();\r",
									"// pm.environment.set(\"supplierEmailAddressPOGO\", supplierEmailAddressPOGO);\r",
									"// console.log(\"supplierEmailAddressPOGO:\"+pm.environment.get(\"supplierEmailAddressPOGO\"));\r",
									"\r",
									"\r",
									"// supplierPhoneNumberPOGO=supplierPhoneNumberPOGO.sort();\r",
									"// pm.environment.set(\"supplierPhoneNumberPOGO\", supplierPhoneNumberPOGO);\r",
									"// console.log(\"supplierPhoneNumberPOGO:\"+pm.environment.get(\"supplierPhoneNumberPOGO\"));\r",
									"\r",
									"//}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Supplier/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-BankAccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGOBankAccount\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGOBankAccount\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var bankAccountNumPOGO = [];\r",
									"// var bankAccountNumIsActivePOGO = [];\r",
									"// var accountOcjects=[];\r",
									"\r",
									"// for (i in masterData) {\r",
									"//     var bankAccountNumPOGO_1=pm.environment.get(\"supplierIdPOGO\")\r",
									"\r",
									"//     var bankAccountNumPOGO_2=bankAccountNumPOGO_1.find(x=>x===parseInt(masterData[i].partyId))\r",
									"//     if(bankAccountNumPOGO_2!=undefined){\r",
									"//         bankAccountNumPOGO.push(masterData[i].code)\r",
									"//         bankAccountNumIsActivePOGO.push(masterData[i].isActive)\r",
									"//         accountOcjects.push(masterData[i]);\r",
									"//     }\r",
									"//    // console.log(bankAccountNumPOGO_2);\r",
									"//     //console.log(accountOcjects);\r",
									"// }\r",
									"// //console.log(bankAccountNumPOGO);\r",
									"// console.log(accountOcjects);\r",
									"// pm.environment.set(\"accountOcjects\", accountOcjects);\r",
									"\r",
									"//  bankAccountNumPOGO=bankAccountNumPOGO.sort(); \r",
									"//  pm.environment.set(\"bankAccountNumPOGO\", bankAccountNumPOGO);\r",
									"// console.log(pm.environment.get(\"bankAccountNumPOGO\"));\r",
									"\r",
									"// bankAccountNumIsActivePOGO=bankAccountNumIsActivePOGO.sort(); \r",
									"//  pm.environment.set(\"bankAccountNumIsActivePOGO\", bankAccountNumIsActivePOGO);\r",
									"// console.log(pm.environment.get(\"bankAccountNumIsActivePOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// //console.log(pm.environment.get(\"supplierIdPOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/PartyBankAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"PartyBankAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Suppliers Semine Chack All fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.code===parseInt(masterDataSemine[i].erpVendorId));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data Supplier; codes are equal to POGO ERP's codes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.name===masterDataSemine[i].name);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data Supplier; names are equal to POGO ERP's names.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.mailAddress.countryCode===masterDataSemine[i].country);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data Supplier; countrys are equal to POGO ERP's countryCodes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.mailAddress.city===masterDataSemine[i].city);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data Supplier; citys are equal to POGO ERP's citys.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.mailAddress.address1===masterDataSemine[i].street);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 5-Semine master Data Supplier; streets are equal to POGO ERP's address1s.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.mailAddress.zipCode===masterDataSemine[i].zip);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 6-Semine master Data Supplier; zips are equal to POGO ERP's zipCodes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.vatNumber===masterDataSemine[i].vatId);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 7-Semine master Data Supplier; vatIds are equal to POGO ERP's vatNumber.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.phoneNumber===masterDataSemine[i].phone);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 8-Semine master Data Supplier; phones are equal to POGO ERP's phoneNumbers.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.emailAddress===masterDataSemine[i].email);\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 9-Semine master Data Supplier; emails are equal to POGO ERP's emailAddress.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 10-Semine master Data Supplier; externalIds are equal to POGO ERP's ids.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGOBankAccount=pm.environment.get(\"masterDataPOGOBankAccount\");\r",
									"    console.log(\"\" +pm.environment.get(\"masterDataPOGOBankAccount\"));\r",
									"\r",
									"    var findMasterData=[];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGOBankAccount.find(x=>\r",
									"        x.partyId===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.code===masterDataSemine[i].bankAccounts[0].accountNumber);\r",
									"        console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 11-Semine master Data Supplier; externalIds and bankaccountNumbers are equal to POGO ERP's codes, partyIds.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGOBankAccount=pm.environment.get(\"masterDataPOGOBankAccount\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGOBankAccount\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGOBankAccount.find(x=>\r",
									"        x.partyId===parseInt(masterDataSemine[i].externalId)&&((x.isActive==true&&masterDataSemine[i].status==\"Active\")||(x.isActive==false&&masterDataSemine[i].status==\"Inactive\")))\r",
									"         if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        }\r",
									"        console.log(findMasterData);\r",
									"\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 12-Semine master Data Supplier; statuses are equal to POGO ERP's isActive.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// for(i in masterDataSemine){\r",
									"//         var findMasterData=masterDataPOGO.find(x=>\r",
									"//         x.code===parseInt(masterDataSemine[i].erpVendorId)&& \r",
									"//         x.name===masterDataSemine[i].name&&\r",
									"//         x.mailAddress.countryCode===masterDataSemine[i].country&&\r",
									"//         x.mailAddress.city===masterDataSemine[i].city&&\r",
									"//         x.mailAddress.address1===masterDataSemine[i].street&&\r",
									"//         x.mailAddress.zipCode===masterDataSemine[i].zip&&\r",
									"//         x.vatNumber===masterDataSemine[i].vatId&&\r",
									"//         x.phoneNumber===masterDataSemine[i].phone&&\r",
									"//         x.emailAddress===masterDataSemine[i].email&&\r",
									"//         x.id===parseInt(masterDataSemine[i].externalId));\r",
									"//         //console.log(findMasterData);\r",
									"//         if(findMasterData===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//     }\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data Supplier; codes, names, countrys, citys, streets, vatIds, phones, emails and externalIds are equal to POGO ERP's codes, names, countryCodes, citys, address1s, zipCodes, phoneNumbers, emailAddress and ids.\", function () {  \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"//     });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json();\r",
									"\r",
									"\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"\r",
									"// var supplierNamesSemine=[];\r",
									"// var supplierVatIdSemine=[];\r",
									"// var supplierExternalIdSemine = [];\r",
									"// var supplierErpVendorIdSemine = [];\r",
									"// var supplierCitySemine = [];\r",
									"// var supplierZipSemine = [];\r",
									"// var supplierStreetsSemine = [];\r",
									"// var supplierCountrySemine = [];\r",
									"// var supplierEmailSemine = [];\r",
									"// var supplierPhoneSemine = [];\r",
									"// var supplierAccountNumberSemine = [];\r",
									"// var supplierAccountNumberStatusSemine = [];\r",
									"// var booleanSupplierAccountNumberStatusSemine\r",
									"\r",
									"\r",
									"// //console.log(ERPInvoiceNumber.AccountName);\r",
									"// for (i in masterData) {\r",
									"// supplierNamesSemine.push(masterData[i].name)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierVatIdSemine.push(masterData[i].vatId)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierExternalIdSemine.push(parseInt(masterData[i].externalId))\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierErpVendorIdSemine.push(parseInt(masterData[i].erpVendorId))\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierCitySemine.push(masterData[i].city)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierZipSemine.push(masterData[i].zip)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierStreetsSemine.push(masterData[i].street)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierCountrySemine.push(masterData[i].country)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierEmailSemine.push(masterData[i].email)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierPhoneSemine.push(masterData[i].phone)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierAccountNumberSemine.push(masterData[i].bankAccounts[0].accountNumber)\r",
									"// }\r",
									"// for (i in masterData) {\r",
									"// supplierAccountNumberStatusSemine.push(masterData[i].bankAccounts[0].status)\r",
									"\r",
									"\r",
									"// }\r",
									"\r",
									"// supplierNamesSemine=supplierNamesSemine.sort(); \r",
									"// pm.environment.set(\"supplierNamesSemine\", supplierNamesSemine);\r",
									"// console.log(pm.environment.get(\"supplierNamesSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierNamesPOGO\"));\r",
									"\r",
									"// supplierVatIdSemine=supplierVatIdSemine.sort();\r",
									"// pm.environment.set(\"supplierVatIdSemine\", supplierVatIdSemine);\r",
									"// console.log(pm.environment.get(\"supplierVatIdSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierVatNumberPOGO\"));\r",
									"\r",
									"\r",
									"// supplierExternalIdSemine=supplierExternalIdSemine.sort();\r",
									"// pm.environment.set(\"supplierExternalIdSemine\", supplierExternalIdSemine);\r",
									"// console.log(pm.environment.get(\"supplierExternalIdSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierIdPOGO\"));\r",
									"\r",
									"// supplierErpVendorIdSemine=supplierErpVendorIdSemine.sort();\r",
									"// pm.environment.set(\"supplierErpVendorIdSemine\", supplierErpVendorIdSemine);\r",
									"// console.log(pm.environment.get(\"supplierErpVendorIdSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierCodePOGO\"));\r",
									"\r",
									"// supplierCitySemine=supplierCitySemine.sort();\r",
									"// pm.environment.set(\"supplierCitySemine\", supplierCitySemine);\r",
									"// console.log(pm.environment.get(\"supplierCitySemine\"));\r",
									"// console.log(pm.environment.get(\"supplierCityPOGO\"));\r",
									"\r",
									"\r",
									"// supplierZipSemine=supplierZipSemine.sort();\r",
									"// pm.environment.set(\"supplierZipSemine\", supplierZipSemine);\r",
									"// console.log(pm.environment.get(\"supplierZipSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierZipCodePOGO\"));\r",
									"\r",
									"// supplierStreetsSemine=supplierStreetsSemine.sort();\r",
									"// pm.environment.set(\"supplierStreetsSemine\", supplierStreetsSemine);\r",
									"// console.log(pm.environment.get(\"supplierStreetsSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierAddressPOGO\"));\r",
									"\r",
									"// supplierCountrySemine=supplierCountrySemine.sort();\r",
									"// pm.environment.set(\"supplierCountrySemine\", supplierCountrySemine);\r",
									"// console.log(pm.environment.get(\"supplierCountrySemine\"));\r",
									"// console.log(pm.environment.get(\"supplierCountryCodePOGO\"));\r",
									"\r",
									"// supplierEmailSemine=supplierEmailSemine.sort();\r",
									"// pm.environment.set(\"supplierEmailSemine\", supplierEmailSemine);\r",
									"// console.log(pm.environment.get(\"supplierEmailSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierEmailAddressPOGO\"));\r",
									"\r",
									"// supplierPhoneSemine=supplierPhoneSemine.sort();\r",
									"// pm.environment.set(\"supplierPhoneSemine\", supplierPhoneSemine);\r",
									"// console.log(pm.environment.get(\"supplierPhoneSemine\"));\r",
									"// console.log(pm.environment.get(\"supplierPhoneNumberPOGO\"));\r",
									"\r",
									"// supplierAccountNumberSemine=supplierAccountNumberSemine.sort();\r",
									"// pm.environment.set(\"supplierAccountNumberSemine\", supplierAccountNumberSemine);\r",
									"// console.log(pm.environment.get(\"supplierAccountNumberSemine\"));\r",
									"// console.log(pm.environment.get(\"bankAccountNumPOGO\"));\r",
									"\r",
									"\r",
									"// supplierAccountNumberStatusSemine=supplierAccountNumberStatusSemine.sort();\r",
									"// pm.environment.set(\"supplierAccountNumberStatusSemine\", supplierAccountNumberStatusSemine);\r",
									"// console.log(pm.environment.get(\"supplierAccountNumberStatusSemine\"));\r",
									"// console.log(pm.environment.get(\"bankAccountNumIsActivePOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierNamesSemine And ERP supplierNamesPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierVatIdSemine And ERP supplierVatnumberPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierVatIdSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierVatNumberPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"//     if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierExternalIdSemine And ERP supplierIdPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierExternalIdSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierIdPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"//  if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierErpVendorIdSemine And ERP supplierCodePOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierErpVendorIdSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierCodePOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"//  if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierZipSemine And ERP supplierZipCodePOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierZipSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierZipCodePOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"//  if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierCitySemine And ERP supplierCityPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierCitySemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierCityPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"//  if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierStreetsSemine And ERP supplierAddressPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierStreetsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierAddressPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierCountrySemine And ERP supplierCountryCodePOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierCountrySemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierCountryCodePOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierEmailSemine And ERP supplierEmailAddressPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierEmailSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierEmailAddressPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierPhoneSemine And ERP supplierPhoneNumberPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierPhoneSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierPhoneNumberPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierAccountNumberSemine And ERP bankAccountNumPOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierAccountNumberSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"bankAccountNumPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     var masterData = pm.response.json();\r",
									"\r",
									"//     var accountOcjects=pm.environment.get(\"accountOcjects\");\r",
									"//     console.log(pm.environment.get(\"accountOcjects\"));\r",
									"//     var failed=false;\r",
									"//     for(i in masterData){\r",
									"//         var findAccountObject=accountOcjects.find(x=>x.partyId===parseInt(masterData[i].externalId)&&(\r",
									"//             (x.isActive===true&&masterData[i].status===\"Active\")\r",
									"//         ||(x.isActive===false&&masterData[i].status===\"Inactive\")\r",
									"//         ))\r",
									"//         if(findAccountObject===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//        console.log(findAccountObject);\r",
									"//     }\r",
									"\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierAccountNumberStatusSemine And ERP bankAccountNumIsActivePOGO are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/search",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"suppliers",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-CustomerList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var customerCodesPOGO = [];\r",
									"// var customerNamesPOGO=[];\r",
									"// //console.log(ERPInvoiceNumber.customerName);\r",
									"// for (i in masterData) {\r",
									"// customerCodesPOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// customerNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"\r",
									"// customerCodesPOGO=customerCodesPOGO.sort(); \r",
									"// pm.environment.set(\"customerCodesPOGO\", customerCodesPOGO);\r",
									"// console.log(pm.environment.get(\"customerCodesPOGO\"));\r",
									"\r",
									"// customerNamesPOGO=customerNamesPOGO.sort();\r",
									"// pm.environment.set(\"customerNamesPOGO\", customerNamesPOGO);\r",
									"// console.log(pm.environment.get(\"customerNamesPOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{POGO}}/Customer/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Customer",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Customer Semine Check Code-Name-ExternalId-Relations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.code===parseInt(masterDataSemine[i].code))\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data Customer; codes are equal to POGO ERP's codes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.name===masterDataSemine[i].description[0].description)\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data Customer; names are equal to POGO ERP's names.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId));\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data Customer; externalIds are equal to POGO ERP's ids.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId))\r",
									"        //x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data Customer; relations are equal to POGO ERP's relationss.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// for(i in masterDataSemine){\r",
									"//         var findMasterData=masterDataPOGO.find(x=>\r",
									"//         x.code===parseInt(masterDataSemine[i].code)&& \r",
									"//         x.name===masterDataSemine[i].description[0].description&&\r",
									"//         x.id===parseInt(masterDataSemine[i].externalId));\r",
									"//         //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"//         //console.log(findMasterData);\r",
									"//         if(findMasterData===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//     }\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data Customer; codes, names and externalIds are equal to POGO ERP's codes, names and ids.\", function () {  \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									" //   });\r",
									"//\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var customerCodesSemine = [];\r",
									"// var customerNamesSemine=[];\r",
									"// var customerCodesSemineINT=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// var customerCodesSemine= parseInt(masterData[i].code) \r",
									"// customerCodesSemineINT.push(customerCodesSemine)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// customerNamesSemine.push(masterData[i].description)\r",
									"// }\r",
									"// customerCodesSemineINT=customerCodesSemineINT.sort();\r",
									"// pm.environment.set(\"customerCodesSemineINT\", customerCodesSemineINT);\r",
									"// console.log(pm.environment.get(\"customerCodesSemineINT\"));\r",
									"\r",
									"// pm.environment.set(\"customerNamesSemine\", customerNamesSemine);\r",
									"// customerNamesSemine=customerNamesSemine.sort();\r",
									"// console.log(pm.environment.get(\"customerNamesSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : CustomerCodesSemine And ERP customerCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"customerCodesSemineINT\"))).to.be.equal(JSON.stringify(pm.environment.get(\"customerCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : CustomerNamesSemine And ERP customerNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"customerNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"customerNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdCustomer}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdCustomer}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-DepartmentsList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var departmentCodesPOGO = [];\r",
									"// var departmentNamesPOGO=[];\r",
									"// //console.log(ERPInvoiceNumber.departmentName);\r",
									"// for (i in masterData) {\r",
									"// departmentCodesPOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// departmentNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"\r",
									"// departmentIdsPOGO=departmentCodesPOGO.sort(); \r",
									"// pm.environment.set(\"departmentCodesPOGO\", departmentCodesPOGO);\r",
									"// console.log(pm.environment.get(\"departmentCodesPOGO\"));\r",
									"\r",
									"// departmentNamesPOGO=departmentNamesPOGO.sort();\r",
									"// pm.environment.set(\"departmentNamesPOGO\", departmentNamesPOGO);\r",
									"// console.log(pm.environment.get(\"departmentNamesPOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Department/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Department",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionDepartment Semine Check Codes-Names-ExternalIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    \r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.code===masterDataSemine[i].code);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data DimensionDepartment; codes are equal to POGO ERP's codes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.name===masterDataSemine[i].description[0].description)\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data DimensionDepartment; names and externalIds are equal to POGO ERP's names and ids.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId))\r",
									"        //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data DimensionDepartment; relations are equal to POGO ERP's relations.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    \r",
									"}\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"     var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&((x.isActive==true&&masterDataSemine[i].status==\"Active\")||(x.isActive==false&&masterDataSemine[i].status==\"Inactive\")))\r",
									"         if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        }\r",
									"        console.log(findMasterData);\r",
									"\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data DimensionDepartment; statuses are equal to POGO ERP's isActive.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// for(i in masterDataSemine){\r",
									"//         var findMasterData=masterDataPOGO.find(x=>\r",
									"//         x.code===masterDataSemine[i].code&& \r",
									"//         x.name===masterDataSemine[i].description[0].description&&\r",
									"//         x.id===parseInt(masterDataSemine[i].externalId));\r",
									"//         //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"//         //console.log(findMasterData);\r",
									"//         if(findMasterData===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//     }\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data DimensionDepartment; codes, names and externalIds are equal to POGO ERP's codes, names and ids.\", function () {  \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"//     });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var departmentCodesSemine = [];\r",
									"// var departmentDescriptionsSemine=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// departmentCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// departmentDescriptionsSemine.push(masterData[i].description)\r",
									"// }\r",
									"// departmentCodesSemine=departmentCodesSemine.sort();\r",
									"// pm.environment.set(\"departmentCodesSemine\", departmentCodesSemine);\r",
									"// console.log(pm.environment.get(\"departmentCodesSemine\"));\r",
									"\r",
									"// pm.environment.set(\"departmentDescriptionsSemine\", departmentDescriptionsSemine);\r",
									"// departmentDescriptionsSemine=departmentDescriptionsSemine.sort();\r",
									"// console.log(pm.environment.get(\"departmentDescriptionsSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DepartmentCodesSemine And ERP DepartmentCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"departmentCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"departmentCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DepartmentDescriptionsSemine And ERP DepartmentNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"departmentDescriptionsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"departmentNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionDepartment}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionDepartment}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionDepartment Semine Check Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json().data;\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData=[];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===masterDataSemine[i].code&& \r",
									"        x.name===masterDataSemine[i].description&&\r",
									"        x.isActive===masterDataSemine[i].isActive);\r",
									"\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data DimensionDepartment; status is equal to POGO ERP's status.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var departmentCodesSemine = [];\r",
									"// var departmentDescriptionsSemine=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// departmentCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// departmentDescriptionsSemine.push(masterData[i].description)\r",
									"// }\r",
									"// departmentCodesSemine=departmentCodesSemine.sort();\r",
									"// pm.environment.set(\"departmentCodesSemine\", departmentCodesSemine);\r",
									"// console.log(pm.environment.get(\"departmentCodesSemine\"));\r",
									"\r",
									"// pm.environment.set(\"departmentDescriptionsSemine\", departmentDescriptionsSemine);\r",
									"// departmentDescriptionsSemine=departmentDescriptionsSemine.sort();\r",
									"// console.log(pm.environment.get(\"departmentDescriptionsSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DepartmentCodesSemine And ERP DepartmentCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"departmentCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"departmentCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DepartmentDescriptionsSemine And ERP DepartmentNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"departmentDescriptionsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"departmentNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionDepartment}}/values/devextreme",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionDepartment}}",
								"values",
								"devextreme"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-ProjectList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var masterData = pm.response.json().data;\r",
									"pm.environment.set(\"masterDataPOGO\", masterData);\r",
									"console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var projectCodesPOGO = [];\r",
									"// var projectNamesPOGO=[];\r",
									"// //console.log(ERPInvoiceNumber.projectName);\r",
									"// for (i in masterData) {\r",
									"// projectCodesPOGO.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// projectNamesPOGO.push(masterData[i].name)\r",
									"// }\r",
									"\r",
									"// projectIdsPOGO=projectCodesPOGO.sort(); \r",
									"// pm.environment.set(\"projectCodesPOGO\", projectCodesPOGO);\r",
									"// console.log(pm.environment.get(\"projectCodesPOGO\"));\r",
									"\r",
									"// projectNamesPOGO=projectNamesPOGO.sort();\r",
									"// pm.environment.set(\"projectNamesPOGO\", projectNamesPOGO);\r",
									"// console.log(pm.environment.get(\"projectNamesPOGO\"));\r",
									"\r",
									"// }\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Project/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Project",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionProject Semine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    \r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&& \r",
									"        x.code===masterDataSemine[i].code);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data DimensionProject; codes are equal to POGO ERP's codes.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"     for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&\r",
									"        x.name===masterDataSemine[i].description[0].description);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-Semine master Data DimensionProject; names are equal to POGO ERP's names.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId));\r",
									"        //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-Semine master Data DimensionProject; relations and externalIds are equal to POGO ERP's relations and ids.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"   \r",
									"}\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json();\r",
									"\r",
									"     var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        findMasterData=masterDataPOGO.find(x=>\r",
									"        x.id===parseInt(masterDataSemine[i].externalId)&&((x.status==2&&masterDataSemine[i].status==\"Active\")||(x.isActive==false&&masterDataSemine[i].status==\"Inactive\")))\r",
									"         if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        }\r",
									"        console.log(findMasterData);\r",
									"\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-Semine master Data DimensionProject; statuses are equal to POGO ERP's isActive.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// for(i in masterDataSemine){\r",
									"//         var findMasterData=masterDataPOGO.find(x=>\r",
									"//         x.code===masterDataSemine[i].code&& \r",
									"//         x.name===masterDataSemine[i].description[0].description&&\r",
									"//         x.id===parseInt(masterDataSemine[i].externalId));\r",
									"//         //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"//         //console.log(findMasterData);\r",
									"//         if(findMasterData===undefined){\r",
									"//             failed=true;\r",
									"//             break;\r",
									"//         }\r",
									"//         //console.log(findMasterData);\r",
									"//     }\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Semine master Data DimensionProject; codes, names and externalIds are equal to POGO ERP's codes, names and ids.\", function () {  \r",
									"//         pm.expect(failed).to.be.equal(false);\r",
									"//     });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var projectCodesSemine = [];\r",
									"// var projectDescriptionsSemine=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// projectCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// projectDescriptionsSemine.push(masterData[i].description)\r",
									"// }\r",
									"// projectCodesSemine=projectCodesSemine.sort();\r",
									"// pm.environment.set(\"projectCodesSemine\", projectCodesSemine);\r",
									"// console.log(pm.environment.get(\"projectCodesSemine\"));\r",
									"\r",
									"// pm.environment.set(\"projectDescriptionsSemine\", projectDescriptionsSemine);\r",
									"// projectDescriptionsSemine=projectDescriptionsSemine.sort();\r",
									"// console.log(pm.environment.get(\"projectDescriptionsSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : projectCodesSemine And ERP projectCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"projectCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"projectCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : projectDescriptionsSemine And ERP projectNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"projectDescriptionsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"projectNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionProject}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionProject}}",
								"values"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Master Data Into ERP",
			"item": [
				{
					"name": "IDP /connect/token POGO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            //console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            //console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"POGO\", \"https://api-demo.poweroffice.net\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDP /connect/token POGORefresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{TokenPOGORefresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-AccountingCode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('AccountingCodePOGO', moment().format(\"MMss\"));\r",
									"console.log(pm.environment.get('AccountingCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"AccountingCodeNamePOGO\", \"TestAccountingCodeSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"AccountingCodeIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"AccountingCodeNamePOGO\", jsonData.name);\r",
									"    pm.environment.set(\"AccountingCodeCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"AccountingCodeVatCode\", jsonData.vatCode);\r",
									"    pm.environment.set(\"AccountingCodeIsActivePOGO\", jsonData.isActive);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"AccountingCodeIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeVatCode\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeIsActivePOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{AccountingCodePOGO}}\",\r\n    \"name\": \"{{AccountingCodeNamePOGO}}\",\r\n    \"vatCode\": \"0\",\r\n    \"isVatCodeLockedAfterPosting\": false,\r\n    \"isDepartmentRequired\": false,\r\n    \"isProjectRequired\": false,\r\n    \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POGO}}/GeneralLedgerAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"GeneralLedgerAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Supplier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('SupplierCodePOGO', moment().format(\"2MMss\"));\r",
									"console.log(pm.environment.get('SupplierCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"SupplierNamePOGO\", \"TestSupplierSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"SupplierIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"SupplierNamePOGO\", jsonData.name);\r",
									"    pm.environment.set(\"SupplierCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"SupplierVatNumberPOGO\", jsonData.vatNumber);\r",
									"    pm.environment.set(\"SupplierWebsiteUrlPOGO\", jsonData.websiteUrl);\r",
									"    pm.environment.set(\"SupplierCurrencyCodePOGO\", jsonData.currencyCode);\r",
									"    pm.environment.set(\"SupplierCityPOGO\", jsonData.mailAddress.city);\r",
									"    pm.environment.set(\"SupplierZipCodePOGO\", jsonData.mailAddress.zipCode);\r",
									"    pm.environment.set(\"SupplierAddress1POGO\", jsonData.mailAddress.address1);\r",
									"    pm.environment.set(\"CustomerCountryCodePOGO\", jsonData.mailAddress.countryCode);\r",
									"    pm.environment.set(\"SupplierEmailAddressPOGO\", jsonData.emailAddress);\r",
									"    pm.environment.set(\"SupplierPhoneNumberPOGO\", jsonData.phoneNumber);\r",
									"\r",
									"    pm.environment.set(\"SupplierreportInternationalIdPOGO\", jsonData.reportInternationalId);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"SupplierIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierVatNumberPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierWebsiteUrlPOGO\"));\r",
									"\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierCurrencyCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierCityPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierZipCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierAddress1POGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCountryCodePOGO\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierEmailAddressPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierPhoneNumberPOGO\"));\r",
									"\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierreportInternationalIdPOGO\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{SupplierNamePOGO}}\",\r\n    \"legalName\": \"{{SupplierNamePOGO}}\",\r\n    \"vatNumber\": \"0\",\r\n    \"websiteUrl\": \"{{SemineWebSite}}\",\r\n    \"isPerson\": false,\r\n    \"currencyCode\": \"NOK\",\r\n    \"code\": {{SupplierCodePOGO}},\r\n    \"mailAddress\": {\r\n        \"city\": \"{{City}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"address1\": \"{{address1}}\",\r\n        \"countryCode\": \"{{CountryCode}}\",\r\n        \"isPrimary\": false\r\n    },\r\n    \"streetAddresses\": [],\r\n    \"emailAddress\": \"{{EmailAddress}}\",\r\n    \"phoneNumber\": \"{{PhoneNumber}}\",\r\n    \"isArchived\": false,\r\n    \"reportInternationalId\": false,\r\n    \"internationalIdType\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POGO}}/Supplier/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-BankAccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('BankAccountCodePOGO', moment().subtract(3, \"day\").format(\"221YYYYMMDD\"));\r",
									"console.log(pm.environment.get('BankAccountCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"BankAccountNamePOGO\", \"TestBankAccountSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"BankAccountIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"BankAccountPartyIdPOGO\", jsonData.partyId);\r",
									"    pm.environment.set(\"BankAccountCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"BankAccountIsActivePOGO\", jsonData.isActive);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"BankAccountIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountPartyIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountCodePOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountIsActivePOGO\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{BankAccountCodePOGO}}\",\r\n    \"countryCode\":\"{{CountryCode}}\",\r\n    \"isActive\": true\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Supplier/{{SupplierIdPOGO}}/BankAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								"{{SupplierIdPOGO}}",
								"BankAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('CustomerCodePOGO', moment().format(\"1MMss\"));\r",
									"console.log(pm.environment.get('CustomerCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"CustomerNamePOGO\", \"TestCustomerSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"CustomerIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"CustomerNamePOGO\", jsonData.name);\r",
									"    pm.environment.set(\"CustomerCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"CustomerInvoiceEmailAddressPOGO\", jsonData.invoiceEmailAddress);\r",
									"    pm.environment.set(\"CustomerVatNumberPOGO\", jsonData.invoiceEmailAddress);\r",
									"    pm.environment.set(\"CustomerWebsiteUrlPOGO\", jsonData.websiteUrl);\r",
									"    pm.environment.set(\"CustomerCity\", jsonData.mailAddress.city);\r",
									"    pm.environment.set(\"CustomerZipCode\", jsonData.mailAddress.zipCode);\r",
									"    pm.environment.set(\"CustomerAddress1\", jsonData.mailAddress.address1);\r",
									"    pm.environment.set(\"CustomerCountryCode\", jsonData.mailAddress.countryCode);\r",
									"    pm.environment.set(\"CustomerEmailAddress\", jsonData.emailAddress);\r",
									"    pm.environment.set(\"CustomerPhoneNumber\", jsonData.phoneNumber);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"CustomerIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerInvoiceEmailAddressPOGO\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"CustomerVatNumberPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerWebsiteUrlPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCity\"));\r",
									"    // console.log(pm.environment.get(\"CustomerZipCode\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"CustomerAddress1\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCountryCode\"));\r",
									"    // console.log(pm.environment.get(\"CustomerEmailAddress\"));\r",
									"    // console.log(pm.environment.get(\"CustomerPhoneNumber\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"invoiceDeliveryType\": 1,\r\n    \"isVatFree\": false,\r\n    \"invoiceEmailAddress\": \"{{EmailAddress}}\",\r\n    \"useFactoring\": true,\r\n    \"sendReminders\": true,\r\n    \"doNotAddLatePaymentFees\": false,\r\n    \"doNotAddLatePaymentInterest\": false,\r\n    \"reminderEmailAddress\": \"\",\r\n    \"transferToDebtCollectionAgency\": true,\r\n    \"name\": \"{{CustomerNamePOGO}}\",\r\n    \"legalName\": \"{{CustomerNamePOGO}}\",\r\n    \"vatNumber\": 0,\r\n    \"websiteUrl\": \"semine.no\",\r\n    \"since\": \"2021-12-03\",\r\n    \"code\": \"{{CustomerCodePOGO}}\",\r\n    \"mailAddress\": {\r\n        \"city\": \"{{City}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"address1\": \"{{address1}}\",\r\n        \"countryCode\": \"{{CountryCode}}\",\r\n        \"isPrimary\": false\r\n    },\r\n    \"streetAddresses\": [],\r\n    \"emailAddress\": \"{{EmailAddress}}\",\r\n    \"phoneNumber\": \"{{PhoneNumber}}\",\r\n    \"isArchived\": false,\r\n    \"reportInternationalId\": false,\r\n    \"internationalIdType\": 0\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Customer/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Customer",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Department",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('DepartmentCodePOGO', moment().format(\"1MMss\"));\r",
									"console.log(pm.environment.get('DepartmentCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"DepartmentNamePOGO\", \"TestDepartmentSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"DepartmentIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"DepartmentNamePOGO\", jsonData.name);\r",
									"    //pm.environment.set(\"DepartmentCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"DepartmentIsActivePOGO\", jsonData.isActive);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"DepartmentIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentNamePOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentCodePOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentIsActivePOGO\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{DepartmentNamePOGO}}\",\r\n    \"code\": \"{{DepartmentCodePOGO}}\",\r\n    \"isActive\": true\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Department/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Department",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('ProjectCodePOGO', moment().format(\"1MMss\"));\r",
									"console.log(pm.environment.get('ProjectCodePOGO'))\r",
									"\r",
									"pm.environment.set(\"ProjectNamePOGO\", \"TestProjectSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"ProjectIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"ProjectNamePOGO\", jsonData.name);\r",
									"    pm.environment.set(\"ProjectCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"ProjectCustomerCodePOGO\", jsonData.customerCode);\r",
									"    pm.environment.set(\"ProjectStatusPOGO\", jsonData.status);\r",
									"    pm.environment.set(\"ProjectProgressPOGO\", jsonData.progress);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"ProjectIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectCustomerCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectStatusPOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectProgressPOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerCode\": \"{{CustomerCodePOGO}}\",\r\n    \"code\": \"{{ProjectCodePOGO}}\",\r\n    \"name\": \"{{ProjectNamePOGO}}\",\r\n    \"isBillable\": true,\r\n    \"status\": 2,\r\n    \"isInternal\": false,\r\n    \"progress\": 40,\r\n    \"purchaseOrderNo\": \"\",\r\n    \"attachExpenseVouchersWhenBilling\": false,\r\n    \"billingMethod\": 1,\r\n    \"billingHourlyRateSpecification\": 2,\r\n    \"fixedPrice\": 0\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Project/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Project",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				}
			]
		},
		{
			"name": "ReSyncData From ERP",
			"item": [
				{
					"name": "Get Data From ERP",
					"item": [
						{
							"name": "Sync Job",
							"item": [
								{
									"name": "PWA /Integration Sync Supplier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}\r\n"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{supplierSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync AccountingCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{accountingCodeSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{customerSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Dimension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{dimensionSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync DimensionValue",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{dimensionValueSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Vatcode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{vatCodeSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "--- Sleep 5 min---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(300);  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Check Created Master Data into POGO",
			"item": [
				{
					"name": "PWA /values//ID 1 - LedgerSemine Check Code-Description-Id-Relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"//////// Check Data Which came from ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var x;\r",
									"\r",
									"    for (x in jsonData) {\r",
									"        if (jsonData[x].externalId == pm.environment.get(\"AccountingCodeIdPOGO\")) {\r",
									"            jsonDataERP=jsonData[x];\r",
									"            break;\r",
									"       \r",
									"    }\r",
									"    }\r",
									"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : The account which is created in the POGO is found in the SEMINE. \", function () {  \r",
									"        pm.expect(jsonDataERP).to.have.property(\"code\", pm.environment.get(\"AccountingCodePOGO\"));\r",
									"        pm.expect(jsonDataERP.description[0]).to.have.property(\"description\", pm.environment.get(\"AccountingCodeNamePOGO\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"status\", \"Active\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// console.log(pm.environment.get(\"AccountingCodePOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Suppliers Semine Chack All fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var x;\r",
									"\r",
									"    for (x in jsonData) {\r",
									"        if (jsonData[x].externalId == pm.environment.get(\"SupplierIdPOGO\")) {\r",
									"            jsonDataERP=jsonData[x];\r",
									"            break;\r",
									"    }\r",
									"    }\r",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier which is created in the POGO is found in the SEMINE.\", function () { \r",
									"        pm.expect(jsonDataERP).to.have.property(\"erpVendorId\", String(pm.environment.get(\"SupplierCodePOGO\")));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"name\", pm.environment.get(\"SupplierNamePOGO\"));\r",
									"        pm.expect(jsonDataERP.bankAccounts[0]).to.have.property(\"accountNumber\", pm.environment.get(\"BankAccountCodePOGO\"));\r",
									"        pm.expect(jsonDataERP.bankAccounts[0]).to.have.property(\"status\", \"Active\");\r",
									"        pm.expect(jsonDataERP).to.have.property(\"country\", pm.collectionVariables.get(\"CountryCode\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"city\", pm.collectionVariables.get(\"City\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"street\", pm.collectionVariables.get(\"address1\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"zip\", pm.collectionVariables.get(\"ZipCode\"));\r",
									"\r",
									"        pm.expect(jsonDataERP).to.have.property(\"name\", pm.environment.get(\"SupplierNamePOGO\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"vatId\", \"0\");\r",
									"\r",
									"        pm.expect(jsonDataERP).to.have.property(\"email\", pm.collectionVariables.get(\"EmailAddress\"));\r",
									"\r",
									"        pm.expect(jsonDataERP).to.have.property(\"externalId\", String(pm.environment.get(\"BankAccountPartyIdPOGO\")));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"status\", \"Active\");\r",
									"    });\r",
									"    \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/search",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"suppliers",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Customer Semine Check Code-Name-ExternalId-Relations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var x;\r",
									"\r",
									"    for (x in jsonData) {\r",
									"        if (jsonData[x].externalId == pm.environment.get(\"CustomerIdPOGO\")) {\r",
									"            jsonDataERP=jsonData[x];\r",
									"            break;\r",
									"    }\r",
									"    }\r",
									"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Customer which is created in the POGO is found in the SEMINE.\", function () {\r",
									"    \r",
									"        pm.expect(jsonDataERP).to.have.property(\"code\", String(pm.environment.get(\"CustomerCodePOGO\")));\r",
									"        pm.expect(jsonDataERP.description[0]).to.have.property(\"description\", pm.environment.get(\"CustomerNamePOGO\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"status\", \"Active\");\r",
									"    });    \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdCustomer}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdCustomer}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionDepartment Semine Check Codes-Names-ExternalIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var x;\r",
									"\r",
									"    for (x in jsonData) {\r",
									"        if (jsonData[x].externalId == pm.environment.get(\"DepartmentIdPOGO\")) {\r",
									"            jsonDataERP=jsonData[x];\r",
									"            break;\r",
									"    }\r",
									"    }\r",
									"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionDepartment which is created in the POGO is found in the SEMINE.\", function () {\r",
									"    \r",
									"        pm.expect(jsonDataERP).to.have.property(\"code\", String(pm.environment.get(\"DepartmentCodePOGO\")));\r",
									"        pm.expect(jsonDataERP.description[0]).to.have.property(\"description\", pm.environment.get(\"DepartmentNamePOGO\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"status\", \"Active\");\r",
									"    });    \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionDepartment}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionDepartment}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionProject Semine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var x;\r",
									"\r",
									"    for (x in jsonData) {\r",
									"        if (jsonData[x].externalId == pm.environment.get(\"ProjectIdPOGO\")) {\r",
									"            jsonDataERP=jsonData[x];\r",
									"            break;\r",
									"    }\r",
									"    }\r",
									"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DimensionProject which is created in the POGO is found in the SEMINE.\", function () {\r",
									"    \r",
									"        pm.expect(jsonDataERP).to.have.property(\"code\", String(pm.environment.get(\"ProjectCodePOGO\")));\r",
									"        pm.expect(jsonDataERP.description[0]).to.have.property(\"description\", pm.environment.get(\"ProjectNamePOGO\"));\r",
									"        pm.expect(jsonDataERP).to.have.property(\"status\", \"Active\");\r",
									"    });    \r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionProject}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionProject}}",
								"values"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change status of Master Data in the ERP",
			"item": [
				{
					"name": "IDP /connect/token POGO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            //console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            //console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"POGO\", \"https://api-demo.poweroffice.net\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDP /connect/token POGORefresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{TokenPOGORefresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-AccountingCode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('AccountingCodePOGO', moment().format(\"MMss\"));\r",
									"// console.log(pm.environment.get('AccountingCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"AccountingCodeNamePOGO\", \"TestAccountingCodeSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var i;\r",
									"\r",
									"for(i in jsonData){\r",
									"    pm.environment.set(\"AccountingCodeIdPOGO\", jsonData.id);\r",
									"    pm.environment.set(\"AccountingCodeNamePOGO\", jsonData.name);\r",
									"    pm.environment.set(\"AccountingCodeCodePOGO\", jsonData.code);\r",
									"    pm.environment.set(\"AccountingCodeVatCode\", jsonData.vatCode);\r",
									"    pm.environment.set(\"AccountingCodeIsActivePOGO\", jsonData.isActive);\r",
									"    }\r",
									"    }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"AccountingCodeIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeVatCode\"));\r",
									"    // console.log(pm.environment.get(\"AccountingCodeIsActivePOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{AccountingCodeIdPOGO}},\r\n    \"code\": \"{{AccountingCodePOGO}}\",\r\n    \"name\": \"{{AccountingCodeNamePOGO}}\",\r\n    \"vatCode\": \"0\",\r\n    \"isVatCodeLockedAfterPosting\": false,\r\n    \"isDepartmentRequired\": false,\r\n    \"isProjectRequired\": false,\r\n    \"isActive\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POGO}}/GeneralLedgerAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"GeneralLedgerAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Supplier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('SupplierCodePOGO', moment().format(\"2MMss\"));\r",
									"// console.log(pm.environment.get('SupplierCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"SupplierNamePOGO\", \"TestSupplierSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var jsonData = pm.response.json().data;\r",
									"// var i;\r",
									"\r",
									"// for(i in jsonData){\r",
									"//     pm.environment.set(\"SupplierIdPOGO\", jsonData.id);\r",
									"//     pm.environment.set(\"SupplierNamePOGO\", jsonData.name);\r",
									"//     pm.environment.set(\"SupplierCodePOGO\", jsonData.code);\r",
									"//     pm.environment.set(\"SupplierVatNumberPOGO\", jsonData.vatNumber);\r",
									"//     pm.environment.set(\"SupplierWebsiteUrlPOGO\", jsonData.websiteUrl);\r",
									"//     pm.environment.set(\"SupplierCurrencyCodePOGO\", jsonData.currencyCode);\r",
									"//     pm.environment.set(\"SupplierCityPOGO\", jsonData.mailAddress.city);\r",
									"//     pm.environment.set(\"SupplierZipCodePOGO\", jsonData.mailAddress.zipCode);\r",
									"//     pm.environment.set(\"SupplierAddress1POGO\", jsonData.mailAddress.address1);\r",
									"//     pm.environment.set(\"CustomerCountryCodePOGO\", jsonData.mailAddress.countryCode);\r",
									"//     pm.environment.set(\"SupplierEmailAddressPOGO\", jsonData.emailAddress);\r",
									"//     pm.environment.set(\"SupplierPhoneNumberPOGO\", jsonData.phoneNumber);\r",
									"\r",
									"//     pm.environment.set(\"SupplierreportInternationalIdPOGO\", jsonData.reportInternationalId);\r",
									"//     }\r",
									"//     }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"SupplierIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierVatNumberPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierWebsiteUrlPOGO\"));\r",
									"\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierCurrencyCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierCityPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierZipCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierAddress1POGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCountryCodePOGO\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierEmailAddressPOGO\"));\r",
									"    // console.log(pm.environment.get(\"SupplierPhoneNumberPOGO\"));\r",
									"\r",
									"\r",
									"    // console.log(pm.environment.get(\"SupplierreportInternationalIdPOGO\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{SupplierIdPOGO}},\r\n    \"name\": \"{{SupplierNamePOGO}}\",\r\n    \"legalName\": \"{{SupplierNamePOGO}}\",\r\n    \"vatNumber\": \"0\",\r\n    \"websiteUrl\": \"{{SemineWebSite}}\",\r\n    \"isPerson\": false,\r\n    \"currencyCode\": \"NOK\",\r\n    \"code\": {{SupplierCodePOGO}},\r\n    \"mailAddress\": {\r\n        \"city\": \"{{City}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"address1\": \"{{address1}}\",\r\n        \"countryCode\": \"{{CountryCode}}\",\r\n        \"isPrimary\": false\r\n    },\r\n    \"streetAddresses\": [],\r\n    \"emailAddress\": \"{{EmailAddress}}\",\r\n    \"phoneNumber\": \"{{PhoneNumber}}\",\r\n    \"isArchived\": true,\r\n    \"reportInternationalId\": false,\r\n    \"internationalIdType\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{POGO}}/Supplier/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-BankAccount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('BankAccountCodePOGO', moment().format(\"221YYYYMMDD\"));\r",
									"// console.log(pm.environment.get('BankAccountCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"BankAccountNamePOGO\", \"TestBankAccountSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var jsonData = pm.response.json().data;\r",
									"// var i;\r",
									"\r",
									"// for(i in jsonData){\r",
									"//     pm.environment.set(\"BankAccountIdPOGO\", jsonData.id);\r",
									"//     pm.environment.set(\"BankAccountPartyIdPOGO\", jsonData.partyId);\r",
									"//     pm.environment.set(\"BankAccountCodePOGO\", jsonData.code);\r",
									"//     pm.environment.set(\"BankAccountIsActivePOGO\", jsonData.isActive);\r",
									"//     }\r",
									"//     }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"BankAccountIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountPartyIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountCodePOGO\"))\r",
									"    // console.log(pm.environment.get(\"BankAccountIsActivePOGO\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{BankAccountIdPOGO}},\r\n    \"code\": \"{{BankAccountCodePOGO}}\",\r\n    \"countryCode\": \"{{CountryCode}}\",\r\n    \"isActive\": false\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Supplier/{{SupplierIdPOGO}}/BankAccount/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								"{{SupplierIdPOGO}}",
								"BankAccount",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('CustomerCodePOGO', moment().format(\"1MMss\"));\r",
									"// console.log(pm.environment.get('CustomerCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"CustomerNamePOGO\", \"TestCustomerSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var jsonData = pm.response.json().data;\r",
									"// var i;\r",
									"\r",
									"// for(i in jsonData){\r",
									"//     pm.environment.set(\"CustomerIdPOGO\", jsonData.id);\r",
									"//     pm.environment.set(\"CustomerNamePOGO\", jsonData.name);\r",
									"//     pm.environment.set(\"CustomerCodePOGO\", jsonData.code);\r",
									"//     pm.environment.set(\"CustomerInvoiceEmailAddressPOGO\", jsonData.invoiceEmailAddress);\r",
									"//     pm.environment.set(\"CustomerVatNumberPOGO\", jsonData.invoiceEmailAddress);\r",
									"//     pm.environment.set(\"CustomerWebsiteUrlPOGO\", jsonData.websiteUrl);\r",
									"//     pm.environment.set(\"CustomerCity\", jsonData.mailAddress.city);\r",
									"//     pm.environment.set(\"CustomerZipCode\", jsonData.mailAddress.zipCode);\r",
									"//     pm.environment.set(\"CustomerAddress1\", jsonData.mailAddress.address1);\r",
									"//     pm.environment.set(\"CustomerCountryCode\", jsonData.mailAddress.countryCode);\r",
									"//     pm.environment.set(\"CustomerEmailAddress\", jsonData.emailAddress);\r",
									"//     pm.environment.set(\"CustomerPhoneNumber\", jsonData.phoneNumber);\r",
									"//     }\r",
									"//     }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"CustomerIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerInvoiceEmailAddressPOGO\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"CustomerVatNumberPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerWebsiteUrlPOGO\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCity\"));\r",
									"    // console.log(pm.environment.get(\"CustomerZipCode\"));\r",
									"\r",
									"    // console.log(pm.environment.get(\"CustomerAddress1\"));\r",
									"    // console.log(pm.environment.get(\"CustomerCountryCode\"));\r",
									"    // console.log(pm.environment.get(\"CustomerEmailAddress\"));\r",
									"    // console.log(pm.environment.get(\"CustomerPhoneNumber\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{CustomerIdPOGO}},\r\n    \"invoiceDeliveryType\": 1,\r\n    \"isVatFree\": false,\r\n    \"invoiceEmailAddress\": \"{{EmailAddress}}\",\r\n    \"useFactoring\": true,\r\n    \"sendReminders\": true,\r\n    \"doNotAddLatePaymentFees\": false,\r\n    \"doNotAddLatePaymentInterest\": false,\r\n    \"reminderEmailAddress\": \"\",\r\n    \"transferToDebtCollectionAgency\": true,\r\n    \"name\": \"{{CustomerNamePOGO}}\",\r\n    \"legalName\": \"{{CustomerNamePOGO}}\",\r\n    \"vatNumber\": 0,\r\n    \"websiteUrl\": \"semine.no\",\r\n    \"since\": \"2021-12-03\",\r\n    \"code\": \"{{CustomerCodePOGO}}\",\r\n    \"mailAddress\": {\r\n        \"city\": \"{{City}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"address1\": \"{{address1}}\",\r\n        \"countryCode\": \"{{CountryCode}}\",\r\n        \"isPrimary\": false\r\n    },\r\n    \"streetAddresses\": [],\r\n    \"emailAddress\": \"{{EmailAddress}}\",\r\n    \"phoneNumber\": \"{{PhoneNumber}}\",\r\n    \"isArchived\": true,\r\n    \"reportInternationalId\": false,\r\n    \"internationalIdType\": 0\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Customer/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Customer",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Department",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('DepartmentCodePOGO', moment().format(\"1MMss\"));\r",
									"// console.log(pm.environment.get('DepartmentCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"DepartmentNamePOGO\", \"TestDepartmentSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var jsonData = pm.response.json().data;\r",
									"// var i;\r",
									"\r",
									"// for(i in jsonData){\r",
									"//     pm.environment.set(\"DepartmentIdPOGO\", jsonData.id);\r",
									"//     pm.environment.set(\"DepartmentNamePOGO\", jsonData.name);\r",
									"//     //pm.environment.set(\"DepartmentCodePOGO\", jsonData.code);\r",
									"//     pm.environment.set(\"DepartmentIsActivePOGO\", jsonData.isActive);\r",
									"//     }\r",
									"//     }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"DepartmentIdPOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentNamePOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentCodePOGO\"))\r",
									"    // console.log(pm.environment.get(\"DepartmentIsActivePOGO\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{DepartmentIdPOGO}},\r\n    \"name\": \"{{DepartmentNamePOGO}}\",\r\n    \"code\": \"{{DepartmentCodePOGO}}\",\r\n    \"isActive\": false\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Department/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Department",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const moment = require('moment');\r",
									"// pm.environment.set('ProjectCodePOGO', moment().format(\"1MMss\"));\r",
									"// console.log(pm.environment.get('ProjectCodePOGO'))\r",
									"\r",
									"// pm.environment.set(\"ProjectNamePOGO\", \"TestProjectSemine-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var jsonData = pm.response.json().data;\r",
									"// var i;\r",
									"\r",
									"// for(i in jsonData){\r",
									"//     pm.environment.set(\"ProjectIdPOGO\", jsonData.id);\r",
									"//     pm.environment.set(\"ProjectNamePOGO\", jsonData.name);\r",
									"//     pm.environment.set(\"ProjectCodePOGO\", jsonData.code);\r",
									"//     pm.environment.set(\"ProjectCustomerCodePOGO\", jsonData.customerCode);\r",
									"//     pm.environment.set(\"ProjectStatusPOGO\", jsonData.status);\r",
									"//     pm.environment.set(\"ProjectProgressPOGO\", jsonData.progress);\r",
									"//     }\r",
									"//     }\r",
									"    \r",
									"    // console.log(pm.environment.get(\"ProjectIdPOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectNamePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectCustomerCodePOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectStatusPOGO\"));\r",
									"    // console.log(pm.environment.get(\"ProjectProgressPOGO\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{ProjectIdPOGO}},\r\n    \"customerCode\": \"{{CustomerCodePOGO}}\",\r\n    \"code\": \"{{ProjectCodePOGO}}\",\r\n    \"name\": \"{{ProjectNamePOGO}}\",\r\n    \"isBillable\": true,\r\n    \"status\": 4,\r\n    \"isInternal\": false,\r\n    \"progress\": 40,\r\n    \"purchaseOrderNo\": \"\",\r\n    \"attachExpenseVouchersWhenBilling\": false,\r\n    \"billingMethod\": 1,\r\n    \"billingHourlyRateSpecification\": 2,\r\n    \"fixedPrice\": 0\r\n}"
						},
						"url": {
							"raw": "{{POGO}}/Project/",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Project",
								""
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				}
			]
		},
		{
			"name": "ReSyncData From ERP",
			"item": [
				{
					"name": "Get Data From ERP",
					"item": [
						{
							"name": "Sync Job",
							"item": [
								{
									"name": "PWA /Integration Sync Supplier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}\r\n"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{supplierSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{supplierSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync AccountingCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{accountingCodeSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{accountingCodeSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{customerSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{customerSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Dimension",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{dimensionSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync DimensionValue",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{dimensionValueSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{dimensionValueSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "PWA /Integration Sync Vatcode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINTENGAd}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{vatCodeSyncId}}/start",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"integrations",
												"{{newIntegrationId}}",
												"jobs",
												"{{vatCodeSyncId}}",
												"start"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "--- Sleep 5 min---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(300);  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Check Inactiveted  Master Data in SEMINE",
			"item": [
				{
					"name": "PWA /values//ID 1 - LedgerSemine Check Code-Description-Id-Relation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//////// Check Data in the Semine Which is inactiveted in the ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var i;\r",
									"    var failed=false;\r",
									"    for(i in jsonData){\r",
									"        if(jsonData[i].externalId == parseInt(pm.environment.get(\"AccountingCodeIdPOGO\"))){\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        \r",
									"        if(jsonDataERP=undefined){\r",
									"            failed=false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-The account which is changed status to inActive in the POGO is removed from SEMINE.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"//console.log(jsonDataERP);\r",
									"}\r",
									"console.log(pm.environment.get(\"AccountingCodeIdPOGO\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Suppliers Semine Chack All fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//////// Check Data in the Semine Which is inactiveted in the ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var i;\r",
									"    var failed=false;\r",
									"    for(i in jsonData){\r",
									"        if(jsonData[i].externalId == parseInt(pm.environment.get(\"SupplierIdPOGO\"))){\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        \r",
									"        if(jsonDataERP=undefined){\r",
									"            failed=false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-The supplier which is changed status to inActive in the POGO is removed from SEMINE.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"//console.log(jsonDataERP);\r",
									"}\r",
									"console.log(pm.environment.get(\"SupplierIdPOGO\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/search",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"suppliers",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Customer Semine Check Code-Name-ExternalId-Relations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//////// Check Data in the Semine Which is inactiveted in the ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var i;\r",
									"    var failed=false;\r",
									"    for(i in jsonData){\r",
									"        if(jsonData[i].externalId == parseInt(pm.environment.get(\"CustomerIdPOGO\"))){\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        \r",
									"        if(jsonDataERP=undefined){\r",
									"            failed=false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-The Customer which is changed status to inActive in the POGO is removed from SEMINE.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"//console.log(jsonDataERP);\r",
									"}\r",
									"console.log(pm.environment.get(\"CustomerIdPOGO\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdCustomer}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdCustomer}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionDepartment Semine Check Codes-Names-ExternalIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//////// Check Data in the Semine Which is inactiveted in the ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var i;\r",
									"    var failed=false;\r",
									"    for(i in jsonData){\r",
									"        if(jsonData[i].externalId == parseInt(pm.environment.get(\"DepartmentIdPOGO\"))){\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        \r",
									"        if(jsonDataERP=undefined){\r",
									"            failed=false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-The Customer which is changed status to inActive in the POGO is removed from SEMINE.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"//console.log(jsonDataERP);\r",
									"}\r",
									"console.log(pm.environment.get(\"DepartmentIdPOGO\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionDepartment}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionDepartment}}",
								"values"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionProject Semine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//////// Check Data in the Semine Which is inactiveted in the ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    const jsonData = pm.response.json();\r",
									"    var jsonDataERP;\r",
									"    var i;\r",
									"    var failed=false;\r",
									"    for(i in jsonData){\r",
									"        if(jsonData[i].externalId == parseInt(pm.environment.get(\"ProjectIdPOGO\"))){\r",
									"            jsonDataERP=jsonData[i];\r",
									"            console.log(jsonDataERP);\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        \r",
									"        if(jsonDataERP=undefined){\r",
									"            failed=false;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-The Customer which is changed status to inActive in the POGO is removed from SEMINE.\", function () {\r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"       \r",
									"    });\r",
									"\r",
									"//console.log(jsonDataERP);\r",
									"}\r",
									"console.log(pm.environment.get(\"ProjectIdPOGO\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionProject}}/values",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionProject}}",
								"values"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Data in the POGO",
			"item": [
				{
					"name": "IDP /connect/token POGO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            //console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            //console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"POGO\", \"https://api-demo.poweroffice.net\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDP /connect/token POGORefresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try N times\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"\r",
									"\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"\r",
									"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"    if (pm.response.code == 200) {\r",
									"        if (pm.response.json().access_token != null) {\r",
									"\r",
									"            // If we get a token, pass test and go directly to the next request\r",
									"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGO\", pm.response.json().access_token);\r",
									"            pm.environment.set(\"TokenPOGORefresh\", pm.response.json().refresh_token);\r",
									"            console.log(pm.environment.get(\"TokenPOGO\"));\r",
									"            console.log(pm.environment.get(\"TokenPOGORefresh\"));\r",
									"            postman.setNextRequest();\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
									"            return;\r",
									"        } else {\r",
									"            // Try again if tryCounter < tryCounterLimit\r",
									"            tryCounter++;\r",
									"            pm.globals.set(\"tryCounter\", tryCounter);\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"        }\r",
									"    } else {\r",
									"        // Try again if tryCounter < tryCounterLimit\r",
									"        tryCounter++;\r",
									"        pm.globals.set(\"tryCounter\", tryCounter);\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"    }\r",
									"} else {\r",
									"    // Fail after 10 tries\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
									"\r",
									"    postman.setNextRequest();\r",
									"}\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "application",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "client",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Basic YzhkOGYxNTMtMjFhMC00ZDEzLTgzOWItZTc1MjNlOTM2ZGJmOjllZjU1MjVhLWE0ZjMtNDAyZi1iYWU2LTdiM2Q1NzdjMjllZQ==",
								"type": "text"
							},
							{
								"key": "applicationkey",
								"value": "OGQ4ZjE1My0yMWEwLTRkMTMtODM5Yi1lNzUyM2U5MzZkYmY=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "clientkey",
								"value": "OWVmNTUyNWEtYTRmMy00MDJmLWJhZTYtN2IzZDU3N2MyOWVl",
								"type": "text",
								"disabled": true
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{TokenPOGORefresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{POGO}}/OAuth/Token",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"OAuth",
								"Token"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /POGO-BankAccounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Supplier/{{SupplierIdPOGO}}/BankAccount/{{BankAccountIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								"{{SupplierIdPOGO}}",
								"BankAccount",
								"{{BankAccountIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Suppliers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Supplier/{{SupplierIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Supplier",
								"{{SupplierIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-AccountingCodes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/GeneralLedgerAccount/{{AccountingCodeIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"GeneralLedgerAccount",
								"{{AccountingCodeIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Customers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{POGO}}/Customer/{{CustomerIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Customer",
								"{{CustomerIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Departments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Department/{{DepartmentIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Department",
								"{{DepartmentIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "PWA /POGO-Projects",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenPOGO}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "charset",
								"value": "utf-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{POGO}}/Project/{{ProjectIdPOGO}}",
							"host": [
								"{{POGO}}"
							],
							"path": [
								"Project",
								"{{ProjectIdPOGO}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete-InActive Integration Engine",
			"item": [
				{
					"name": "InActive",
					"item": [
						{
							"name": "---PWA /Integrations-InActive---",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"if (pm.response.code == 200) {\r",
											"   const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataInt1;\r",
											"    var i;\r",
											"\r",
											"     if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
											"            var jsonDataInt1 =jsonData;  \r",
											"}\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New powerOfficeGo Integration is InActive.\", function () {\r",
											"    pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
											"    pm.expect(jsonDataInt1).to.have.property(\"status\", \"InActive\");\r",
											"    pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"powerOfficeGoPluginId\"));\r",
											"});\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{newIntegrationName}}\",\n    \"status\": \"InActive\",\n    \"pluginId\": \"{{powerOfficeGoPluginId}}\"\n}"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"integrations",
										"{{newIntegrationId}}"
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "--- Skip to END ---",
			"item": [
				{
					"name": "--- Skip to END ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// console.log('--- Skipping to END ---');\r",
									"postman.setNextRequest(\"--- END ---\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "--- Skip to END ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// console.log('--- Skipping to END ---');\r",
									"postman.setNextRequest(\"--- END ---\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "---PWA /Integration Delete---",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404, 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 400]);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"   const jsonData = pm.response.json();\r",
									"   console.log(jsonData);\r",
									"\r",
									"    var jsonDataInt1;\r",
									"    var i;\r",
									"\r",
									"     if (jsonData.name == pm.environment.get(\"newIntegrationName\")) {\r",
									"        jsonDataInt1 =jsonData;  \r",
									"}\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : New TFSO Integration is Deleted.\", function () {\r",
									"    pm.expect(jsonDataInt1).to.have.property(\"id\", pm.environment.get(\"newIntegrationId\"));\r",
									"    pm.expect(jsonDataInt1).to.have.property(\"status\", \"Deleted\");\r",
									"    pm.expect(jsonDataInt1).to.have.property(\"pluginId\", pm.environment.get(\"24SevenOfficePluginId\"));\r",
									"});\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINTENGAd}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{newIntegrationId}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"integrations",
								"{{newIntegrationId}}"
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				}
			]
		},
		{
			"name": "Logs-Devex",
			"item": [
				{
					"name": "PWA /integration/Job/logs-SyncInvoice All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var jsonData = pm.response.json().data;\r",
									"var jsonDataInt;\r",
									"\r",
									"for(i in jsonData){\r",
									"      if(jsonData[i].completionCode ==\"Unknown\"){\r",
									"          jsonDataInt=jsonData[i]\r",
									"          pm.environment.set(\"jobsLogId\", jsonDataInt.id);\r",
									"    }\r",
									"}\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"jobsLogId is : \" +pm.environment.get(\"jobsLogId\"));\r",
									"// console.log(\"LedgerDescription is : \" +pm.environment.get(\"ledgerDescription\"));\r",
									"// console.log(\"LedgerCreatedDate is : \" +pm.environment.get(\"ledgerCreatedDate\"));\r",
									"// console.log(\"LedgerValueCode is : \" +pm.environment.get(\"ledgerValueCode\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINTENGAd}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{invoiceSyncId}}/logs/devex",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"integrations",
								"{{newIntegrationId}}",
								"jobs",
								"{{invoiceSyncId}}",
								"logs",
								"devex"
							]
						},
						"description": "Gets details for an invoice.\r\nTODO Get all details"
					},
					"response": []
				},
				{
					"name": "PWA /integration/Job/logs-SyncInvoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINTENGAd}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/integrations/{{newIntegrationId}}/jobs/{{invoiceSyncId}}/logs/{{jobsLogId}}/devex",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"integrations",
								"{{newIntegrationId}}",
								"jobs",
								"{{invoiceSyncId}}",
								"logs",
								"{{jobsLogId}}",
								"devex"
							]
						},
						"description": "Gets details for an invoice.\r\nTODO Get all details"
					},
					"response": []
				}
			]
		},
		{
			"name": "POGO",
			"item": [
				{
					"name": "PWA /values//ID 1 - Suppliers Semine Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json().data;\r",
									"\r",
									"    //console.log(masterDataSemine);\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    //console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData= [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        var findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===parseInt(masterDataSemine[i].erpVendorId)&&((x.isActive==true&&masterDataSemine[i].status==\"Active\")||(x.isActive==false&&masterDataSemine[i].status==\"Inactive\")))\r",
									"         if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"        console.log(findMasterData);\r",
									"\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : -Semine master Data Supplier; statuses are equal to POGO ERP's isActive.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"// //console.log(jsonData);\r",
									"\r",
									"// //console.log(masterData);\r",
									"// var supplierCodesSemine = [];\r",
									"// var supplierNamesSemine=[];\r",
									"// var supplierCodesRateSemine=[];\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// supplierNamesSemine.push(masterData[i].description)\r",
									"// }\r",
									"\r",
									"// supplierCodesSemine=supplierCodesSemine.sort(); \r",
									"// pm.environment.set(\"supplierCodesSemine\", supplierCodesSemine);\r",
									"// console.log(pm.environment.get(\"supplierCodesSemine\"));\r",
									"\r",
									"// supplierNamesSemine=supplierNamesSemine.sort();\r",
									"// pm.environment.set(\"supplierNamesSemine\", supplierNamesSemine);\r",
									"// console.log(pm.environment.get(\"supplierNamesSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierCodesSemine And ERP supplierCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierNamesSemine And ERP supplierNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"supplierNamesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"supplierNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/all/devextreme",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"suppliers",
								"all",
								"devextreme"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - Ledger Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"var masterData = pm.response.json().data;\r",
									"var jsonDataInt;\r",
									"\r",
									"var accountCodesSemine = [];\r",
									"var accountNamesSemine=[];\r",
									"var accountTaxsSemien=[];\r",
									"var accountTaxNosSemine=[];\r",
									"\r",
									"\r",
									"for (i in masterData) {\r",
									"accountCodesSemine.push(masterData[i].code)\r",
									"}\r",
									"\r",
									"for (i in masterData) {\r",
									"accountNamesSemine.push(masterData[i].description)\r",
									"}\r",
									"pm.environment.set(\"accountCodesSemine\", accountCodesSemine);\r",
									"console.log(pm.environment.get(\"accountCodesSemine\"));\r",
									"\r",
									"pm.environment.set(\"accountNamesSemine\", accountNamesSemine);\r",
									"console.log(pm.environment.get(\"accountNamesSemine\"));\r",
									"\r",
									"}\r",
									"\r",
									"/////// Check Data Which came from ERP /////////\r",
									"if (pm.response.code == 200) {\r",
									"    \r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountCodesSemine And ERP accountCodes are  equal.\", function () {\r",
									"           \r",
									"        pm.expect(pm.environment.get(\"accountCodesSemine\")).to.be.equal(pm.environment.get(\"accountCodes\"));\r",
									"       \r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    \r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountNamesSemine And ERP accountNames are  equal.\", function () {\r",
									"           \r",
									"        pm.expect(pm.environment.get(\"accountNamesSemine\")).to.be.equal(pm.environment.get(\"accountNames\"));\r",
									"       \r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdLedger}}/values/devextreme",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values",
								"devextreme"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values//ID 1 - DimensionProject Semine Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var masterDataSemine = pm.response.json().data;\r",
									"\r",
									"    var masterDataPOGO=pm.environment.get(\"masterDataPOGO\");\r",
									"    console.log(pm.environment.get(\"masterDataPOGO\"));\r",
									"\r",
									"    var findMasterData; [];\r",
									"    var failed=false;\r",
									"    for(i in masterDataSemine){\r",
									"        var findMasterData=masterDataPOGO.find(x=>\r",
									"        x.code===masterDataSemine[i].code&& \r",
									"        x.name===masterDataSemine[i].description);\r",
									"        //&&x.isActive===masterDataSemine[i].isActive);\r",
									"\r",
									"        \r",
									"        //&&x.vatNumber===parseInt(masterDataSemine[i].relations[0].code));\r",
									"        //console.log(findMasterData);\r",
									"        if(findMasterData===undefined){\r",
									"            failed=true;\r",
									"            break;\r",
									"        }\r",
									"        //console.log(findMasterData);\r",
									"    }\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Semine master Data DimensionDepartment; status is equal to POGO ERP's status.\", function () {  \r",
									"        pm.expect(failed).to.be.equal(false);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// var masterData = pm.response.json().data;\r",
									"\r",
									"\r",
									"// var projectCodesSemine = [];\r",
									"// var projectDescriptionsSemine=[];\r",
									"\r",
									"\r",
									"// for (i in masterData) {\r",
									"// projectCodesSemine.push(masterData[i].code)\r",
									"// }\r",
									"\r",
									"// for (i in masterData) {\r",
									"// projectDescriptionsSemine.push(masterData[i].description)\r",
									"// }\r",
									"// projectCodesSemine=projectCodesSemine.sort();\r",
									"// pm.environment.set(\"projectCodesSemine\", projectCodesSemine);\r",
									"// console.log(pm.environment.get(\"projectCodesSemine\"));\r",
									"\r",
									"// pm.environment.set(\"projectDescriptionsSemine\", projectDescriptionsSemine);\r",
									"// projectDescriptionsSemine=projectDescriptionsSemine.sort();\r",
									"// console.log(pm.environment.get(\"projectDescriptionsSemine\"));\r",
									"\r",
									"// }\r",
									"\r",
									"// /////// Compare the Data Which came from ERP and which are in the Semine. /////////\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : projectCodesSemine And ERP projectCodes are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"projectCodesSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"projectCodesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"    \r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : projectDescriptionsSemine And ERP projectNames are  equal.\", function () {\r",
									"           \r",
									"//         pm.expect(JSON.stringify(pm.environment.get(\"projectDescriptionsSemine\"))).to.be.equal(JSON.stringify(pm.environment.get(\"projectNamesPOGO\")));\r",
									"       \r",
									"//     });\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/parameters/{{parameterIdDimensionProject}}/values/devextreme",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{intOrganizationId}}",
								"clients",
								"{{intDatasetId}}",
								"parameters",
								"{{parameterIdDimensionProject}}",
								"values",
								"devextreme"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Integration Engine",
			"item": [
				{
					"name": "Delete",
					"item": [
						{
							"name": "PWA /Plugins Get  All Integration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('newIntegrationName', moment().format(\"YYMMDD\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].status == \"Active\") {\r",
											"            codeDeleteArray[x] = jsonData[x].id;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/dx?filter=[\"name\",\"notcontains\",\"{{newIntegrationName}}\"]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"integrations",
										"dx"
									],
									"query": [
										{
											"key": "filter",
											"value": "[\"name\",\"notcontains\",\"{{newIntegrationName}}\"]"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "PWA /Integration Delete All Integration Engine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"} else {\r",
											"    return;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404, 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 400]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/integrations/{{codeDelete}}?hardDelete=true",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"integrations",
										"{{codeDelete}}"
									],
									"query": [
										{
											"key": "hardDelete",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "DeleteParameters",
			"item": [
				{
					"name": "Delete parameters",
					"item": [
						{
							"name": "Delete Accountingcodes",
							"item": [
								{
									"name": "Delete Accounts",
									"item": [
										{
											"name": "INT client/accountingcodes/LedgerValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT client/accountingcodes/LedgerValue_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT organization/accountingcodes/LedgerValue_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/accountingcodes/{{ledgerValueCode_2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"accountingcodes",
														"{{ledgerValueCode_2}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Customers",
									"item": [
										{
											"name": "INT client/accountingcodes/Customer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/customers/{{customerValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"customers",
														"{{customerValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT client/accountingcodes/Customer_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/customers/{{customerValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"customers",
														"{{customerValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Supplier",
							"item": [
								{
									"name": "INT /supplier/supplier Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/suppliers/{{supplierCode}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"suppliers",
												"{{supplierCode}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Dimensions",
							"item": [
								{
									"name": "Projects",
									"item": [
										{
											"name": "INT /dimensions/Project Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project_1 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project_2 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}/values/{{projectValueCode_2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}",
														"values",
														"{{projectValueCode_2}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Project",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{projectCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{projectCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Departments",
									"item": [
										{
											"name": "INT /dimensions/Departments Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}/values/{{departmentValueCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}",
														"values",
														"{{departmentValueCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Departments_1 Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}/values/{{departmentValueCode_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}",
														"values",
														"{{departmentValueCode_1}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/Departments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/dimensions/{{departmentCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"dimensions",
														"{{departmentCode}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete VAT",
							"item": [
								{
									"name": "INT /VAT/Value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /VAT/Value_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode_1}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode_1}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /VAT/Value_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/vatcodes/{{vatValueCode_2}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{intOrganizationId}}",
												"clients",
												"{{intDatasetId}}",
												"vatcodes",
												"{{vatValueCode_2}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Currency",
							"item": [
								{
									"name": "Currency Client Level",
									"item": [
										{
											"name": "INT/ client/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT/ client/currency_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode_1}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode_1}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT/ client/currency_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"curStartDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"curEndDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{intOrganizationId}}/clients/{{intDatasetId}}/currency/{{currencyCode_2}}?startDate={{curStartDate}}&endDate={{curEndDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"clients",
														"{{intDatasetId}}",
														"currency",
														"{{currencyCode_2}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{curStartDate}}"
														},
														{
															"key": "endDate",
															"value": "{{curEndDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "All Setting-Users-Groups-Client-Roles",
			"item": [
				{
					"name": "Roles",
					"item": [
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"//////// Get OrgID /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().list;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"TestAutomation\") {\r",
											"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
											"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
											"\r",
											"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /Organization/NonAdminRoleList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataRole;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Editor\" || jsonData[i].name ==\"InvoiceEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceEditorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Flow Report\"|| jsonData[i].name == \"FlagEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceFlowReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"IntegrationEngineAdmin\" || jsonData[i].name ==\"Integration Engine Admin\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationEngineAdminRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Integration\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Inbound Status\" || jsonData[i].name == \"InboundStatusReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"inboundStatusRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Automation Report\" || jsonData[i].name ==\"AutomationReportAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"automationReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Approver\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Invoice Reader\" || jsonData[i].name ==\"InvoiceReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"invoiceReaderRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Statistics Report\" || jsonData[i].name ==\"StatisticsReportAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"statisticsReportRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Controller\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Lead Time\"|| jsonData[i].name ==\"ApproverReadAny\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"leadTimeRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Controller without upload\" || jsonData[i].name ==\"ControllerWithoutUpload\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerWithoutUploadRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Inbound Inbox\"|| jsonData[i].name ==\"InboundStatusReader\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"inboundInboxRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Approver - Set Flag\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverSetFlagRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"System\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"systemRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ControllerReadOnly\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"controllerReadOnlyRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Visningsadministrator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"visningsadministratorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"BasicAccess\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"basicAccessRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Impersonator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"impersonatorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ActionButtons\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"actionButtonsRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"FlagEditor\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"flagEditorRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApproverReadAny\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"approverReadAnyRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"IntegrationUpload\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"integrationUploadRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"RoleCheck\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"roleCheckRoleId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"    \r",
											"    }\r",
											"\r",
											"console.log(\"1-Invoice Editor Role Id is : \" + pm.environment.get(\"invoiceEditorRoleId\"));\r",
											"\r",
											"console.log(\"2-Invoice Flow Report Role Id is : \" + pm.environment.get(\"invoiceFlowReportRoleId\"));\r",
											"\r",
											"console.log(\"3-Integration Engine Admin Role Id is : \" + pm.environment.get(\"integrationEngineAdminRoleId\"));\r",
											"\r",
											"console.log(\"4-Integration Role Id is : \" + pm.environment.get(\"integrationRoleId\"));\r",
											"\r",
											"console.log(\"5-Inbound Status Role Id is : \" + pm.environment.get(\"inboundStatusRoleId\"));\r",
											"\r",
											"console.log(\"6-Automation Report Role Id is : \" + pm.environment.get(\"automationReportRoleId\"));\r",
											"\r",
											"console.log(\"7-Approver Role Id is : \" + pm.environment.get(\"approverRoleId\"));\r",
											"\r",
											"console.log(\"8-Invoice Reader Role Id is : \" + pm.environment.get(\"invoiceReaderRoleId\"));\r",
											"\r",
											"console.log(\"9-Statistics Report Role Id is : \" + pm.environment.get(\"statisticsReportRoleId\"));\r",
											"\r",
											"console.log(\"10-Controller Role Id is : \" + pm.environment.get(\"controllerRoleId\"));\r",
											"\r",
											"console.log(\"11-Lead Time Role Id is : \" + pm.environment.get(\"leadTimeRoleId\"));\r",
											"\r",
											"console.log(\"12-Controller without upload Role Id is : \" + pm.environment.get(\"controllerWithoutUploadRoleId\"));\r",
											"\r",
											"console.log(\"13-Inbound Inbox Role Id is : \" + pm.environment.get(\"inboundInboxRoleId\"));\r",
											"\r",
											"console.log(\"14-Approver - Set Flag Role Id is : \" + pm.environment.get(\"approverSetFlagRoleId\"));\r",
											"\r",
											"console.log(\"15-System Role Id is : \" + pm.environment.get(\"systemRoleId\"));\r",
											"\r",
											"console.log(\"16-ControllerReadOnly Role Id is : \" + pm.environment.get(\"controllerReadOnlyRoleId\"));\r",
											"\r",
											"console.log(\"17-Visningsadministrator Role Id is : \" + pm.environment.get(\"visningsadministratorRoleId\"));\r",
											"\r",
											"console.log(\"18-BasicAccess Role Id is : \" + pm.environment.get(\"basicAccessRoleId\"));\r",
											"\r",
											"console.log(\"19-ImpersonatorRoleId Role Id is : \" + pm.environment.get(\"impersonatorRoleId\"));\r",
											"\r",
											"console.log(\"20-ActionButtons Role Id is : \" + pm.environment.get(\"actionButtonsRoleId\"));\r",
											"\r",
											"console.log(\"21-FlagEditor Role Id is : \" + pm.environment.get(\"flagEditorRoleId\"));\r",
											"\r",
											"console.log(\"22-ApproverReadAny Role Id is : \" + pm.environment.get(\"approverReadAnyRoleId\"));\r",
											"\r",
											"console.log(\"23-IntegrationUpload Role Id is : \" + pm.environment.get(\"integrationUploadRoleId\"));\r",
											"\r",
											"console.log(\"24-RoleCheck Role Id is : \" + pm.environment.get(\"roleCheckRoleId\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require(\"moment\");\r",
											"\r",
											"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-language-code",
										"value": "en",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/nonadminroleslist",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"nonadminroleslist"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Organization/AdminRoleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataRole;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Administrator\") {\r",
											"            var jsonDataRole =jsonData[i];\r",
											"        pm.environment.set(\"administratorId\", jsonDataRole.id);\r",
											"    }\r",
											"    }\r",
											"}\r",
											"\r",
											"console.log(\"Admin Role Id is : \" + pm.environment.get(\"administratorId\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const moment = require(\"moment\");\r",
											"\r",
											"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-language-code",
										"value": "en",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/admin/defaultroles",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"defaultroles"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clients",
					"item": [
						{
							"name": "PWA /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].client == \"CataCloudClient-2110\") {\r",
											"            pm.environment.set(\"intDatasetId\", jsonData[x].clientId)\r",
											"        }\r",
											"        if (jsonData[x].client == \"IntClient_1\") {\r",
											"            pm.environment.set(\"intDatasetId_1\", jsonData[x].clientId)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"1-IntDatasetId is: \" +pm.environment.get(\"intDatasetId\"));\r",
											"console.log(\"2-IntDatasetId_1 is: \" +pm.environment.get(\"intDatasetId_1\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminClients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"admin",
										"organizations",
										"{{intOrganizationId}}",
										"adminClients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "All Users And Groups Settings",
					"item": [
						{
							"name": "Users&Groups Settings",
							"item": [
								{
									"name": "Get Userd Id",
									"item": [
										{
											"name": "PWA /currentuser - Controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
															"});\r",
															"\r",
															"\r",
															"if(pm.response.code == 200){\r",
															"   pm.environment.set(\"apiTestuserId\", pm.response.json().id);\r",
															"   pm.environment.set(\"apiTestControllerUserId\", pm.response.json().id);\r",
															"   pm.environment.set(\"apiTestUserName\", (pm.response.json().firstName + \" \" +pm.response.json().lastName));\r",
															"   pm.environment.set(\"apiTestControllerEmail\", pm.response.json().email);\r",
															"}\r",
															"\r",
															"if (pm.response.code != 200) {\r",
															"    console.log(pm.response)\r",
															"} \r",
															"\r",
															"console.log(\"ApiTestUserName is : \" + pm.environment.get(\"apiTestUserName\"));\r",
															"console.log(\"apiTestControllerEmail is : \" + pm.environment.get(\"apiTestControllerEmail\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/currentuser",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"currentuser"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /currentuser - Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].userFullName == \"ApiTestIntegration Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.userId);\r",
															"        pm.environment.set(\"apiTestIntegrationAdminName\", jsonDataUser.userFullName);\r",
															"        pm.environment.set(\"apiTestIntegrationAdminEmail\", jsonDataUser.userEmail);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].userFullName == \"ApiTest Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.userId);\r",
															"        pm.environment.set(\"apiTestIntegrationName\", jsonDataUser.userFullName);\r",
															"        pm.environment.set(\"apiTestIntegrationEmail\", jsonDataUser.userEmail);\r",
															"    }\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"console.log(\"ApiTestIntegrationAdminUserId is : \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
															"console.log(\"ApiTestIntegrationAdminName is : \" + pm.environment.get(\"apiTestIntegrationAdminName\"));\r",
															"console.log(\"ApiTestIntegrationAdminEmail is : \" + pm.environment.get(\"apiTestIntegrationAdminEmail\"));\r",
															"\r",
															"console.log(\"ApiTestIntegrationUserId is : \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
															"console.log(\"ApiTestIntegrationName is : \" + pm.environment.get(\"apiTestIntegrationName\"));\r",
															"console.log(\"ApiTestIntegrationEmail is : \" + pm.environment.get(\"apiTestIntegrationEmail\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/adminusers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"adminusers"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /user - AllUsersIntEng",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Approver\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestApproverUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestControllerUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTestIntegration Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"apiTestIntegrationUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ApiTest Approver User Id is : \" + pm.environment.get(\"apiTestApproverUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"apiTestControllerUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"apiTestIntegrationUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Admin Id is: \" + pm.environment.get(\"apiTestAdminUserId\"));\r",
															"\r",
															"console.log(\"ApiTestIntegration Admin Id is: \" + pm.environment.get(\"apiTestIntegrationAdminUserId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/users",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"users"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /user - AllUsersParent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Approver\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testApproverUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Adam Arelsen\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"adamArelsenUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Controller\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testControllerUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testIntegrationUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Adam Semine\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"adamSemineUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    \r",
															"    }\r",
															"\r",
															"console.log(\"Test Approver User Id is : \" + pm.environment.get(\"testApproverUserId\"));\r",
															"\r",
															"console.log(\"Adam Arelsen User Id is : \" + pm.environment.get(\"adamArelsenUserId\"));\r",
															"\r",
															"console.log(\"Test Controller Id is : \" + pm.environment.get(\"testControllerUserId\"));\r",
															"\r",
															"console.log(\"Test Integration Id is: \" + pm.environment.get(\"testIntegrationUserId\"));\r",
															"\r",
															"console.log(\"Test Admin Id is: \" + pm.environment.get(\"testAdminUserId\"));\r",
															"\r",
															"console.log(\"Adam Semine Id is: \" + pm.environment.get(\"adamSemineUserId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/users",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"users"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Groups Id",
									"item": [
										{
											"name": "PWA /organizations/ID/groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json().data;\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].group == \"IntContgroup\") {\r",
															"            pm.environment.set(\"IntContgroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntIntgroup\") {\r",
															"            pm.environment.set(\"IntIntgroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntContOrgLevel\") {\r",
															"            pm.environment.set(\"IntContOrgLevelId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"IntIntOrgLevel\") {\r",
															"            pm.environment.set(\"IntIntOrgLevelId\", jsonData[x].groupId)\r",
															"        }\r",
															"        if (jsonData[x].group == \"ApiTestIntegrationAdminGroup\") {\r",
															"            pm.environment.set(\"ApiTestIntegrationAdminGroupId\", jsonData[x].groupId)\r",
															"        }\r",
															"    }\r",
															"}\r",
															"console.log(\"1-IntControllerGroup id is: \" +pm.environment.get(\"IntContgroupId\"));\r",
															"console.log(\"2-IntIntegrationGroup id is: \" +pm.environment.get(\"IntIntgroupId\"));\r",
															"console.log(\"3-IntContOrgLevel id is: \" +pm.environment.get(\"IntContOrgLevelId\"));\r",
															"console.log(\"4-IntIntOrgLevel id is: \" +pm.environment.get(\"IntIntOrgLevelId\"));\r",
															"console.log(\"5-ApiTestIntegrationAdmin id is: \" +pm.environment.get(\"ApiTestIntegrationAdminGroupId\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/admingroups",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"admingroups"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /Grid/User/invoiceList/Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataGroup;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group Org\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integration Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
															"\r",
															"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
															"\r",
															"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
															"\r",
															"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
															"\r",
															"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
															"\r",
															"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
															"\r",
															"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
															"console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{intOrganizationId}}/admingroups?skip=0&take=20",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{intOrganizationId}}",
														"admingroups"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /Grid/User/invoiceList/Groups_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json().data;\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataGroup;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Controller Group Org\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Integration Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
															"            var jsonDataGroup =jsonData[i];\r",
															"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
															"    }\r",
															"    }\r",
															"    }\r",
															"\r",
															"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
															"\r",
															"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
															"\r",
															"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
															"\r",
															"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
															"\r",
															"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
															"\r",
															"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
															"\r",
															"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
															"//console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{organizationId}}/admingroups?skip=0&take=20",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{organizationId}}",
														"admingroups"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "20"
														}
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										}
									]
								},
								{
									"name": "Put User To Groups",
									"item": [
										{
											"name": "PWA /Add contUserToGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestControllerUserId}}\",\n    \"email\": \"ApiTestController@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        },\n        {\n            \"id\": \"{{organizationId}}\",\n            \"name\": \"AdamsOrganization\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{controllerGroupId}}\",\n            \"name\": \"Controller Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{controllerGroupOrgId}}\",\n            \"name\": \"Controller Group Org\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonKlientnivåId}}\",\n            \"name\": \"Integrasjon Klientnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonOrganisasjonsnivåId}}\",\n            \"name\": \"Integrasjon Organisasjonsnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrationGroupId}}\",\n            \"name\": \"Integration Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{settingsControllerGroupId}}\",\n            \"name\": \"Settings Controller Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContgroupId}}\",\n            \"name\": \"IntContgroup\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContOrgLevelId}}\",\n            \"name\": \"IntContOrgLevel\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Add IntUserToGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestIntegrationUserId}}\",\n    \"email\": \"ApiTestIntegration@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        },\n        {\n            \"id\": \"{{organizationId}}\",\n            \"name\": \"AdamsOrganization\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{integrasjonKlientnivåId}}\",\n            \"name\": \"Integrasjon Klientnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrasjonOrganisasjonsnivåId}}\",\n            \"name\": \"Integrasjon Organisasjonsnivå\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{integrationGroupId}}\",\n            \"name\": \"Integration Group\",\n            \"organizationId\": \"{{organizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntgroupId}}\",\n            \"name\": \"IntIntgroup\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntOrgLevelId}}\",\n            \"name\": \"IntIntOrgLevel\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /Add AdUserToIntAdGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"{{apiTestIntegrationAdminUserId}}\",\n    \"email\": \"ApiTestIntegrationAdmin@useful.no\",\n    \"secondaryEmail\": null,\n    \"organizations\": [\n        {\n            \"id\": \"{{intOrganizationId}}\",\n            \"name\": \"Integration Self Service Test\",\n            \"organizationStatus\": \"Active\"\n        }\n    ],\n    \"groups\": [\n        {\n            \"id\": \"{{ApiTestIntegrationAdminGroupId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntgroupId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntIntOrgLevelId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContgroupId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        },\n        {\n            \"id\": \"{{IntContOrgLevelId}}\",\n            \"name\": \"ApiTestIntegrationAdmin\",\n            \"organizationId\": \"{{intOrganizationId}}\",\n            \"active\": true\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/users/userDetails",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"users",
														"userDetails"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										}
									]
								},
								{
									"name": "Put Client To Groups",
									"item": [
										{
											"name": "PWA /organization PutClientToIntContGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{IntContgroupId}}\",\n    \"groupName\": \"IntContgroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{IntContgroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{IntContgroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /organization PutClientToIntIntGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{IntIntgroupId}}\",\n    \"groupName\": \"IntIntgroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{IntIntgroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{IntIntgroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "PWA /organization PutClientToIntAdminGroup",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINTENGAd}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"{{ApiTestIntegrationAdminGroupId}}\",\n    \"groupName\": \"ApiTestIntegrationAdminGroup\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{intDatasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Access to the Integration Engine Admin page as well as enough access to pass a test invoice through the system. Provides read-only access to the organization structure, clients and accounting parameters in order to verify import from any external sys\",\n                \"category\": null,\n                \"linkData\": \"https://semine.zendesk.com/hc/no/articles/360018763617\",\n                \"id\": \"{{integrationEngineAdminRoleId}}\",\n                \"name\": \"Integration Engine Admin\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{intOrganizationId}}/groups/{{ApiTestIntegrationAdminGroupId}}/rolesandstatus",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{intOrganizationId}}",
														"groups",
														"{{ApiTestIntegrationAdminGroupId}}",
														"rolesandstatus"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "OrgSettings",
					"item": [
						{
							"name": "PWA/ Organizations/settings-WorkFlowOff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINTENGAd}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": null\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Integration_RecalcCurrencyFactor\",\n        \"value\": null\n    },\n    {\n        \"key\": \"InvoiceDetails_Edit_Lock_Enabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"ManualVoucher_Extra_Fields_Enabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Organization_InheritanceEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Organization_ShowClientErpIdInDropDowns\",\n        \"value\": null\n    },\n    {\n        \"key\": \"SendEmailOnUserMention\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": true\n    }\n]"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{intOrganizationId}}/settings",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{intOrganizationId}}",
										"settings"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "--- END ---",
			"item": [
				{
					"name": "--- END ---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"invoiceType : \" + pm.environment.get(\"invoiceType\"))\r",
									"console.log('/// END ///');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenPWA}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cDimensionCode-X",
			"value": ""
		},
		{
			"key": "code-Delivery",
			"value": ""
		},
		{
			"key": "externalCode-Delivery",
			"value": ""
		},
		{
			"key": "name-Delivery",
			"value": ""
		},
		{
			"key": "addressType-Delivery",
			"value": ""
		},
		{
			"key": "address1-Delivery",
			"value": ""
		},
		{
			"key": "address2-Delivery",
			"value": ""
		},
		{
			"key": "zipCode-Delivery",
			"value": ""
		},
		{
			"key": "city-Delivery",
			"value": ""
		},
		{
			"key": "country-Delivery",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "code-Delivery-Encoded",
			"value": ""
		},
		{
			"key": "CCToken",
			"value": ""
		},
		{
			"key": "applicationkey",
			"value": "c8d8f153-21a0-4d13-839b-e7523e936dbf"
		},
		{
			"key": "clientkey",
			"value": "9ef5525a-a4f3-402f-bae6-7b3d577c29ee"
		},
		{
			"key": "endpointmode",
			"value": "Demo"
		},
		{
			"key": "dimensions",
			"value": "Project,Department"
		},
		{
			"key": "seminepassword",
			"value": "Bluewhale2"
		},
		{
			"key": "SemineWebSite",
			"value": "https://www.semine.com/"
		},
		{
			"key": "City",
			"value": "Kristiansand"
		},
		{
			"key": "ZipCode",
			"value": "4611"
		},
		{
			"key": "address1",
			"value": "Westrestrangata-23"
		},
		{
			"key": "CountryCode",
			"value": "NO"
		},
		{
			"key": "EmailAddress",
			"value": "ApiTestController@useful.no"
		},
		{
			"key": "PhoneNumber",
			"value": "+47 477 90 800"
		}
	]
}