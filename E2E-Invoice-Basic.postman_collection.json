{
	"info": {
		"_postman_id": "011f3f11-29a7-4975-84b2-5c03a7efbbe1",
		"name": "E2E-Invoice-Basic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "BASIC Delete AllRealOperations",
			"item": [
				{
					"name": "CLEANUP",
					"item": [
						{
							"name": "Start",
							"item": [
								{
									"name": "IDP /connect/token Api INT - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"console.log(pm.environment.get(\"ApiTestIntegration\"));\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        \r",
													"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        // console.log(pm.environment.get(\"TokenINT\"));\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"pm.environment.set(\"tryCounterLimit\", 10)\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeIntegration}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserIntegration}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassIntegration}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token Api PWA - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestController\"));\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeController}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserController}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassController}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token AdminSemine  - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Try N times\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"console.log(pm.environment.get(\"ApiTestAdmin\"));\r",
													"\r",
													"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"    if (pm.response.code == 200) {\r",
													"        if (pm.response.json().access_token != null) {\r",
													"\r",
													"            // If we get a token, pass test and go directly to the next request\r",
													"\r",
													"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
													"            postman.setNextRequest();\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
													"            return;\r",
													"        } else {\r",
													"            // Try again if tryCounter < tryCounterLimit\r",
													"            tryCounter++;\r",
													"            pm.globals.set(\"tryCounter\", tryCounter);\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"        }\r",
													"    } else {\r",
													"        // Try again if tryCounter < tryCounterLimit\r",
													"        tryCounter++;\r",
													"        pm.globals.set(\"tryCounter\", tryCounter);\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"    }\r",
													"} else {\r",
													"    // Fail after 10 tries\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
													"\r",
													"    postman.setNextRequest();\r",
													"}\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeAdmin}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserAdmin}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassAdmin}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /currentuser/organizations - take 10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"//////// Get OrgID /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json().list;\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].name == \"TestAutomation\") {\r",
													"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
													"        }\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
													"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
													"        }\r",
													"    }\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
													"\r",
													"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"currentUser",
												"organizations"
											],
											"query": [
												{
													"key": "filter",
													"value": ""
												},
												{
													"key": "take",
													"value": "10"
												}
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								},
								{
									"name": "PWA /intOrganizations/ID/clients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//////// Set Environment Variables /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json().data;\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].client == \"SharedTestClient\") {\r",
													"            pm.environment.set(\"datasetId\", jsonData[x].clientId)\r",
													"        }\r",
													"        // if (jsonData[x].client == \"IntClient_1\") {\r",
													"        //     pm.environment.set(\"intDatasetId_1\", jsonData[x].clientId)\r",
													"        // }\r",
													"    }\r",
													"}\r",
													"console.log(\"1-datasetId is: \" +pm.environment.get(\"datasetId\"));\r",
													"// console.log(\"2-IntDatasetId_1 is: \" +pm.environment.get(\"intDatasetId_1\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenAd}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/admin/organizations/{{organizationId}}/adminClients",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"admin",
												"organizations",
												"{{organizationId}}",
												"adminClients"
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								},
								{
									"name": "PWA c-parameters/ Get all parameterIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // pm.environment.set(\"aliasFound\", null);\r",
													"\r",
													"    // // Search for Alias by id\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].id == pm.environment.get(\"aliasId\")) {\r",
													"    //         pm.environment.set(\"aliasFound\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // pm.test(\"Alias found?\", function () {\r",
													"\r",
													"    //     pm.expect(pm.environment.get(\"aliasFound\")).to.be.not.null;\r",
													"    // });\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"    //         pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //Find PROJECTs ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //Find FixedAsset ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    //Find CategoryType ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find Interim\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : parameterIds found\", function () {\r",
													"        pm.expect(pm.environment.get(\"parameterIdInterim\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdTransactionType\")).to.be.not.empty;\r",
													"        // pm.expect(pm.environment.get(\"parameterIdCustomer\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdSupplier\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdProject\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdDimension\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdLedger\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdCategoryType\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdFixedAsset\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdVAT\")).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"       // + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"       + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"    );\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Dimensions",
							"item": [
								{
									"name": "INT /dimensions/ - Get all active dimensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var dimensionsDeleteArray = [];\r",
													"    // Find active dimensions\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionsDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray);\r",
													"    console.log(\"dimensionsDeleteArray : \" + dimensionsDeleteArray)\r",
													"\r",
													"\r",
													"// When there are no more dimensions left to clean, go to finish\r",
													"    if (dimensionsDeleteArray.length == 0) {\r",
													"        postman.setNextRequest(\"INT /health Cleanup ---FINISH---\");\r",
													"      console.log(\"INT /health Cleanup ---FINISH---\"); \r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"// var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < codeDeleteArrayLength) {\r",
													"//     pm.environment.set(\"codeDelete\", codeDeleteArray[i]);\r",
													"//     console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(pm.info.requestId); //Return to this request\r",
													"\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions"
											],
											"query": [
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/ID/values - Get all active dimension values",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"\r",
													"var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionsDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionsDelete\", encodeURIComponent(dimensionsDeleteArray[i]));\r",
													"    // console.log(\"dimensionsDelete \" + i + \" \" + pm.environment.get(\"dimensionsDelete\"));\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    // console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    var dimensionValuesDeleteArray = [];\r",
													"\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionValuesDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    console.log(\"dimensionValuesDeleteArray \" + dimensionValuesDeleteArray);\r",
													"    pm.environment.set(\"dimensionValuesDeleteArray\", dimensionValuesDeleteArray);\r",
													"\r",
													"    // if (dimensionValuesDeleteArray.length == 0) {\r",
													"    //     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\")\r",
													"    // }\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}/values?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values"
											],
											"query": [
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-dimensionValues - Delete value from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionValuesDeleteArray = pm.environment.get(\"dimensionValuesDeleteArray\");\r",
													"\r",
													"var dimensionValuesDeleteArrayLength = dimensionValuesDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionValuesDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionValuesDelete\", encodeURIComponent(dimensionValuesDeleteArray[i]));\r",
													"    console.log(\"dimensionValuesDelete \" + i + \" \" + pm.environment.get(\"dimensionValuesDelete\"));\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId); // Go to this request\r",
													"} else {\r",
													"    postman.setNextRequest(); // Go to next request\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}/values/{{dimensionValuesDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values",
												"{{dimensionValuesDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "c-dimension - Delete dimension from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"// // console.log(\"dimensionsDeleteArray \" + dimensionsDeleteArray);\r",
													"\r",
													"// var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < dimensionsDeleteArrayLength) {\r",
													"    \r",
													"//     pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray[i]);\r",
													"//     console.log(\"dimensionDelete \" + i + \" \" + pm.environment.get(\"dimensionDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													"\r",
													"// }\r",
													"\r",
													"    postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "INT /health Cleanup ---FINISH---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}../../../health",
											"host": [
												"{{INT}}",
												"",
												""
											],
											"path": [
												"..",
												"..",
												"health"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "PWA c-parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////////// Find PROJECT parameter Id /////////////\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(jsonDataLength);\r",
											"\r",
											"    var i = 0;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    // Find INTERIM ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find TRANSACTIONTYPE ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find CUSTOMER ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find SUPPLIER ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find PROJECTs ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    \r",
											"    // Find NS ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find FixedAsset ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    // Find Dimension ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // Find CategoryType ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"\r",
											"\r",
											"\r",
											"    // Find VAT ID\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
											"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
											"        }\r",
											"    }\r",
											"    console.log(\r",
											"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
											"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
											"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
											"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
											"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
											"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
											"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
											"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
											"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
											"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
											"\r",
											"\r",
											"\r",
											"    );\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"condensed"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]",
											"disabled": true
										},
										{
											"key": "code",
											"value": "PROJECT",
											"disabled": true
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /dimensions/parents - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].dimensionCode;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/parents?take=100",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"dimensions",
										"parents"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /parameters/DIMENSION/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdDimension}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdDimension}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensions/codeDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{codeDelete}}?take=100",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"dimensions",
										"{{codeDelete}}"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-dimension - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"} else {\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"dimensions",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/TRANSACTIONTYPE/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdTransactionType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdTransactionType}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-transactionTypes/A - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactionTypes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"transactionTypes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/PROJECT/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdProject}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdProject}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-projects - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"projects",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/CATEGORYTYPE/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdCategoryType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdCategoryType}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-categorytypes- Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/categorytypes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"categorytypes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/INTERIM/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdInterim}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdInterim}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-ledger - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/ledger/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"ledger",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/NS/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find coode\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            // codeDeleteArray[x] = jsonData[x].code;\r",
											"            codeDeleteArray.push(jsonData[x].code);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdLedger}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-accountingcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/FIXEDASSET/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdFixedAsset}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdFixedAsset}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-fixedassets - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"fixedassets",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/VAT/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVAT}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdVAT}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-vatcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/SUPPLIER/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdSupplier}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-Supplier - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/SUPPLIER/values - Active Empty Array Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"    codeDeleteArray.splice(0, codeDeleteArray.length);\r",
											"}\r",
											"console.log(\"codeDeleteArray: \" + codeDeleteArray);\r",
											"console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdSupplier}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdSupplier}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "take",
											"value": "100"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "REPORTING",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"console.log(pm.environment.get(\"ApiTestUserIntegration\"));\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 5);\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"// var done = false;\r",
											"// if (pm.environment.get(\"ENV\").length < 5 ) {\r",
											"//     pm.environment.set(\"ENV\", pm.environment.get(\"ENV\") + \" / E2E-Invoice-Basic /\");\r",
											"//     done = true;\r",
											"// }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token INT  - Try N times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestUserIntegration\"));\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token Admin  - Try Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"console.log(pm.environment.get(\"ApiTestUserAdmin\"));\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeAdmin}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserAdmin}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassAdmin}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /currentuser - Integrator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"   pm.environment.set(\"userIdIntegration\", pm.response.json().id);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentuser",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentuser"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"console.log(pm.environment.get(\"ApiTestUserController\"));\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten. 200.\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"pm.environment.set(\"tryCounterLimit\", 5);\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try N times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"console.log(pm.environment.get(\"ApiTestUserController\"));\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200.\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is got.\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ApiTestScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{ApiTestUserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{ApiTestPassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /user - AllUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    var jsonDataUser;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Approver\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"testApproverUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Adam Arelsen\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"adamArelsenUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"     for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"testControllerUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"ApiTest Integration\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"testIntegrationUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Test Admin\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"testAdminUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].name == \"Adam Semine\") {\r",
											"            var jsonDataUser =jsonData[i];\r",
											"        pm.environment.set(\"adamSemineUserId\", jsonDataUser.id);\r",
											"    }\r",
											"    }\r",
											"    \r",
											"    }\r",
											"\r",
											"console.log(\"Test Approver User Id is : \" + pm.environment.get(\"testApproverUserId\"));\r",
											"\r",
											"console.log(\"Adam Arelsen User Id is : \" + pm.environment.get(\"adamArelsenUserId\"));\r",
											"\r",
											"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"testControllerUserId\"));\r",
											"\r",
											"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"testIntegrationUserId\"));\r",
											"\r",
											"console.log(\"Test Admin Id is: \" + pm.environment.get(\"testAdminUserId\"));\r",
											"\r",
											"console.log(\"Adam Semine Id is: \" + pm.environment.get(\"adamSemineUserId\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/users",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"users"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} \r",
											"\r",
											"//////// Get OrgID /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().list;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"TestAutomation\") {\r",
											"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"SharedTestClient\") {\r",
											"            pm.environment.set(\"datasetId\", jsonData[x].id);\r",
											"        }\r",
											"        if (jsonData[x].name == \"ClientForAcl01\") {\r",
											"            pm.environment.set(\"datasetId_1\", jsonData[x].id)\r",
											"        }\r",
											"        if (jsonData[x].name == \"ClientForAcl02\") {\r",
											"            pm.environment.set(\"datasetId_2\", jsonData[x].id)\r",
											"        }\r",
											"        if (jsonData[x].name == \"ClientForAcl03\") {\r",
											"            pm.environment.set(\"datasetId_3\", jsonData[x].id)\r",
											"        }\r",
											"        if (jsonData[x].name == \"ClientForAcl04\") {\r",
											"            pm.environment.set(\"datasetId_4\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"1-SharedTestClientId is: \" +pm.environment.get(\"datasetId\"));\r",
											"console.log(\"ClientForAcl01 is: \" +pm.environment.get(\"datasetId_1\"));\r",
											"console.log(\"ClientForAcl02 is: \" +pm.environment.get(\"datasetId_2\"));\r",
											"console.log(\"ClientForAcl03 is: \" +pm.environment.get(\"datasetId_3\"));\r",
											"console.log(\"ClientForAcl04 is: \" +pm.environment.get(\"datasetId_4\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json()\r",
											"    pm.environment.set(\"erpId\", jsonData.erpId);\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} \r",
											"\r",
											"/**\r",
											" * //////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"111222333 - API Test & Client B\") {\r",
											"            pm.environment.set(\"datasetId\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"DatasetId is: \" +pm.environment.get(\"datasetId\"));\r",
											"**/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /currentuser - Controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"   pm.environment.set(\"userIdController\", pm.response.json().id);\r",
											"   pm.environment.set(\"userNameController\", (pm.response.json().firstName + \" \"+ pm.response.json().lastName));\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} \r",
											"console.log(pm.environment.get(\"userNameController\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentuser",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentuser"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    //     var jsonData = pm.response.json();\r",
											"    // pm.expect(jsonData).property(\"\"\r",
											"    // )\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"\r",
											"        pm.expect(pm.response).to.have.header(\"Expires\", \"Thu, 01 Jan 1970 00:00:01 GMT\")\r",
											"        pm.expect(pm.response).to.have.header(\"Cache-Control\", \"no-cache\")\r",
											"        pm.expect(pm.response).to.have.header(\"X-XSS-Protection\", \"1; mode=block\")\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// console.log(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://my.semine.no/",
									"protocol": "https",
									"host": [
										"my",
										"semine",
										"no"
									],
									"path": [
										""
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"}\r",
											"\r",
											"console.log(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										""
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "31022 INT/invoice/ID-StartPeriodeYearMontCount",
					"item": [
						{
							"name": "CLEANUP",
							"item": [
								{
									"name": "Start",
									"item": [
										{
											"name": "IDP /connect/token Api INT - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"\r",
															"console.log(pm.environment.get(\"ApiTestIntegration\"));\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
															"        \r",
															"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        // console.log(pm.environment.get(\"TokenINT\"));\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"pm.environment.set(\"tryCounterLimit\", 10)\r",
															"\r",
															"pm.globals.set(\"retries\", 0);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ApiTestScopeIntegration}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{ApiTestUserIntegration}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{ApiTestPassIntegration}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "IDP /connect/token Api PWA - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"console.log(pm.environment.get(\"ApiTestController\"));\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
															"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"\r",
															"\r",
															"pm.globals.set(\"retries\", 0);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ApiTestScopeController}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{ApiTestUserController}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{ApiTestPassController}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "IDP /connect/token AdminSemine  - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Try N times\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"console.log(pm.environment.get(\"ApiTestAdmin\"));\r",
															"\r",
															"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"    if (pm.response.code == 200) {\r",
															"        if (pm.response.json().access_token != null) {\r",
															"\r",
															"            // If we get a token, pass test and go directly to the next request\r",
															"\r",
															"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
															"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
															"            postman.setNextRequest();\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
															"            return;\r",
															"        } else {\r",
															"            // Try again if tryCounter < tryCounterLimit\r",
															"            tryCounter++;\r",
															"            pm.globals.set(\"tryCounter\", tryCounter);\r",
															"            postman.setNextRequest(pm.info.requestId);\r",
															"        }\r",
															"    } else {\r",
															"        // Try again if tryCounter < tryCounterLimit\r",
															"        tryCounter++;\r",
															"        pm.globals.set(\"tryCounter\", tryCounter);\r",
															"        postman.setNextRequest(pm.info.requestId);\r",
															"    }\r",
															"} else {\r",
															"    // Fail after 10 tries\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
															"\r",
															"    postman.setNextRequest();\r",
															"}\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ApiTestScopeAdmin}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{ApiTestUserAdmin}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{ApiTestPassAdmin}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /currentuser/organizations - take 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"//////// Get OrgID /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json().list;\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].name == \"TestAutomation\") {\r",
															"            pm.environment.set(\"organizationId\", jsonData[x].id)\r",
															"        }\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].name == \"Integration Self Service Test-2110\") {\r",
															"            pm.environment.set(\"intOrganizationId\", jsonData[x].id)\r",
															"        }\r",
															"    }\r",
															"    }\r",
															"}\r",
															"\r",
															"console.log(\"TestAutomation organizationId is: \" +pm.environment.get(\"organizationId\"));\r",
															"\r",
															"console.log(\"intOrganizationId is: \" +pm.environment.get(\"intOrganizationId\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"currentUser",
														"organizations"
													],
													"query": [
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "take",
															"value": "10"
														}
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /intOrganizations/ID/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json().data;\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].client == \"SharedTestClient\") {\r",
															"            pm.environment.set(\"datasetId\", jsonData[x].clientId);\r",
															"            pm.environment.set(\"datasetIdERPId\", jsonData[x].clientErpId);\r",
															"        }\r",
															"        if (jsonData[x].name == \"ClientForAcl01\") {\r",
															"            pm.environment.set(\"datasetId_1\", jsonData[x].id)\r",
															"        }\r",
															"        if (jsonData[x].name == \"ClientForAcl02\") {\r",
															"            pm.environment.set(\"datasetId_2\", jsonData[x].id)\r",
															"        }\r",
															"        if (jsonData[x].name == \"ClientForAcl03\") {\r",
															"            pm.environment.set(\"datasetId_3\", jsonData[x].id)\r",
															"        }\r",
															"        if (jsonData[x].name == \"ClientForAcl04\") {\r",
															"            pm.environment.set(\"datasetId_4\", jsonData[x].id)\r",
															"        }\r",
															"    }\r",
															"}\r",
															"console.log(\"1-SharedTestClientId is: \" +pm.environment.get(\"datasetId\"));\r",
															"console.log(\"2-SharedTestClientERPId is: \" +pm.environment.get(\"datasetIdERPId\"));\r",
															"\r",
															"console.log(\"ClientForAcl01 is: \" +pm.environment.get(\"datasetId_1\"));\r",
															"console.log(\"ClientForAcl02 is: \" +pm.environment.get(\"datasetId_2\"));\r",
															"console.log(\"ClientForAcl03 is: \" +pm.environment.get(\"datasetId_3\"));\r",
															"console.log(\"ClientForAcl04 is: \" +pm.environment.get(\"datasetId_4\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenAd}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/admin/organizations/{{organizationId}}/adminClients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"admin",
														"organizations",
														"{{organizationId}}",
														"adminClients"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA c-parameters/ Get all parameterIds",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////////// Find PROJECT parameter Id /////////////\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    console.log(jsonDataLength);\r",
															"\r",
															"    var i = 0;\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    // pm.environment.set(\"aliasFound\", null);\r",
															"\r",
															"    // // Search for Alias by id\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].id == pm.environment.get(\"aliasId\")) {\r",
															"    //         pm.environment.set(\"aliasFound\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // pm.test(\"Alias found?\", function () {\r",
															"\r",
															"    //     pm.expect(pm.environment.get(\"aliasFound\")).to.be.not.null;\r",
															"    // });\r",
															"\r",
															"    // Find TRANSACTIONTYPE ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find CUSTOMER ID\r",
															"    // for (x in jsonData) {\r",
															"    //     if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
															"    //         pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
															"    //     }\r",
															"    // }\r",
															"\r",
															"    // Find SUPPLIER ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    //Find PROJECTs ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find NS ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    //Find FixedAsset ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"    // Find Dimension ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    //Find CategoryType ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find VAT ID\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    // Find Interim\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
															"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
															"        }\r",
															"    }\r",
															"\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : parameterIds found\", function () {\r",
															"        pm.expect(pm.environment.get(\"parameterIdInterim\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdTransactionType\")).to.be.not.empty;\r",
															"        // pm.expect(pm.environment.get(\"parameterIdCustomer\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdSupplier\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdProject\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdDimension\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdLedger\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdCategoryType\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdFixedAsset\")).to.be.not.empty;\r",
															"        pm.expect(pm.environment.get(\"parameterIdVAT\")).to.be.not.empty;\r",
															"    });\r",
															"\r",
															"    console.log(\r",
															"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
															"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
															"       // + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
															"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
															"       + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
															"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
															"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
															"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
															"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
															"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
															"    );\r",
															"\r",
															"}\r",
															"\r",
															"console.log(pm.response.json())"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"parameters",
														""
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														},
														{
															"key": "code",
															"value": "PROJECT",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Dimensions",
									"item": [
										{
											"name": "INT /dimensions/ - Get all active dimensions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
															"\r",
															"    pm.globals.set(\"i\", 0);\r",
															"\r",
															"    var dimensionsDeleteArray = [];\r",
															"    // Find active dimensions\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].status == \"Active\") {\r",
															"            dimensionsDeleteArray.push(jsonData[x].code);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray);\r",
															"    console.log(\"dimensionsDeleteArray : \" + dimensionsDeleteArray)\r",
															"\r",
															"\r",
															"// When there are no more dimensions left to clean, go to finish\r",
															"    if (dimensionsDeleteArray.length == 0) {\r",
															"        postman.setNextRequest(\"INT /health Cleanup ---FINISH---\");\r",
															"      console.log(\"INT /health Cleanup ---FINISH---\"); \r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
															"\r",
															"// var codeDeleteArrayLength = codeDeleteArray.length;\r",
															"\r",
															"// var i = pm.globals.get(\"i\");\r",
															"// if (i < codeDeleteArrayLength) {\r",
															"//     pm.environment.set(\"codeDelete\", codeDeleteArray[i]);\r",
															"//     console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
															"//     i++\r",
															"//     pm.globals.set(\"i\", i);\r",
															"//     postman.setNextRequest(pm.info.requestId); //Return to this request\r",
															"\r",
															"// }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions?take=100&filter=[\"isActive\",\"=\",true]",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"dimensions"
													],
													"query": [
														{
															"key": "take",
															"value": "100"
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/ID/values - Get all active dimension values",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
															"\r",
															"var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
															"\r",
															"var i = pm.globals.get(\"i\");\r",
															"if (i < dimensionsDeleteArrayLength) {\r",
															"    pm.environment.set(\"dimensionsDelete\", encodeURIComponent(dimensionsDeleteArray[i]));\r",
															"    // console.log(\"dimensionsDelete \" + i + \" \" + pm.environment.get(\"dimensionsDelete\"));\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
															"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"    var jsonDataLength = jsonData.length;\r",
															"\r",
															"    // console.log(\"jsonDataLength: \" + jsonDataLength);\r",
															"\r",
															"    var dimensionValuesDeleteArray = [];\r",
															"\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].status == \"Active\") {\r",
															"            dimensionValuesDeleteArray.push(jsonData[x].code);\r",
															"        }\r",
															"    }\r",
															"\r",
															"    pm.globals.set(\"i\", 0);\r",
															"\r",
															"    console.log(\"dimensionValuesDeleteArray \" + dimensionValuesDeleteArray);\r",
															"    pm.environment.set(\"dimensionValuesDeleteArray\", dimensionValuesDeleteArray);\r",
															"\r",
															"    // if (dimensionValuesDeleteArray.length == 0) {\r",
															"    //     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\")\r",
															"    // }\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{dimensionsDelete}}/values?take=100&filter=[\"isActive\",\"=\",true]",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"dimensions",
														"{{dimensionsDelete}}",
														"values"
													],
													"query": [
														{
															"key": "take",
															"value": "100"
														},
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "c-dimensionValues - Delete value from array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
															"});\r",
															"// postman.setNextRequest(\"dimensions-ListAll\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var dimensionValuesDeleteArray = pm.environment.get(\"dimensionValuesDeleteArray\");\r",
															"\r",
															"var dimensionValuesDeleteArrayLength = dimensionValuesDeleteArray.length;\r",
															"\r",
															"var i = pm.globals.get(\"i\");\r",
															"if (i < dimensionValuesDeleteArrayLength) {\r",
															"    pm.environment.set(\"dimensionValuesDelete\", encodeURIComponent(dimensionValuesDeleteArray[i]));\r",
															"    console.log(\"dimensionValuesDelete \" + i + \" \" + pm.environment.get(\"dimensionValuesDelete\"));\r",
															"    i++\r",
															"    pm.globals.set(\"i\", i);\r",
															"    postman.setNextRequest(pm.info.requestId); // Go to this request\r",
															"} else {\r",
															"    postman.setNextRequest(); // Go to next request\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{dimensionsDelete}}/values/{{dimensionValuesDelete}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"dimensions",
														"{{dimensionsDelete}}",
														"values",
														"{{dimensionValuesDelete}}"
													]
												},
												"description": "Delete a dimension value"
											},
											"response": []
										},
										{
											"name": "c-dimension - Delete dimension from array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
															"});\r",
															"// postman.setNextRequest(\"dimensions-ListAll\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
															"// // console.log(\"dimensionsDeleteArray \" + dimensionsDeleteArray);\r",
															"\r",
															"// var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
															"\r",
															"// var i = pm.globals.get(\"i\");\r",
															"// if (i < dimensionsDeleteArrayLength) {\r",
															"    \r",
															"//     pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray[i]);\r",
															"//     console.log(\"dimensionDelete \" + i + \" \" + pm.environment.get(\"dimensionDelete\"));\r",
															"//     i++\r",
															"//     pm.globals.set(\"i\", i);\r",
															"//     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
															"\r",
															"// }\r",
															"\r",
															"    postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{dimensionsDelete}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"dimensions",
														"{{dimensionsDelete}}"
													]
												},
												"description": "Delete a dimension value"
											},
											"response": []
										},
										{
											"name": "INT /health Cleanup ---FINISH---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
															"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}../../../health",
													"host": [
														"{{INT}}",
														"",
														""
													],
													"path": [
														"..",
														"..",
														"health"
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "take",
															"value": "30",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "PWA c-parameters/condensed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // Find INTERIM ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find PROJECTs ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find FixedAsset ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CategoryType ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"\r",
													"\r",
													"\r",
													"    );\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"condensed"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /dimensions/parents - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].dimensionCode;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/parents?take=100",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"dimensions",
												"parents"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /parameters/DIMENSION/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.response.to.have.status(200);\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdDimension}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdDimension}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/codeDelete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{codeDelete}}?take=100",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"dimensions",
												"{{codeDelete}}"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-dimension - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"} else {\r",
													"    return;\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"dimensions",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/TRANSACTIONTYPE/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdTransactionType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdTransactionType}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-transactionTypes/A - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/transactionTypes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"transactionTypes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/PROJECT/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdProject}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdProject}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-projects - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/projects/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"projects",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/CATEGORYTYPE/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdCategoryType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdCategoryType}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-categorytypes- Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/categorytypes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"categorytypes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/INTERIM/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdInterim}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdInterim}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-ledger - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/ledger/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"ledger",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/NS/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find coode\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            // codeDeleteArray[x] = jsonData[x].code;\r",
													"            codeDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdLedger}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdLedger}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-accountingcodes - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"accountingcodes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/FIXEDASSET/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdFixedAsset}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdFixedAsset}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-fixedassets - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/fixedassets/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"fixedassets",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/VAT/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdVAT}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdVAT}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-vatcodes - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"vatcodes",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/SUPPLIER/values - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdSupplier}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdSupplier}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-Supplier - Delete Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < codeDeleteArrayLength) {\r",
													"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
													"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/{{codeDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"suppliers",
												"{{codeDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "PWA /parameters/SUPPLIER/values - Active Empty Array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"    pm.environment.unset(\"cProjectCodeDelete\");\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"    codeDeleteArray.splice(0, codeDeleteArray.length);\r",
													"}\r",
													"console.log(\"codeDeleteArray: \" + codeDeleteArray);\r",
													"console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdSupplier}}/values/devextreme?take=100&filter=[\"isActive\",\"=\",true]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"parameters",
												"{{parameterIdSupplier}}",
												"values",
												"devextreme"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "take",
													"value": "100"
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]"
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Setup",
							"item": [
								{
									"name": "Client",
									"item": [
										{
											"name": "PWA /organizations/ID/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code != 200) {\r",
															"    console.log(pm.response)\r",
															"} \r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json().data;\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].name == \"ClientForAcl04\") {\r",
															"            pm.environment.set(\"datasetId_4\", jsonData[x].id)\r",
															"        }\r",
															"    }\r",
															"}\r",
															"console.log(\"Client for periodeStartYears, periodeStartsMonth and periodeCount is: \" +pm.environment.get(\"datasetId_4\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /settings/ID 1 -SetClosingDatePeriodeOff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonDataAL = pm.response.json();\r",
															"   //console.log(jsonDataAL);\r",
															"\r",
															"    var jsonDataAL1;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].key == \"Periodization_UseCostAccountToVatCode\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat code is not connected to cost account.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", false);\r",
															"});\r",
															"}\r",
															"if (jsonDataAL[i].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodozedsLines  are disregarded.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", true);\r",
															"});\r",
															"}\r",
															"if (jsonDataAL[i].key == \"Accounts_ClosingDate\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Accounts_ClosingDate  is set.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", pm.environment.get(\"Accounts_ClosingDate\"));\r",
															"});\r",
															"}\r",
															"}\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");",
															"",
															"pm.environment.set(\"Accounts_ClosingDate\", moment().format(\"YYYY-MM-DD\"));",
															"",
															"",
															"console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));",
															"",
															"//=====add date======//",
															"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": \"{{Accounts_ClosingDate}}\"\n    },\n    {\n        \"key\": \"EnableVatHandling\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": true\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"Periodization_UseCostAccountToVatCode\",\n        \"value\": false\n    },\n    {\n        \"key\": \"Reinvoicing_Enable\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture_Threshold\",\n        \"value\": 1\n    },\n    {\n        \"key\": \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_MissingBuyerRefStepEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_PassthroughInvoicesWithoutWorkflow\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_WorkflowType\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_ContractType\",\n        \"value\": null\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"settings"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "---  sleep 5 sec ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /clients/ID/settings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonDataSettings = pm.response.json();\r",
															"\r",
															"    var i, j\r",
															"\r",
															"    for (i in jsonDataSettings) {\r",
															"        if (jsonDataSettings[i].groupKey == \"Accounting\") {\r",
															"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_ClosingDate\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"EnableVatHandling\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"\r",
															"        if (jsonDataSettings[i].groupKey == \"DateExtractor\") {\r",
															"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"DateExtractor_MinimumThresholdAmount\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Periodization_UseCostAccountToVatCode\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"\r",
															"        if (jsonDataSettings[i].groupKey == \"Reinvoicing\") {\r",
															"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture_Threshold\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"\r",
															"\r",
															"        if (jsonDataSettings[i].groupKey == \"VoucherNumbers\") {\r",
															"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SetByErp\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"\r",
															"            }\r",
															"        }\r",
															"\r",
															"\r",
															"        if (jsonDataSettings[i].groupKey == \"Workflow\") {\r",
															"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_AllowPostWithoutApprove\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_MissingBuyerRefStepEnabled\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_PassthroughInvoicesWithoutWorkflow\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_WorkflowType\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_ContractType\") {\r",
															"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
															"                }\r",
															"\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"settings"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "Users",
									"item": [
										{
											"name": "PWA /user - AllUsers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"   console.log(jsonData);\r",
															"\r",
															"    var jsonDataUser;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Approver\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testApproverUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Adam Arelsen\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"adamArelsenUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"     for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testControllerUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"ApiTest Integration\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testIntegrationUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].name == \"Test Admin\") {\r",
															"            var jsonDataUser =jsonData[i];\r",
															"        pm.environment.set(\"testAdminUserId\", jsonDataUser.id);\r",
															"    }\r",
															"    }\r",
															"    \r",
															"    }\r",
															"\r",
															"console.log(\"Test Approver User Id is : \" + pm.environment.get(\"testApproverUserId\"));\r",
															"\r",
															"console.log(\"Adam Arelsen User Id is : \" + pm.environment.get(\"adamArelsenUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"testControllerUserId\"));\r",
															"\r",
															"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"testIntegrationUserId\"));\r",
															"\r",
															"console.log(\"Test Admin Id is: \" + pm.environment.get(\"testAdminUserId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"    "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/users",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"users"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "List parameters",
									"item": [
										{
											"name": "PWA /parameters/condensed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json()\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
															"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
															"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
															"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
															"        }\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"parameters",
														"condensed"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /parameters/condensed - Get dimensions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//////// Find dimensions /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json()\r",
															"\r",
															"    for (x in jsonData) {\r",
															"\r",
															"\r",
															"        // Dimension B\r",
															"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-B\")) {\r",
															"            pm.environment.set(\"parameterIdDimCode-B\", jsonData[x].parameterId)\r",
															"            console.log(jsonData[x].parameterId);\r",
															"        }\r",
															"    }\r",
															"\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"parameters",
														"condensed"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /parameters/LEDGER/groupedsettings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(jsonData);\r",
															"\r",
															"\r",
															"//Check if AI is enabled\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json();\r",
															"    var x, i, j;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].groupKey == \"Ai_Settings\") {\r",
															"            for (j in jsonData[i].settingKeyValues) {\r",
															"\r",
															"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Enabled\") {\r",
															"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ai_Enabled true.\", function () {\r",
															"                        pm.expect(jsonData[i].settingKeyValues[j]).to.have.property(\"value\", true);\r",
															"                    });\r",
															"                }\r",
															"\r",
															"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Threshold\") {\r",
															"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Ai_Threshold 50.0.\", function () {\r",
															"                        pm.expect(jsonData[i].settingKeyValues[j]).to.have.property(\"value\", 50.0);\r",
															"                    });\r",
															"                }\r",
															"            }\r",
															"        }\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdLedger}}/groupedsettings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"parameters",
														"{{parameterIdLedger}}",
														"groupedsettings"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "INT - Delivery Address",
									"item": [
										{
											"name": "/addresses - Delivery",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set(\"code-Delivery\", \"code-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"externalCode-Delivery\", \"externalCode-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"name-Delivery\", \"name-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"addressType-Delivery\", \"Delivery\");\r",
															"pm.collectionVariables.set(\"address1-Delivery\", \"address1-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"address2-Delivery\", \"address2-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"zipCode-Delivery\", \"zipCode-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"city-Delivery\", \"city-Delivery-\" + moment().format(\"YYMM\"));\r",
															"pm.collectionVariables.set(\"country-Delivery\", \"NO\");\r",
															"pm.collectionVariables.set(\"status\", \"Active\");\r",
															"\r",
															"pm.collectionVariables.set(\"code-Delivery-Encoded\", encodeURIComponent(pm.collectionVariables.get(\"code-Delivery\")));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
															"\r",
															"pm.test(apiName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n  {\r\n    \"code\": \"{{code-Delivery}}\",\r\n    \"externalCode\": \"{{externalCode-Delivery}}\",\r\n    \"name\": \"{{name-Delivery}}\",\r\n    \"addressType\": \"{{addressType-Delivery}}\",\r\n    \"address1\": \"{{address1-Delivery}}\",\r\n    \"address2\": \"{{address2-Delivery}}\",\r\n    \"zipCode\": \"{{zipCode-Delivery}}\",\r\n    \"city\": \"{{city-Delivery}}\",\r\n    \"country\": \"{{country-Delivery}}\",\r\n    \"status\": \"Active\"\r\n  }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/addresses",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "/addresses/code  - Delivery",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
															"\r",
															"pm.test(apiName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    let address = pm.response.json();\r",
															"\r",
															"    pm.test(apiName + \" : All address fields.\", function () {\r",
															"        pm.expect(pm.collectionVariables.get('code-Delivery')).is.to.equal(address.code);\r",
															"        pm.expect(pm.collectionVariables.get('externalCode-Delivery')).is.to.equal(address.externalCode);\r",
															"        pm.expect(pm.collectionVariables.get('name-Delivery')).is.to.equal(address.name);\r",
															"        pm.expect(pm.collectionVariables.get('addressType-Delivery')).is.to.equal(address.addressType);\r",
															"        pm.expect(pm.collectionVariables.get('address1-Delivery')).is.to.equal(address.address1);\r",
															"        pm.expect(pm.collectionVariables.get('address2-Delivery')).is.to.equal(address.address2);\r",
															"        pm.expect(pm.collectionVariables.get('zipCode-Delivery')).is.to.equal(address.zipCode);\r",
															"\r",
															"        pm.expect(pm.collectionVariables.get('city-Delivery')).is.to.equal(address.city);\r",
															"        pm.expect(pm.collectionVariables.get('country-Delivery')).is.to.equal(address.country);\r",
															"        pm.expect(\"Active\").is.to.equal(address.status);\r",
															"    });\r",
															"    console.log(pm.response.json())\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/addresses/{{code-Delivery-Encoded}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"addresses",
														"{{code-Delivery-Encoded}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "INT - Supplier B",
									"item": [
										{
											"name": "INT /suppliers B",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cSupplierCode-B', 'B2-' +  moment().format(\"YYMM\"));\r",
															"pm.environment.set('cSupplierVATId-B', 'B2-' +  moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('DesSupplier', moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
															"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-B}}\",\n            \"city\": \"city-{{cSupplierCode-B}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-B}}\",\n            \"phone\": \"phone-{{cSupplierCode-B}}\",\n            \"email\": \"email-{{cSupplierCode-B}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-B}}\",\n        \"name\": \"name-{{cSupplierCode-B}}\",\n        \"organizationNumber\": \"orgnr-{{cSupplierCode-B}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-B}}-{{DesSupplier}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-B}}-1\",\n                \"bankName\": \"bankName-{{cSupplierCode-B}}-1\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-B}}-1\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-B}}-1\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-B}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-B}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-B}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-B}}-2-{{supplier}}\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-B}}-3\",\n                \"bankName\": \"bankName-{{cSupplierCode-B}}-3\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-B}}-3\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-B}}-3-{{supplier}}\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"suppliers"
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "INT /suppliers/B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/{{cSupplierCode-B}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"suppliers",
														"{{cSupplierCode-B}}"
													]
												},
												"description": "Gets a supplier for a given client"
											},
											"response": []
										}
									]
								},
								{
									"name": "Interim",
									"item": [
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set(\"Interim_1\", \"Interim_1-\" + moment().format(\"YYMM\"));\r",
															"pm.environment.set('DesInterim', moment().format(\"YYYYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{Interim_1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Interim account\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim konto æøå-{{DesInterim}}\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"externalId\":\"{{Interim_1}}-externalId\"\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes/{{Interim_1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"accountingcodes",
														"{{Interim_1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "VAT",
									"item": [
										{
											"name": "/vatcodes - 25,15,10,0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-R2', 'R2-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('DesVatCodes', moment().format(\"YYYYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"25% VAT code\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"25% MVA kode æøå-{{DesVatCodes}}\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"externalId\":\"{{cVatCode-R1}}-externalId\",\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 25\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-R2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"15% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"15% MVA kode æøå-{{DesVatCodes}}\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"externalId\":\"{{cVatCode-R2}}-externalId\",\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 15\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"10% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"10% MVA kode æøå-{{DesVatCodes}}\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"externalId\":\"{{cVatCode-S1}}-externalId\",\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 10\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"0% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"0% MVA kode æøå-{{DesVatCodes}}\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"externalId\":\"{{cVatCode-S2}}-externalId\",\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 0\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-25",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"vatcodes",
														"{{cVatCode-R1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-15",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-R2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"vatcodes",
														"{{cVatCode-R2}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-S1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"vatcodes",
														"{{cVatCode-S1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-S2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"vatcodes",
														"{{cVatCode-S2}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "PWA - Supplier B",
									"item": [
										{
											"name": "PWA /suppliers/search - query",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"// Get the supplier id based on erpVendorId (supplier code)\r",
															"var j = 0;\r",
															"while (j < jsonData.length) {\r",
															"    if (\r",
															"        jsonData[j].erpVendorId == pm.environment.get(\"cSupplierCode-B\")) {\r",
															"        pm.environment.set(\"cSupplierId-B\", jsonData[j].id);\r",
															"        pm.environment.set(\"cSupplierVATId-B\", jsonData[j].vatId);\r",
															"        console.log(jsonData[j].erpVendorId + \"  \" + jsonData[j].id);\r",
															"    }\r",
															"    j++;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/search?query={{cSupplierCode-B}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"suppliers",
														"search"
													],
													"query": [
														{
															"key": "skip",
															"value": "1",
															"description": "Skip records",
															"disabled": true
														},
														{
															"key": "take",
															"value": "2",
															"description": "Take records",
															"disabled": true
														},
														{
															"key": "textSearch",
															"value": "{{cSupplierCode-A}}",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cSupplierCode-B}}"
														}
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /suppliers/B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/{{cSupplierId-B}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"suppliers",
														"{{cSupplierId-B}}"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /suppliers/ Take 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/?take=2",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"suppliers",
														""
													],
													"query": [
														{
															"key": "take",
															"value": "2"
														}
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "INT - Ledger",
									"item": [
										{
											"name": "INT clients/ID/accountingcodes A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cAccountingCode-A', 'cAccCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-A}}-externalId\"\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT clients/ID/accountingcodes/A - Get active",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes/{{cAccountingCode-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"accountingcodes",
														"{{cAccountingCode-A}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT organizations/ID/accountingcodes A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('oAccountingCode-A', 'oAccCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"\r",
															"pm.environment.set('DesAccountingcodes_Org', moment().format(\"YYYYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{oAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Org}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{oAccountingCode-A}}-externalId\"\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT organizations/ID/accountingcodes/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes/{{oAccountingCode-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"accountingcodes",
														"{{oAccountingCode-A}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "INT - Dimension",
									"item": [
										{
											"name": "Dimension B",
											"item": [
												{
													"name": "INT /dimensions B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"console.log(pm.response.json());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"pm.environment.set('cDimensionCode-B', 'cDimCodeB-' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"pm.environment.set('Dimensions_B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{cDimensionCode-B}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"Norsk æøå-{{Dimensions_B}}\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"Dimension\",\n            \"languageCode\": \"English\"\n        }\n    ],\n     \"externalId\":\"{{cDimensionCode-B}}-externalId\"\n}"
														},
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions"
															]
														},
														"description": "Inserts and updates accounting codes for a given client"
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"console.log(pm.response.json());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensionsB/values/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
																	"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
																	"\r",
																	"    pm.response.to.have.status(200);\r",
																	"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
																	"});\r",
																	"\r",
																	"console.log(pm.response.json());\r",
																	"\r",
																	"// Create some sort of stack trace for DevOps\r",
																	"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
																	"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
																	"\r",
																	"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{cHHmmss}}-Alias-A\"],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
														},
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}/values?true",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}",
																"values"
															],
															"query": [
																{
																	"key": "true",
																	"value": null
																}
															]
														},
														"description": "Inserts and updates accounting codes for a given client"
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B/values/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"///////// Check Aliases and relations are applied.\r",
																	"// if (pm.response.code == 200) {\r",
																	"\r",
																	"//     var jsonData = pm.response.json();\r",
																	"\r",
																	"//     console.log(jsonData);\r",
																	"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
																	"//     pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
																	"//     pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-A\"));\r",
																	"//     pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
																	"//     pm.expect(jsonData.aliases).to.include(\"ApiTest Controller\",\"ApiTest\",\"Api\",\"Controller\");\r",
																	"                \r",
																	"//             });\r",
																	"//     }\r",
																	"\r",
																	"// console.log(pm.response.json());\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}",
																"values",
																"{{cDimensionCodeValue-B}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B/values",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}/values",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}",
																"values"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "API Cost Invoice",
							"item": [
								{
									"name": "--- API Cost Invoice ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices - Cost Minimum - Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													"pm.environment.set(\"invoiceCount\", 1);\r",
													"\r",
													"console.log(pm.environment.get(\"invoiceCount\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}"
											]
										},
										"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
									},
									"response": []
								},
								{
									"name": "INT /invoices - Cost Minimum - Repeat N",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"var invoiceCount;\r",
													"\r",
													"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
													"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
													"\r",
													"invoiceCount++;\r",
													"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
													"\r",
													"console.log(pm.environment.get(\"invoiceNumber\"));\r",
													"\r",
													" pm.environment.set(\"startPeriodYear\", moment().format(\"YY\"));\r",
													" pm.environment.set(\"startPeriodMonth\", moment().format(\"MM\"));\r",
													"\r",
													" //This text is added because of the bug 31453 Limit number of characters for invoice line description. This text is added because of the bug 31453 Limit number of characters for invoice line description. This text is added because of the bug 31453 Limit number of characters for invoice line description.\r",
													"\r",
													"\r",
													"// // Invoice dates\r",
													"// pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
													"// pm.environment.set(\"cInvoiceDate\", moment());\r",
													"// pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
													"\r",
													"\r",
													"// TODO: Date Extractor fails\r",
													"\r",
													"// pm.environment.set(\"dateStart\", \"01.04.2021\");\r",
													"// pm.environment.set(\"dateEnd\", \"01.06.2021\");\r",
													"\r",
													"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
													"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
													"\r",
													"// pm.environment.set(\"startPeriodYear\", \"21\");\r",
													"// pm.environment.set(\"startPeriodMonth\", \"4\");\r",
													"\r",
													"\r",
													"// // TODO: Date Extractor fails\r",
													"\r",
													"// pm.environment.set(\"dateStart\", moment().subtract(1, 'days').format(\"DD.MM.YYYY\"));\r",
													"// pm.environment.set(\"dateEnd\", moment().add(30, 'days').format(\"DD.MM.YYYY\"));\r",
													"\r",
													"// pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
													"// pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
													"\r",
													"// pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
													"// pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
													"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
													"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
													"// } else {\r",
													"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
													"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
													"// }\r",
													"\r",
													"// console.log(pm.environment.get(\"startPeriodMonth\"))\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
													"}\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
													"console.log(pm.response.json());\r",
													"\r",
													"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
													"    postman.setNextRequest(pm.info.requestId);\r",
													"} else {\r",
													"    postman.setNextRequest(); // Just move on to the next request\r",
													"}\r",
													"console.log(\"cInvoiceId is : \" + pm.environment.get(\"cInvoiceId\"));\r",
													"\r",
													"\r",
													"// function sleep(milisecond) {\r",
													"//     var date = Date.now();\r",
													"//     while ((date + milisecond) > Date.now());\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-B}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{invoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-B}}\",\r\n        \"Code\": \"{{cSupplierCode-B}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-B}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-B}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-SP-{{cSupplierCode-B}}\",\r\n        \"Mobile\": \"Mobile-SP-{{cSupplierCode-B}}\",\r\n        \"Web\": \"Web-SP-{{cSupplierCode-B}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-B}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-B}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-B}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": \"Mobile-CP-{{clientRegistrationNumber}}\",\r\n        \"Web\": \"Web-CP-{{clientRegistrationNumber}}\",\r\n        \"Street\": \"Street-CP-{{clientRegistrationNumber}}\",\r\n        \"Zip\": \"Zip-CP\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City-CP\",\r\n        \"BankAccountNumber\": \"BBAN-CP-{{clientRegistrationNumber}}\",\r\n        \"IbanAccountNumber\": \"IBAN-CP-{{clientRegistrationNumber}}\"\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"000000001 000000002 000000003 000000004 000000005 000000006 000000007 000000008 000000009 000000010 000000011 000000012 000000013 000000014 000000015 000000016 000000017 000000018 000000019 000000020 000000021 000000022 000000023 000000024 000000025 000000026 000000027 000000028 000000029 000000030\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"DimValue:  {{cDimensionCodeValue-A}} CamelCaseAlias\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices"
											]
										},
										"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
									},
									"response": []
								},
								{
									"name": "---  sleep 45 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(45);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Poll available state",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
													"});\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"function sleep(milisecond) {\r",
													"    var date = Date.now();\r",
													"    while ((date + milisecond) > Date.now());\r",
													"}\r",
													"\r",
													"var retries = pm.globals.get(\"retries\");\r",
													"\r",
													"\r",
													"if (retries < 100) { // Try every 20s for 5 minutes\r",
													"    if (pm.response.code == 200) {\r",
													"        var jsonData = pm.response.json();\r",
													"        var i = 0;\r",
													"        if (typeof jsonData == \"object\") {\r",
													"\r",
													"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
													"\r",
													"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
													"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
													"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
													"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
													"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
													"                });\r",
													"                postman.setNextRequest();\r",
													"                pm.globals.set(\"retries\", 0);\r",
													"\r",
													"                console.log(jsonData);\r",
													"\r",
													"            } else {\r",
													"                retries++;\r",
													"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
													"                postman.setNextRequest(pm.info.requestId);\r",
													"                console.log(jsonData);\r",
													"                sleep(20000); // Wait 20s and then try again\r",
													"            }\r",
													"\r",
													"        } else {\r",
													"            retries++;\r",
													"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"            console.log(jsonData);\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
													"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
													"            });\r",
													"            sleep(20000); // Wait 20s and then try again\r",
													"        }\r",
													"\r",
													"    } else {\r",
													"        retries++;\r",
													"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"        console.log(pm.response.json());\r",
													"        sleep(20000); // Wait 20s and then try again\r",
													"    }\r",
													"} else {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
													"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
													"    });\r",
													"    console.log(\"retries: \" + retries)\r",
													"    postman.setNextRequest(\"--- Skip to END ---\");\r",
													"}\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													" pm.environment.set(\"invoiceNumber_1\", jsonData.invoiceNumber);\r",
													"\r",
													" console.log(pm.environment.get(\"invoiceNumber_1\"));\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Lines",
							"item": [
								{
									"name": "List",
									"item": [
										{
											"name": "PWA /invoices/ID/invoiceLines - List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 10 seconds\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLines are exist.\", function () {\r",
															"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
															"        pm.expect(jsonData).to.be.not.property(\"invoiceLines\", []);\r",
															"        pm.expect(jsonData).to.be.not.property(\"invoiceAmounts\", []);\r",
															"\r",
															"    });\r",
															"\r",
															"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
															"        pm.environment.set(\"InvoiceLineId-1\", jsonData.invoiceLines[0].invoiceLineId);\r",
															"        pm.environment.set(\"InvoiceLineId-2\", jsonData.invoiceLines[1].invoiceLineId);\r",
															"        pm.environment.set(\"cAccountTypeParameterId\", jsonData.invoiceLines[0].accountTypeParameterId);\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// console.log(jsonData);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /parameters/condensed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json()\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
															"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
															"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
															"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
															"        }\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"parameters",
														"condensed"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 1",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 1 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cAccountingCode-A\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdLedger_2\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdLedger_2\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// // Apply Ledger Manual 50% of the time\r",
																	"// var rnd = Math.random();\r",
																	"// // console.log(rnd)\r",
																	"\r",
																	"// if (rnd > 0.0) {\r",
																	"//     pm.environment.set(\"Ledger-15\", \"Ledger-15-AI\");\r",
																	"// } else {\r",
																	"//     pm.environment.set(\"Ledger-15\", pm.environment.get(\"Ledger_15_Manual\"));\r",
																	"// }"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdLedger}}/values/condensed?query={{cAccountingCode-A}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "15 Acc-2101",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cVatCode-R2\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdVat_2\", jsonDataAL.parameterValueId);\r",
																	"            pm.environment.set(\"parameterIdVat\", jsonDataAL.parameterId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdVat_2\"));\r",
																	"console.log(pm.environment.get(\"parameterIdVat\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdVat}}/values/condensed?query={{cVatCode-R2}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cVatCode-R2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdInterim\", jsonData.parameterValueId)\r",
																	"}\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"Interim_1\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdInterim\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdInterim\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdInterim}}/values/condensed?take=5&query={{Interim_1}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5"
																},
																{
																	"key": "query",
																	"value": "{{Interim_1}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL1\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 1,\r\n    \"netAmount\": 1,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": \"{{startPeriodMonth}}\",\r\n    \"startPeriodYear\": \"{{startPeriodYear}}\",\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger_2}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat_2}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdInterim}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found.\", function () {\r",
															"    pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"    // pm.expect(jsonData).to.have.property(\"startPeriodMonth\", JSON.parse(pm.environment.get(\"startPeriodMonth\")));\r",
															"\r",
															"    pm.expect(jsonData).to.have.property(\"totalPeriod\", 3)\r",
															"    });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
															"        pm.expect(jsonData).to.have.property(\"unitPrice\",1);\r",
															"        pm.expect(jsonData).to.have.property(\"netAmount\", 1);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 1.15);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions is not empty.\", function () {\r",
															"        pm.expect(jsonData).to.be.not.property(\"accountingParameters\", []);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var x;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :VatCode is VAT-15.\", function () {\r",
															"                pm.expect(jsonData[i]).to.have.property(\"code\", pm.environment.get(\"cVatCode-R2\"));\r",
															"                // pm.expect(jsonData[i]).to.have.property(\"relationType\", \"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 2",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 2 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cVatCode-R1\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdVat_1\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdVat_1\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdVat}}/values/condensed?query={{cVatCode-R1}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cVatCode-R1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdInterim\", jsonData.parameterValueId)\r",
																	"}\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"Interim_1\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdInterim\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdInterim\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdInterim}}/values/condensed?take=5&query={{Interim_1}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5"
																},
																{
																	"key": "query",
																	"value": "{{Interim_1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 2 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cAccountingCode-A\")) {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdLedger_1\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdLedger_1\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Apply Ledger Manual 50% of the time\r",
																	"var rnd = Math.random();\r",
																	"// console.log(rnd)\r",
																	"\r",
																	"if (rnd > 1) {\r",
																	"    pm.environment.set(\"Ledger-25\", \"Ledger-25-AI\");\r",
																	"} else {\r",
																	"    pm.environment.set(\"Ledger-25\", pm.environment.get(\"Ledger_25_Manual\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/{{parameterIdLedger}}/values/condensed?query={{cAccountingCode-A}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
															"    //     pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"    //     pm.expect(jsonData.startPeriodMonth.toString()).to.eql(pm.environment.get(\"startPeriodMonth\"));\r",
															"    //     pm.expect(jsonData).to.heve.property(\"totalPeriod\", 3);\r",
															"    // });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"quantity\", 4);\r",
															"        pm.expect(jsonData).to.have.property(\"unitPrice\",25);\r",
															"        pm.expect(jsonData).to.have.property(\"netAmount\", 100);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 125);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions is not empty.\", function () {\r",
															"        pm.expect(jsonData).to.be.not.property(\"accountingParameters\", []);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL2\",\r\n    \"quantity\": 4.0000,\r\n    \"unitPrice\": 25.0000,\r\n    \"netAmount\": 100.00,\r\n    \"vatRate\": 25.0000,\r\n    \"discount\": 0.0000,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n     \"startPeriodMonth\": \"{{startPeriodMonth}}\",\r\n     \"startPeriodYear\": \"{{startPeriodYear}}\",\r\n     \"totalPeriod\": 4,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger_1}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat_1}}\"\r\n        }\r\n         ,\r\n         {\r\n             \"parameterId\": \"{{parameterIdInterim}}\",\r\n             \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n         }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCode is VAT-25.\" , function () {\r",
															"                pm.expect(jsonData[i]).to.have.property(\"code\", pm.environment.get(\"cVatCode-R1\"));\r",
															"                // pm.expect(jsonData[i]).to.have.property(\"relationType\", \"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Comments",
									"item": [
										{
											"name": "PWA /invoiceLines/ID 1 -postLineComment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.environment.set('comment_B', 'Comment_B-' + moment().format(\"YYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"if (pm.response.code == 200) {",
															"const jsonData = pm.response.json();",
															"console.log(jsonData);",
															"",
															"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId\")) {",
															"            var jsonDataAL=jsonData;",
															"        pm.environment.set(\"commentId\", jsonDataAL.commentId);",
															"        pm.environment.set(\"comment\", jsonDataAL.comment);",
															"    }",
															"    }",
															"    console.log(\"CommentId_ is: \" +pm.environment.get(\"commentId\"));",
															"    console.log(\"Comment is: \" +pm.environment.get(\"comment\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"@ApiTest Integration﻿ It is for line-B.-{{comment_B}}\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationUserId}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId}}/comments",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId}}",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 -seeLinesComment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"const jsonData= pm.response.json();\r",
															"  // console.log(jsonDataAL);\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId\") &&jsonData[i].commentId==pm.environment.get(\"commentId\")) {\r",
															"            var jsonDataAL =jsonData[i];\r",
															"\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment is found.\", function () {\r",
															"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@ApiTest Integration﻿ It is for line-B.-\" +pm.environment.get(\"comment_B\") );\r",
															"});   \r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : CreatedBy is found.\", function () {\r",
															"        pm.expect(jsonDataAL.createdBy).to.have.property(\"userId\", pm.environment.get(\"testControllerUserId\") );\r",
															"}); \r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TaggedUsers is found.\", function () {\r",
															"        pm.expect(jsonDataAL.taggedUsers[0]).to.have.property(\"userId\", pm.environment.get(\"testIntegrationUserId\"));\r",
															"});   \r",
															"}\r",
															"}\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId}}/comments",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId_4}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId}}",
														"comments"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Accounting Lines",
							"item": [
								{
									"name": "PWA /accountinglines/generate - Check codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											],
											"query": [
												{
													"key": "documentType",
													"value": "CostInvoice"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/accountingLines - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"    const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().accountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"\r",
													"        }\r",
													"    \r",
													"\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Are AL objects found?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :VatAmounts in HeaderLine is 0000.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].parameterTypeCode == \"Ledger\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i].code\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLineParameter is exist.\", function () {\r",
													"        pm.expect(testObject).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"description\", \"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineItemType\", \"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"netAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"totalAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"exchangeRate\", 1.000000);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineNumber\", 1);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingNetAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"lineItemType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"netAmount\", 1.00);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"totalAmount\", 1.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"vatAmount\", 0.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"exchangeRate\", 1.000000);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingNetAmount\", 1.0);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingAmount\", 1.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingVatAmount\", 0.15);\r",
													"    });\r",
													"\r",
													"    \r",
													"    // AL 1 Ledger//\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP1) {           \r",
													"         console.log(jsonDataALP1[i])\r",
													"        if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            i = i;\r",
													"            testObject = jsonDataALP1[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
													"        pm.expect(testObject).to.eql(pm.environment.get(\"cAccountingCode-A\"));\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].parameterTypeCode == \"Vat\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_1 is VAT-15\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", (pm.environment.get(\"cVatCode-R1\")&& pm.environment.get(\"cVatCode-R2\")));\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccointingLine_2 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"lineItemType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"netAmount\", 100.00);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"totalAmount\", 125);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"vatAmount\", 25);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"exchangeRate\", 1.000000);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingNetAmount\", 100.0);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingAmount\", 125);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingVatAmount\", 25);\r",
													"    });\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().accountingLines;\r",
													"    var jsonDataLast= jsonData[jsonData.length-1];\r",
													"\r",
													"   console.log(jsonDataLast);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Last line is found and 3.\", function () {\r",
													"         pm.expect(jsonDataLast).to.have.property(\"lineNumber\", 3);\r",
													"    });\r",
													"    }\r",
													"\r",
													"    // // AL 2 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].parameterTypeCode == \"Ledger\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([pm.environment.get(\"cAccountingCode-A\")]);\r",
													"    });\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].parameterTypeCode == \"Vat\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_2 is VAT-25\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", pm.environment.get(\"cVatCode-R1\"));\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/accountingLines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountingLines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Approve_actionExecuted  is successfully\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													"\r",
													"console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"setTimeout(function () {\r",
													"    console.log(\"Done.\");\r",
													"}, 5000);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Approve\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 10 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(10);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is approved\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Approved\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - GenerateAndPost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is approved and posted.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"}\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"GenerateAndPost\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 10 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(10);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Posting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status is Posting.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Posting\");\r",
													"    });\r",
													"\r",
													"}else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "INT-GET invoice",
							"item": [
								{
									"name": "INT /invoices/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2;\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Are AL objects Found?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatAmounts in HeaderLine is 0000.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].type == \"Supplier\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLineParameter(Supplier) is exist.\", function () {\r",
													"        pm.expect(testObject.code).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Leverandør\");\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", (\"name-\"+pm.environment.get(\"cSupplierCode-B\")));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    console.log(jsonDataALHeaderLine)\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"description\", \"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineType\", \"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"netAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"totalAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"exchangeRate\", 1);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"numberOfUnits\", 1);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"lineNumber\", 1);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingNetAmount\", 126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingAmount\", 126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"lineType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"netAmount\", 1.00);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"totalAmount\", 1.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"vatAmount\", 0.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"exchangeRate\", 1);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"debitLedgerType\", \"AccountingCode\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"creditLedgerType\", null);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"voucherTypeCode\", \"\");\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingNetAmount\", 1.0);\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingAmount\", 1.15);\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingVatAmount\", 0.15);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"AccountingCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Accountingline_1 is found.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", (\"Konto kode-\"+pm.environment.get(\"DesAccountingcodes_Client\")));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"        pm.expect(testObject).to.have.property(\"externalId\", (pm.environment.get(\"cAccountingCode-A\")+ \"-externalId\"));\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"VatCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_1 is found.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", (\"15% MVA kode æøå-\"+pm.environment.get(\"DesVatCodes\")));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"MVA kode\");\r",
													"        pm.expect(testObject).to.have.property(\"externalId\", (pm.environment.get(\"cVatCode-R2\")+ \"-externalId\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccointingLine_2 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"lineType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"currency\", \"NOK\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"netAmount\", 100.00);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"totalAmount\", 125);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"vatAmount\", 25);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"exchangeRate\", 1.000000);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"debitLedgerType\", \"AccountingCode\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"creditLedgerType\", null);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"voucherTypeCode\", \"\");\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingNetAmount\", 100.0);\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingAmount\", 125);\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingVatAmount\", 25);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"AccountingCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Ledger in Accountingline_2 is found.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", (\"Konto kode-\"+pm.environment.get(\"DesAccountingcodes_Client\")));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"        pm.expect(testObject).to.have.property(\"externalId\", (pm.environment.get(\"cAccountingCode-A\")+ \"-externalId\"));\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"VatCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_2 is found..\", function () {\r",
													"         pm.expect(testObject).to.have.property(\"codeDescription\", (\"25% MVA kode æøå-\"+pm.environment.get(\"DesVatCodes\")));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"MVA kode\");\r",
													"        pm.expect(testObject).to.have.property(\"externalId\", (pm.environment.get(\"cVatCode-R1\")+ \"-externalId\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"//Check periodStartYear, periodStartMonth and periodCount;\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"    const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            testObject = jsonDataAL[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1 PeriodStartYear, PeriodStartMonth and PeriodCount are not null.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"periodStartYear\", pm.environment.get(\"periodStartYearInt\"));\r",
													"        pm.expect(testObject).to.have.property(\"periodStartMonth\", pm.environment.get(\"periodStartMonthInt\"));\r",
													"        pm.expect(testObject).to.have.property(\"periodCount\", 3);\r",
													"    });\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            testObject = jsonDataAL[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2 PeriodStartYear, PeriodStartMonth and PeriodCount are not null.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"periodStartYear\", pm.environment.get(\"periodStartYearInt\"));\r",
													"        pm.expect(testObject).to.have.property(\"periodStartMonth\", pm.environment.get(\"periodStartMonthInt\"));\r",
													"        pm.expect(testObject).to.have.property(\"periodCount\", 4);\r",
													"    });\r",
													"    }\r",
													"\r",
													"////////Check InvoiceLine description, characters of descriptions should be under 200.////////\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"    const jsonDataAL = pm.response.json().invoiceLines;\r",
													"\r",
													"    var jsonDataDescription;\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineNumber == 1) {\r",
													"            jsonDataDescription = jsonDataAL[i].description;\r",
													"           break;\r",
													"        }\r",
													"    }\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine charecters of Description is under 200.\", function () {\r",
													"        pm.expect(jsonDataDescription.length).to.be.lessThan(201);\r",
													"        pm.expect(jsonDataDescription.length).to.be.equal(200);\r",
													"       \r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													" pm.environment.set(\"periodStartYear\", moment().format(\"YYYY\"));",
													"pm.environment.set(\"periodStartMonth\", moment().format(\"MM\"));",
													"",
													"",
													"",
													"var periodStartYear =pm.environment.get(\"periodStartYear\");",
													"",
													"pm.environment.set(\"periodStartYearInt\", parseInt(pm.environment.get(\"periodStartYear\")));",
													"",
													"pm.environment.set(\"periodStartMonthInt\", parseInt(pm.environment.get(\"periodStartMonth\")));",
													"",
													"console.log(\"PeriodStartYear is :\" +pm.environment.get(\"periodStartYearInt\"));",
													"console.log(\"PeriodStartMonth is :\" +pm.environment.get(\"periodStartMonthInt\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_4}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Client",
							"item": [
								{
									"name": "PWA /currencies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/currencies",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"currencies"
											]
										},
										"description": "Gets a supplier for a given client"
									},
									"response": []
								},
								{
									"name": "PWA /settings/ID 1 -SetClosingDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"const jsonDataAL = pm.response.json();\r",
													"   //console.log(jsonDataAL);\r",
													"\r",
													"    var jsonDataAL1;\r",
													"\r",
													"    var i;\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].key == \"Periodization_UseCostAccountToVatCode\") {\r",
													"            var jsonDataAL1 =jsonDataAL[i];\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat code is not connected to cost account.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"value\", false);\r",
													"});\r",
													"}\r",
													"if (jsonDataAL[i].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
													"            var jsonDataAL1 =jsonDataAL[i];\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodozedsLines  are regarded.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"value\", false);\r",
													"});\r",
													"}\r",
													"if (jsonDataAL[i].key == \"Accounts_ClosingDate\") {\r",
													"            var jsonDataAL1 =jsonDataAL[i];\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Accounts_ClosingDate  is set.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"value\", pm.environment.get(\"Accounts_ClosingDate\"));\r",
													"});\r",
													"}\r",
													"}\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"// pm.environment.set(\"Accounts_ClosingDate\", moment().format(\"YYYY-MM-DD\"));",
													"pm.environment.set(\"Accounts_ClosingDate\", moment().subtract(1, \"day\").format(\"YYYY-MM-DD\"));",
													"",
													"",
													"console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": \"{{Accounts_ClosingDate}}\"\n    },\n    {\n        \"key\": \"EnableVatHandling\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": false\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"Periodization_UseCostAccountToVatCode\",\n        \"value\": false\n    },\n    {\n        \"key\": \"Reinvoicing_Enable\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture_Threshold\",\n        \"value\": 1\n    },\n    {\n        \"key\": \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_MissingBuyerRefStepEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_PassthroughInvoicesWithoutWorkflow\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_WorkflowType\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_ContractType\",\n        \"value\": null\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/settings",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"settings"
											],
											"query": [
												{
													"key": "take",
													"value": "15",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{cAccountingCode-A}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonDataSettings = pm.response.json();\r",
													"\r",
													"    var i, j\r",
													"\r",
													"    for (i in jsonDataSettings) {\r",
													"        if (jsonDataSettings[i].groupKey == \"Accounting\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_ClosingDate\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"EnableVatHandling\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"DateExtractor\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"DateExtractor_MinimumThresholdAmount\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Periodization_UseCostAccountToVatCode\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"Reinvoicing\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture_Threshold\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"VoucherNumbers\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SetByErp\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"Workflow\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_AllowPostWithoutApprove\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_MissingBuyerRefStepEnabled\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_PassthroughInvoicesWithoutWorkflow\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_WorkflowType\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_ContractType\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/settings",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"settings"
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								}
							]
						},
						{
							"name": "Fixed Asset",
							"item": [
								{
									"name": "INT - Supplier FA",
									"item": [
										{
											"name": "INT /suppliers FA",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMMD\"));\r",
															"pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('DesSupplier', moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
															"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    \r",
															"    pm.response.to.have.status(200);\r",
															"\r",
															"    if (pm.response.code != 200) {\r",
															"        console.log(pm.response)\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"if (pm.response.code != 200) {\r",
															"    console.log(pm.response)\r",
															"} "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-FA}}\",\n            \"city\": \"city-{{cSupplierCode-FA}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-FA}}\",\n            \"phone\": \"phone-{{cSupplierCode-FA}}\",\n            \"email\": \"email-{{cSupplierCode-FA}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-FA}}\",\n        \"name\": \"FixedAsset-{{cSupplierCode-FA}}\",\n        \"organizationNumber\": \"{{cSupplierCode-FA}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-FA}}-{{DesSupplier}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-FA}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-FA}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-FA}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-FA}}\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "<uuid>",
															"description": "(Required) Organization id of which this suppliers are related to."
														},
														{
															"key": "clientId",
															"value": "<uuid>",
															"description": "(Required) Client id of which this suppliers are related to."
														}
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "INT /suppliers/FA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : FixedAsset-FA-2105 is found.\", function () {\r",
															"\r",
															"        pm.expect(jsonData).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-FA\"));\r",
															"        // pm.expect(jsonData).to.have.property(\"accountNumber\", \"BBAN-A2-\" + YYMM);\r",
															"        // pm.expect(jsonData).to.have.property(\"purchaseOrderNumber\", null);\r",
															"        // pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", \"-1\");\r",
															"        // pm.expect(jsonData).to.have.property(\"isDeleted\", false);\r",
															"        // pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
															"        // pm.expect(jsonData).to.have.property(\"description\", null);\r",
															"\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-FA}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers",
														"{{cSupplierCode-FA}}"
													]
												},
												"description": "Gets a supplier for a given client"
											},
											"response": []
										}
									]
								},
								{
									"name": "/transactiontypes AI",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('TT-AI', 'TT-AI');\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{TT-AI}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype AI\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype AI\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"transactiontypes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets AI",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('FA-AI', 'FA-AI');\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{FA-AI}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"TT-AI\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed TT\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast TT æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/transactiontypes Manual",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('TT_Manual', \"TT-M\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{TT_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype 1\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"transactiontypes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets Manual",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('FA_Manual', \"FA-M\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{FA_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{TT_Manual}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed Asset\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Eiendel æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - Dimension",
							"item": [
								{
									"name": "Dimension X",
									"item": [
										{
											"name": "INT /dimensions X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.collectionVariables.set(\"cDimensionCode-X\", \"cDimCodeX-\" + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('DesDimensions-X', moment().format(\"YYYYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{cDimensionCode-X}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-X}} æøå-{{DesDimensions-X}}\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-X}}\",\n            \"languageCode\": \"English\"\n        }\n    ],\n    \"externalId\":\"{{cDimensionCode-X}}-externalId\"\n}"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT /dimensions/X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-X}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/X/values/X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
															"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());\r",
															"\r",
															"// Create some sort of stack trace for DevOps\r",
															"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
															"pm.environment.set(\"cDimensionCodeValue-X\", \"DimValueX-\" + moment().format(\"YYMM\"));\r",
															"pm.environment.set('DesDimensionCodeValue-X', moment().format(\"YYYYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-X}}\",\n        \"code\": \"{{cDimensionCodeValue-X}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{cHHmmss}}-Alias-A\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DesDimensionCodeValue-X}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cDimensionCodeValue-X}}-externalId\"\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-X}}",
														"values"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT /dimensions/X/values/X",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}/values/{{cDimensionCodeValue-X}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-X}}",
														"values",
														"{{cDimensionCodeValue-X}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/X/values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-X}}",
														"values"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "INT - Delivery Address",
							"item": [
								{
									"name": "/addresses - Delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set(\"code-Delivery\", \"code-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"externalCode-Delivery\", \"externalCode-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"name-Delivery\", \"name-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"addressType-Delivery\", \"Delivery\");\r",
													"pm.collectionVariables.set(\"address1-Delivery\", \"address1-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"address2-Delivery\", \"address2-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"zipCode-Delivery\", \"zipCode-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"city-Delivery\", \"city-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"country-Delivery\", \"NO\");\r",
													"pm.collectionVariables.set(\"status\", \"Active\");\r",
													"\r",
													"pm.collectionVariables.set(\"code-Delivery-Encoded\", encodeURIComponent(pm.collectionVariables.get(\"code-Delivery\")));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
													"\r",
													"pm.test(apiName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"code\": \"{{code-Delivery}}\",\r\n    \"externalCode\": \"{{externalCode-Delivery}}\",\r\n    \"name\": \"{{name-Delivery}}\",\r\n    \"addressType\": \"{{addressType-Delivery}}\",\r\n    \"address1\": \"{{address1-Delivery}}\",\r\n    \"address2\": \"{{address2-Delivery}}\",\r\n    \"zipCode\": \"{{zipCode-Delivery}}\",\r\n    \"city\": \"{{city-Delivery}}\",\r\n    \"country\": \"{{country-Delivery}}\",\r\n    \"status\": \"Active\"\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/addresses",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "/addresses/code  - Delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
													"\r",
													"pm.test(apiName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    let address = pm.response.json();\r",
													"\r",
													"    pm.test(apiName + \" : All address fields.\", function () {\r",
													"        pm.expect(pm.collectionVariables.get('code-Delivery')).is.to.equal(address.code);\r",
													"        pm.expect(pm.collectionVariables.get('externalCode-Delivery')).is.to.equal(address.externalCode);\r",
													"        pm.expect(pm.collectionVariables.get('name-Delivery')).is.to.equal(address.name);\r",
													"        pm.expect(pm.collectionVariables.get('addressType-Delivery')).is.to.equal(address.addressType);\r",
													"        pm.expect(pm.collectionVariables.get('address1-Delivery')).is.to.equal(address.address1);\r",
													"        pm.expect(pm.collectionVariables.get('address2-Delivery')).is.to.equal(address.address2);\r",
													"        pm.expect(pm.collectionVariables.get('zipCode-Delivery')).is.to.equal(address.zipCode);\r",
													"\r",
													"        pm.expect(pm.collectionVariables.get('city-Delivery')).is.to.equal(address.city);\r",
													"        pm.expect(pm.collectionVariables.get('country-Delivery')).is.to.equal(address.country);\r",
													"        pm.expect(\"Active\").is.to.equal(address.status);\r",
													"    });\r",
													"    console.log(pm.response.json())\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/addresses/{{code-Delivery-Encoded}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"addresses",
												"{{code-Delivery-Encoded}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - Supplier A",
							"item": [
								{
									"name": "INT /suppliers A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cSupplierCode-A', 'Supplier-A2-' +  moment().format(\"YYMM\"));\r",
													"pm.environment.set('cSupplierVATId-A', 'Supplier-A2-' +  moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('Dessupplier-A', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
													"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-A}}\",\n            \"city\": \"city-{{cSupplierCode-A}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-A}}\",\n            \"phone\": \"phone-{{cSupplierCode-A}}\",\n            \"email\": \"email-{{cSupplierCode-A}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-A}}\",\n        \"name\": \"name-{{cSupplierCode-A}}\",\n        \"organizationNumber\": \"orgnr-{{cSupplierCode-A}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-A}}-{{Dessupplier-A}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}-1\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}-1\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}-1\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}-1-{{supplier}}\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}-2\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}-2\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}-2\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}-2-{{supplier}}\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}-3\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}-3\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}-3\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}-3-{{supplier}}\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "INT /suppliers/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers",
												"{{cSupplierCode-A}}"
											]
										},
										"description": "Gets a supplier for a given client"
									},
									"response": []
								}
							]
						},
						{
							"name": "SETUP",
							"item": [
								{
									"name": "VAT",
									"item": [
										{
											"name": "/vatcodes - 25,15,10,0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"// pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"// pm.environment.set('cVatCode-R2', 'R2-VAT-' + moment().format(\"YYMM\"));\r",
															"// pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"// pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"VAT-25\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"25% VAT code\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"25% MVA kode æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 25\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-15\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"15% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"15% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 15\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-10\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"10% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"10% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 10\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-0\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"0% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"0% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 0\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-25",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-25",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-25"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-15",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-15",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-15"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-10",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-10"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-0",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-0"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Ledger",
									"item": [
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"Interim-1\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Interim account\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim konto æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Interim-1",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Interim-1"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes 25, 15 AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"Ledger-25-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"VAT-25\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 25%\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 25% æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"Ledger-15-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"Interim-1\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"VAT-15\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 15% and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 15% og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-25-AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Ledger-25-AI",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Ledger-25-AI"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-15-AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Ledger-15-AI",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Ledger-15-AI"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes 25, 15 Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('Ledger_15_Manual', \"Ledger-15-M-\");\r",
															"pm.environment.set('Ledger_25_Manual', \"Ledger-25-M-\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{Ledger_25_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"VAT-25\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 25%\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 25% æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{Ledger_15_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"Interim-1\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"VAT-15\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 15% and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 15% og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-25-Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_25_Manual}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{Ledger_25_Manual}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-15-Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_15_Manual}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{Ledger_15_Manual}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "INT - Ledger",
							"item": [
								{
									"name": "INT clients/ID/accountingcodes A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-A', 'cAccCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingCodeClient', moment().format(\"YYYYMMDD-HHmmss\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingCodeClient}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{cAccountingCode-A}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-A}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/A - Get active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cAccountingCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"{{cAccountingCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT organizations/ID/accountingcodes A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('oAccountingCode-A', 'oAccCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingCodeOrg', moment().format(\"YYYYMMDD-HHmmss\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{oAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingCodeOrg}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{oAccountingCode-A}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{oAccountingCode-A}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT organizations/ID/accountingcodes/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes/{{oAccountingCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"accountingcodes",
												"{{oAccountingCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Currencies",
							"item": [
								{
									"name": "Currencies Client Level",
									"item": [
										{
											"name": "INT /client/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"validFrom\", moment());",
															"console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"currencyCode\": \"EUR\",\n        \"baseCurrency\": \"NOK\",\n        \"validFrom\": \"{{validFrom}}\",\n        \"conversionRate\": 10,\n        \"numberOfUnits\": 1,\n        \"externalId\": null\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/currency",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"currency"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "PWA / client/currencies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonDataCur;\r",
															"for(i in jsonData){\r",
															"      if(jsonData[i].currencyCode ==\"EUR\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
															"          jsonDataCur=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"  }\r",
															"        pm.environment.set(\"validFrom\", jsonDataCur.validFrom);\r",
															"        pm.environment.set(\"currencyCode\", jsonDataCur.currencyCode);\r",
															"        pm.environment.set(\"conversionRate\", jsonDataCur.conversionRate);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"validFrom\"));\r",
															"        });\r",
															"\r",
															"}\r",
															"console.log(\"Currency is : \" +pm.environment.get(\"currencyCode\"));\r",
															"console.log(\"ValidFrom is : \" +pm.environment.get(\"validFrom\"));\r",
															"console.log(\"ConversionRate is : \" +pm.environment.get(\"conversionRate\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/currencies",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"currencies"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT/ client/currency/code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json();\r",
															"  // console.log(jsonDataAL);\r",
															"  var jsonDataCur;\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].validFrom= pm.environment.get(\"validFrom\")){\r",
															"          jsonDataCur=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"  }\r",
															"       pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"currencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"validFrom\"));\r",
															"        });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/currency/{{currencyCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"currency",
														"{{currencyCode}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "--- Currency OrgLevel Switch---",
									"item": [
										{
											"name": "---  Switch ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var environment = pm.environment.get(\"ENV\");\r",
															"// console.log(environment)\r",
															"switch (environment) {\r",
															"\r",
															"    case \"DEV\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Dev ---\");\r",
															"        break;\r",
															"    case \"PROD\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-PROD ---\");\r",
															"        break;\r",
															"\r",
															"    case \"TEST\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-PROD ---\")\r",
															"        break;\r",
															"\r",
															"    case \"UAT\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-PROD ---\")\r",
															"        break;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Currency OrgLevel Dev",
									"item": [
										{
											"name": "--- Currecy Dev ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT /organizations/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"oValidFrom\", moment());",
															"// console.log(pm.environment.get(\"validFrom\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"currencyCode\": \"EUR\",\n    \"baseCurrency\": \"NOK\",\n    \"validFrom\": \"{{oValidFrom}}\",\n    \"conversionRate\": 10,\n    \"numberOfUnits\": 1,\n    \"externalId\": null\n  }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "PWA /organizations/currencies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonDataCur;\r",
															"for(i in jsonData){\r",
															"      if(jsonData[i].currencyCode ==\"EUR\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
															"          jsonDataCur=jsonData[i]\r",
															"      }\r",
															"  }  \r",
															"        pm.environment.set(\"oValidFrom\", jsonDataCur.validFrom);\r",
															"        pm.environment.set(\"oCurrencyCode\", jsonDataCur.currencyCode);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Org Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"oCurrencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"oValidFrom\"));\r",
															"        });\r",
															"}\r",
															"\r",
															"\r",
															"console.log(\"Org Currency is : \" +pm.environment.get(\"oCurrencyCode\"));\r",
															"console.log(\"Org ValidFrom is : \" +pm.environment.get(\"oValidFrom\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT/ organizations/currency/code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var jsonDataCur;\r",
															"  // console.log(jsonDataAL);\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].validFrom= pm.environment.get(\"oValidFrom\")){\r",
															"          jsonDataCur=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"  }\r",
															"       pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Org Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"oCurrencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"oValidFrom\"));\r",
															"        });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency/{{oCurrencyCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency",
														"{{oCurrencyCode}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/excluded/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonData_1;\r",
															"var jsonData_2;\r",
															"var jsonData_3;\r",
															"var jsonData_4;\r",
															"var jsonData_5;\r",
															"   console.log(jsonData);\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].erpId== \"0007\"){\r",
															"          jsonData_1=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_1\", jsonData_1.id);\r",
															"      if(jsonData[i].erpId== \"0008\"){\r",
															"          jsonData_2=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_2\", jsonData_2.id);\r",
															"      if(jsonData[i].erpId== \"0009\"){\r",
															"          jsonData_3=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_3\", jsonData_3.id);\r",
															"\r",
															"      if(jsonData[i].erpId== \"0010\"){\r",
															"          jsonData_4=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_4\", jsonData_4.id);\r",
															"      if(jsonData[i].erpId== \"0001\"){\r",
															"          jsonData_5=jsonData[i];\r",
															"          break;\r",
															"      }\r",
															"       pm.environment.set(\"clientId\", jsonData_5.id);\r",
															"  }\r",
															"}\r",
															"  console.log(\"ClientId_1 is : \" +pm.environment.get(\"clientId_1\"));\r",
															"  console.log(\"ClientId_2 is : \" +pm.environment.get(\"clientId_2\"));\r",
															"  console.log(\"ClientId_3 is : \" +pm.environment.get(\"clientId_3\"));\r",
															"  console.log(\"ClientId_4 is : \" +pm.environment.get(\"clientId_4\"));\r",
															"  console.log(\"SharedTestClient is : \" +pm.environment.get(\"clientId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/excluded/clients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"excluded",
														"clients"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/inheritance-Add",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addInheritanceList\": [\n        \"{{clientId}}\"\n    ],\n    \"removeInheritanceList\": []\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/inheritance",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"inheritance"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/excluded/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"// if (pm.response.code == 200) {\r",
															"// var jsonData = pm.response.json().data;\r",
															"// var jsonDataClient;\r",
															"//   // console.log(jsonDataAL);\r",
															"//   for(i in jsonData){\r",
															"//       if(jsonData[i].id==pm.environment.get(\"clientId\")){\r",
															"//           jsonDataClient=jsonData[i];\r",
															"//           break;\r",
															"//       }   \r",
															"//       }\r",
															"//        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : Client is abled.\", function () {\r",
															"//             pm.expect(jsonDataClient).to.have.property(\"isInherited\", true);\r",
															"// });\r",
															"// }\r",
															"//   //console.log(\"ClientId_1 is : \" +pm.environment.get(\"clientId_1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/excluded/clients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"excluded",
														"clients"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "--- Skip to PWA Start_1 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// console.log('--- Skipping to PWA ---');\r",
															"postman.setNextRequest(\"--- PWA Start_1 ---\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Currency OrgLevel Test-UAT-PROD",
									"item": [
										{
											"name": "--- Currecy Test-UAT-PROD ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "--- Skip to PWA Start_1 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// console.log('--- Skipping to PWA ---');\r",
															"postman.setNextRequest(\"--- PWA Start_1 ---\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT /organizations/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"oValidFrom\", moment());",
															"// console.log(pm.environment.get(\"validFrom\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  {\n    \"currencyCode\": \"EUR\",\n    \"baseCurrency\": \"NOK\",\n    \"validFrom\": \"{{oValidFrom}}\",\n    \"conversionRate\": 10,\n    \"numberOfUnits\": 1,\n    \"externalId\": null\n  }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "PWA /organizations/currencies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonDataCur;\r",
															"for(i in jsonData){\r",
															"      if(jsonData[i].currencyCode ==\"EUR\" && jsonData[i].baseCurrencyCode==\"NOK\"  ){\r",
															"          jsonDataCur=jsonData[i]\r",
															"      }\r",
															"  }  \r",
															"        pm.environment.set(\"oValidFrom\", jsonDataCur.validFrom);\r",
															"        pm.environment.set(\"oCurrencyCode\", jsonDataCur.currencyCode);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Org Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"oCurrencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"oValidFrom\"));\r",
															"        });\r",
															"}\r",
															"\r",
															"\r",
															"console.log(\"Org Currency is : \" +pm.environment.get(\"oCurrencyCode\"));\r",
															"console.log(\"Org ValidFrom is : \" +pm.environment.get(\"oValidFrom\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT/ organizations/currency/code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var jsonDataCur;\r",
															"  // console.log(jsonDataAL);\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].validFrom= pm.environment.get(\"oValidFrom\")){\r",
															"          jsonDataCur=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"  }\r",
															"       pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Org Curruncy is found.\", function () {\r",
															"        pm.expect(jsonDataCur).to.have.property(\"currencyCode\", pm.environment.get(\"oCurrencyCode\"));\r",
															"        pm.expect(jsonDataCur).to.have.property(\"validFrom\", pm.environment.get(\"oValidFrom\"));\r",
															"        });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency/{{oCurrencyCode}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency",
														"{{oCurrencyCode}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/excluded/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonData_1;\r",
															"var jsonData_2;\r",
															"var jsonData_3;\r",
															"var jsonData_4;\r",
															"var jsonData_5;\r",
															"   console.log(jsonData);\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].erpId== \"0007\"){\r",
															"          jsonData_1=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_1\", jsonData_1.id);\r",
															"      if(jsonData[i].erpId== \"0008\"){\r",
															"          jsonData_2=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_2\", jsonData_2.id);\r",
															"      if(jsonData[i].erpId== \"0009\"){\r",
															"          jsonData_3=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_3\", jsonData_3.id);\r",
															"\r",
															"      if(jsonData[i].erpId== \"0010\"){\r",
															"          jsonData_4=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"      pm.environment.set(\"clientId_4\", jsonData_4.id);\r",
															"      if(jsonData[i].erpId== \"0001\"){\r",
															"          jsonData_5=jsonData[i]\r",
															"          break;\r",
															"      }\r",
															"       pm.environment.set(\"clientId\", jsonData_5.id);\r",
															"  }\r",
															"}\r",
															"  console.log(\"ClientId_1 is : \" +pm.environment.get(\"clientId_1\"));\r",
															"  console.log(\"ClientId_2 is : \" +pm.environment.get(\"clientId_2\"));\r",
															"  console.log(\"ClientId_3 is : \" +pm.environment.get(\"clientId_3\"));\r",
															"  console.log(\"ClientId_4 is : \" +pm.environment.get(\"clientId_4\"));\r",
															"  console.log(\"SharedTestClient is : \" +pm.environment.get(\"clientId\"));\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/excluded/clients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"excluded",
														"clients"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/inheritance-Add",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"addInheritanceList\": [\n        \"{{clientId}}\"\n    ],\n    \"removeInheritanceList\": []\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/inheritance",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"inheritance"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA / organization/currencies/excluded/clients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"var jsonData = pm.response.json().data;\r",
															"var jsonDataClient;\r",
															"  // console.log(jsonDataAL);\r",
															"  for(i in jsonData){\r",
															"      if(jsonData[i].id==pm.environment.get(\"clientId\")){\r",
															"          jsonDataClient=jsonData[i];\r",
															"          break;\r",
															"      }   \r",
															"      }\r",
															"       pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : Client is abled.\", function () {\r",
															"            pm.expect(jsonDataClient).to.have.property(\"isInherited\", true);\r",
															"});\r",
															"}\r",
															"  //console.log(\"ClientId_1 is : \" +pm.environment.get(\"clientId_1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/currencies/excluded/clients",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currencies",
														"excluded",
														"clients"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "--- PWA Start_1 ---",
									"item": [
										{
											"name": "--- PWA Start_1 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "List parameters",
					"item": [
						{
							"name": "PWA /parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json()\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
											"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
											"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
											"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"condensed"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /parameters/condensed - Get dimensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"\r",
											"//////// Find dimensions /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json()\r",
											"\r",
											"    for (x in jsonData) {\r",
											"\r",
											"        // Dimension X\r",
											"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-X\")) {\r",
											"            pm.environment.set(\"parameterIdDimCode-X\", jsonData[x].parameterId)\r",
											"            console.log(jsonData[x].parameterId);\r",
											"        }\r",
											"    }\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"condensed"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /parameters/LEDGER/groupedsettings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"\r",
											"//Check if AI is enabled\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"    var x, i, j;\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].groupKey == \"Ai_Settings\") {\r",
											"            for (j in jsonData[i].settingKeyValues) {\r",
											"\r",
											"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Enabled\") {\r",
											"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ai_Enabled true.\", function () {\r",
											"                        pm.expect(jsonData[i].settingKeyValues[j]).to.have.property(\"value\", true);\r",
											"                    });\r",
											"                }\r",
											"\r",
											"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Threshold\") {\r",
											"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Ai_Threshold 50.0.\", function () {\r",
											"                        pm.expect(jsonData[i].settingKeyValues[j]).to.have.property(\"value\", 50.0);\r",
											"                    });\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/groupedsettings",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdLedger}}",
										"groupedsettings"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "Dimension-AccountingRelation-MultipleAliases-ClientForAcl03",
					"item": [
						{
							"name": "INT clients/ID/accountingcodes A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cAccountingCode-A', 'cAccCode-A-' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-A}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes/A - Get active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-A}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes",
										"{{cAccountingCode-A}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cAccountingCode-B', 'cAccCode-B-' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-B}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-B}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes/B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes",
										"{{cAccountingCode-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cAccountingCode-C', 'cAccCode-C-' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-C}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-C}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes/C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-C}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes",
										"{{cAccountingCode-C}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cAccountingCode-D', 'cAccCode-D-' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-D}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-D}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes/D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-D}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"accountingcodes",
										"{{cAccountingCode-D}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensions B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cDimensionCode-B', 'cDimCodeB-' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('Dimensions_B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{cDimensionCode-B}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"Norsk æøå-{{Dimensions_B}}\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"Dimension\",\n            \"languageCode\": \"English\"\n        }\n    ],\n     \"externalId\":\"{{cDimensionCode-B}}-externalId\"\n}"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT /dimensions/B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensionsB/values/B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
											"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('Alias-1', \"Alias-1-\"+ moment().format(\"HHmmss\"));\r",
											"\r",
											"pm.environment.set('Alias-2', \"Alias-2-\"+moment().format(\"HHmmss\"));\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
											"\r",
											"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-A}}\",\n                \"code\": \"{{cAccountingCode-A}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{Alias-1}}\",\n            \"{{Alias-2}}\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT /dimensions/B/values/B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////// Check Aliases and relations are applied.\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    console.log(jsonData);\r",
											"    console.log(jsonData);\r",
											"    var aliasesResponseBody=[];\r",
											"    aliasesResponseBody.push(jsonData.aliases[0],jsonData.aliases[1]);\r",
											"    aliasesResponseBody.sort();\r",
											"    //console.log(aliasesResponseBody);\r",
											"\r",
											"    var aliases=[];\r",
											"    aliases.push(pm.environment.get(\"Alias-1\"), pm.environment.get(\"Alias-2\"));\r",
											"    aliases.sort();\r",
											"    \r",
											"    //console.log(aliases);\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-A\"));\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
											"    pm.expect(aliasesResponseBody).to.be.eql(aliases);\r",
											"                \r",
											"            });\r",
											"    }\r",
											"\r",
											"// console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values",
										"{{cDimensionCodeValue-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
											"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('Alias-3', \"Alias-3-\"+ moment().format(\"HHmmss\"));\r",
											"\r",
											"pm.environment.set('Alias-4', \"Alias-4-\"+moment().format(\"HHmmss\"));\r",
											"pm.environment.set('Alias-5', \"Alias-5-\"+moment().format(\"HHmmss\"));\r",
											"\r",
											"// pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
											"\r",
											"// pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-B}}\",\n                \"code\": \"{{cAccountingCode-B}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{Alias-3}}\",\n            \"{{Alias-4}}\",\n            \"{{Alias-5}}\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values?preserveExistingAliases=true&preserveExistingRelations=true",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values"
									],
									"query": [
										{
											"key": "preserveExistingAliases",
											"value": "true"
										},
										{
											"key": "preserveExistingRelations",
											"value": "true"
										}
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT /dimensions/B/values/B True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////// Check Aliases and relations are applied.\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    console.log(jsonData);\r",
											"    var aliasesResponseBody=[];\r",
											"    aliasesResponseBody.push(jsonData.aliases[0],jsonData.aliases[1],jsonData.aliases[2],jsonData.aliases[3],jsonData.aliases[4]);\r",
											"    aliasesResponseBody.sort();\r",
											"    //console.log(aliasesResponseBody);\r",
											"\r",
											"    var aliases=[];\r",
											"    aliases.push(pm.environment.get(\"Alias-1\"), pm.environment.get(\"Alias-2\"),pm.environment.get(\"Alias-3\"), pm.environment.get(\"Alias-4\"),pm.environment.get(\"Alias-5\"));\r",
											"    aliases.sort();\r",
											"    \r",
											"    //console.log(aliases);\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
											"    pm.expect(jsonData.relations[0].code).to.be.oneOf([pm.environment.get(\"cAccountingCode-A\"), pm.environment.get(\"cAccountingCode-B\")]);\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
											"    pm.expect(jsonData.relations[1]).to.have.property(\"type\", \"AccountingCode\");\r",
											"    pm.expect(jsonData.relations[1].code).to.be.oneOf([pm.environment.get(\"cAccountingCode-A\"), pm.environment.get(\"cAccountingCode-B\")]);\r",
											"    pm.expect(jsonData.relations[1]).to.have.property(\"operation\", \"Requirement\");\r",
											"    pm.expect(aliasesResponseBody).to.be.eql(aliases);\r",
											"                \r",
											"            });\r",
											"    }\r",
											"\r",
											"// console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values",
										"{{cDimensionCodeValue-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-False Default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
											"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"// Create some sort of stack trace for DevOps\r",
											"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('Alias-6', \"Alias-6-\"+ moment().format(\"HHmmss\"));\r",
											"\r",
											"pm.environment.set('Alias-7', \"Alias-7-\"+moment().format(\"HHmmss\"));\r",
											"\r",
											"// pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
											"\r",
											"// pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-C}}\",\n                \"code\": \"{{cAccountingCode-C}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{Alias-6}}\",\n            \"{{Alias-7}}\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values"
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT /dimensions/B/values/B Default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////// Check Aliases and relations are applied.\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    console.log(jsonData);\r",
											"    var aliasesResponseBody=[];\r",
											"    aliasesResponseBody.push(jsonData.aliases[0],jsonData.aliases[1]);\r",
											"    aliasesResponseBody.sort();\r",
											"    //console.log(aliasesResponseBody);\r",
											"\r",
											"    var aliases=[];\r",
											"    aliases.push(pm.environment.get(\"Alias-6\"), pm.environment.get(\"Alias-7\"));\r",
											"    aliases.sort();\r",
											"    //console.log(aliases);\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-C\"));\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
											"    pm.expect(aliasesResponseBody).to.be.eql(aliases);\r",
											"                \r",
											"            });\r",
											"    }\r",
											"\r",
											"// console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values",
										"{{cDimensionCodeValue-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
											"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"// Create some sort of stack trace for DevOps\r",
											"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('Alias-8', \"Alias-8-\"+ moment().format(\"HHmmss\"));\r",
											"\r",
											"pm.environment.set('Alias-9', \"Alias-9-\"+moment().format(\"HHmmss\"));\r",
											"// pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
											"\r",
											"// pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-D}}\",\n                \"code\": \"{{cAccountingCode-D}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{Alias-8}}\",\n            \"{{Alias-9}}\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values?preserveExistingAliases=false&preserveExistingRelations=false",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values"
									],
									"query": [
										{
											"key": "preserveExistingAliases",
											"value": "false"
										},
										{
											"key": "preserveExistingRelations",
											"value": "false"
										}
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT /dimensions/B/values/B False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"///////// Check Aliases and relations are applied.\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    console.log(jsonData);\r",
											"    var aliasesResponseBody=[];\r",
											"    aliasesResponseBody.push(jsonData.aliases[0],jsonData.aliases[1]);\r",
											"    aliasesResponseBody.sort();\r",
											"    //console.log(aliasesResponseBody);\r",
											"\r",
											"    var aliases=[];\r",
											"    aliases.push(pm.environment.get(\"Alias-8\"), pm.environment.get(\"Alias-9\"));\r",
											"    aliases.sort();\r",
											"    //console.log(aliases);\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-D\"));\r",
											"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
											"    pm.expect(aliasesResponseBody).to.be.eql(aliases);\r",
											"                \r",
											"            });\r",
											"    }\r",
											"\r",
											"// console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_3}}",
										"dimensions",
										"{{cDimensionCode-B}}",
										"values",
										"{{cDimensionCodeValue-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						}
					]
				},
				{
					"name": "PWA - Supplier A",
					"item": [
						{
							"name": "PWA /suppliers/search - query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Get the supplier id based on erpVendorId (supplier code)\r",
											"var j = 0;\r",
											"while (j < jsonData.length) {\r",
											"    if (\r",
											"        jsonData[j].erpVendorId == pm.environment.get(\"cSupplierCode-A\")) {\r",
											"        pm.environment.set(\"cSupplierId-A\", jsonData[j].id);\r",
											"        pm.environment.set(\"cSupplierVATId-A\", jsonData[j].vatId);\r",
											"        console.log(jsonData[j].erpVendorId + \"  \" + jsonData[j].id);\r",
											"    }\r",
											"    j++;\r",
											"}\r",
											"\r",
											"console.log(pm.environment.get(\"cSupplierId-A\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/search?query={{cSupplierCode-A}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "{{cSupplierCode-A}}",
											"description": "Free text query to search for supplier"
										},
										{
											"key": "skip",
											"value": "1",
											"description": "Skip records",
											"disabled": true
										},
										{
											"key": "take",
											"value": "2",
											"description": "Take records",
											"disabled": true
										},
										{
											"key": "textSearch",
											"value": "{{cSupplierCode-A}}",
											"disabled": true
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /suppliers/A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierId-A}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										"{{cSupplierId-A}}"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /suppliers/ Take 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/?take=2",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										""
									],
									"query": [
										{
											"key": "take",
											"value": "2"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "--- Invoice Type ---",
					"item": [
						{
							"name": "---  Switch ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const invoiceType = pm.environment.get(\"invoiceType\");\r",
											"// console.log(invoiceType)\r",
											"switch (invoiceType) {\r",
											"\r",
											"    case \"ApiCostInvoice\":\r",
											"        console.log(invoiceType);\r",
											"        postman.setNextRequest(\"--- API Cost Invoice ---\");\r",
											"        break;\r",
											"\r",
											"    case \"UblCostInvoice\":\r",
											"        console.log(invoiceType);\r",
											"        postman.setNextRequest(\"--- UBL Cost Invoice ---\")\r",
											"        break;\r",
											"}\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmssS\"));\r",
											"\r",
											"// Invoice dates\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cInvoiceDate\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"pm.environment.set(\"dateStart\", \"05\" + moment().subtract(1, 'days').format(\".MM.YYYY\"));\r",
											"pm.environment.set(\"dateEnd\", \"05\" + moment().add(90, 'days').format(\".MM.YYYY\"));\r",
											"\r",
											"pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"console.log(pm.environment.get(\"dateEnd\"))\r",
											"\r",
											"//console.log(pm.environment.get(\"startPeriodMonth\"))\r",
											"\r",
											"\r",
											"\r",
											"// console.log(moment().subtract(0, 'days').format('M'))\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.09.2020\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.12.2020\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"20\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"9\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Duplicate Invoice",
					"item": [
						{
							"name": "INT /invoices - Cost Minimum - Init_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.environment.set(\"clientName\", jsonData.name);",
											"    pm.environment.set(\"clientRegistrationNumber\", jsonData.registrationNumber);",
											"    pm.environment.set(\"clientErpId\", jsonData.erpId);",
											"    pm.environment.set(\"clientErpType\", jsonData.erpType);",
											"    pm.environment.set(\"clientStreet\", jsonData.street);",
											"    pm.environment.set(\"clientCity\", jsonData.city);",
											"    pm.environment.set(\"clientZip\", jsonData.zip);",
											"    pm.environment.set(\"clientEmail\", jsonData.Email);",
											"    pm.environment.set(\"clientCurrency\", jsonData.currency);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N_1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(\"InvoiceNumber is : \" +pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// // Invoice dates\r",
											"// pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"// pm.environment.set(\"cInvoiceDate\", moment());\r",
											"// pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.04.2021\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.06.2021\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"21\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"4\");\r",
											"\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", moment().subtract(1, 'days').format(\"DD.MM.YYYY\"));\r",
											"// pm.environment.set(\"dateEnd\", moment().add(30, 'days').format(\"DD.MM.YYYY\"));\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"// pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"// pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// console.log(pm.environment.get(\"startPeriodMonth\"))\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											"\r",
											"// function sleep(milisecond) {\r",
											"//     var date = Date.now();\r",
											"//     while ((date + milisecond) > Date.now());\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{invoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-A}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Mobile-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Web-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": \"Mobile-CP-{{clientRegistrationNumber}}\",\r\n        \"Web\": \"Web-CP-{{clientRegistrationNumber}}\",\r\n        \"Street\": \"Street-CP-{{clientRegistrationNumber}}\",\r\n        \"Zip\": \"Zip-CP\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City-CP\",\r\n        \"BankAccountNumber\": \"BBAN-CP-{{clientRegistrationNumber}}\",\r\n        \"IbanAccountNumber\": \"IBAN-CP-{{clientRegistrationNumber}}\"\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n\r\n            \"Description\": \"DimValue:  {{cDimensionCodeValue-A}} CamelCaseAlias\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "---  sleep 45 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(45);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 100) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is InReview or Received.\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([\"Received\", \"InReview\"]);\r",
											"    });\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											" pm.environment.set(\"invoiceNumber_1\", jsonData.invoiceNumber);\r",
											"\r",
											" console.log(pm.environment.get(\"invoiceNumber_1\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - DuplicateInvoiceRepeat N _2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// // Invoice dates\r",
											"// pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"// pm.environment.set(\"cInvoiceDate\", moment());\r",
											"// pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.04.2021\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.06.2021\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"21\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"4\");\r",
											"\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", moment().subtract(1, 'days').format(\"DD.MM.YYYY\"));\r",
											"// pm.environment.set(\"dateEnd\", moment().add(30, 'days').format(\"DD.MM.YYYY\"));\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"// pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"// pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// console.log(pm.environment.get(\"startPeriodMonth\"))\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											"\r",
											"// function sleep(milisecond) {\r",
											"//     var date = Date.now();\r",
											"//     while ((date + milisecond) > Date.now());\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber_1}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{invoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-A}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Mobile-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Web-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": \"Mobile-CP-{{clientRegistrationNumber}}\",\r\n        \"Web\": \"Web-CP-{{clientRegistrationNumber}}\",\r\n        \"Street\": \"Street-CP-{{clientRegistrationNumber}}\",\r\n        \"Zip\": \"Zip-CP\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City-CP\",\r\n        \"BankAccountNumber\": \"BBAN-CP-{{clientRegistrationNumber}}\",\r\n        \"IbanAccountNumber\": \"IBAN-CP-{{clientRegistrationNumber}}\"\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n\r\n            \"Description\": \"DimValue:  {{cDimensionCodeValue-A}} CamelCaseAlias\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "---  sleep 30 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(30);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers -CheckStatusPoll available state_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 100) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is duplicated.\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"status\", \"Duplicate\");\r",
											"    });\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											" pm.environment.set(\"buyerId\", jsonData.buyerRef.id);\r",
											" pm.environment.set(\"invoiceDate\", jsonData.invoiceDate);\r",
											" pm.environment.set(\"dueDate\", jsonData.dueDate);\r",
											" pm.environment.set(\"subsidiaryAddress\", jsonData.subsidiaryAddress);\r",
											" pm.environment.set(\"supplierId_1\", jsonData.seller.erpVendorId);\r",
											" pm.environment.set(\"supplierId_2\", jsonData.seller.bankAccount);\r",
											" pm.environment.set(\"kidNumber\", jsonData.kidNumber);\r",
											"\r",
											"console.log(\"BuyerId is : \"+pm.environment.get(\"buyerId\"));\r",
											"console.log(\"InvoiceDate is : \"+pm.environment.get(\"invoiceDate\"));\r",
											"console.log(\"DueDate is : \"+pm.environment.get(\"dueDate\"));\r",
											"console.log(\"SubsidiaryAddress is : \"+pm.environment.get(\"subsidiaryAddress\"));\r",
											"console.log(\"SupplierId is : \"+pm.environment.get(\"supplierId_1\") + \"*\" +pm.environment.get(\"supplierId_2\") );\r",
											"console.log(\"KidNumber is : \"+pm.environment.get(\"kidNumber\"));\r",
											"    \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers -ChangeInvoiceNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(200);\r",
											"});\r",
											"\r",
											" console.log(\"InvoiceNumber is :\" +pm.environment.get(\"invoiceNumber\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");",
											"var invoiceCount;",
											"",
											"invoiceCount = pm.environment.get(\"invoiceCount\");",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));",
											"",
											"invoiceCount++;",
											"pm.environment.set(\"invoiceCount\", invoiceCount);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"supplierId\": \"{{supplierId_1}}*{{supplierId_2}}\",\n    \"sellerNsParameterValueId\": null,\n    \"buyerId\": \"{{buyerId}}\",\n    \"invoiceCurrency\": \"NOK\",\n    \"exchangeRate\": 1,\n    \"invoiceNumber\": \"{{invoiceNumber}}\",\n    \"invoiceDate\": \"{{invoiceDate}}\",\n    \"dueDate\": \"{{dueDate}}\",\n    \"kidNumber\": \"{{kidNumber}}\",\n    \"netAmount\": 101,\n    \"vatAmount\": 25.15,\n    \"vatHigh\": 25,\n    \"vatMiddle\": 0.15,\n    \"vatLow\": 0,\n    \"totalAmount\": 126.15,\n    \"flagId\": null,\n    \"doNotPay\": false,\n    \"voucherDescription\": null,\n    \"reInvoicingEnabled\": true,\n    \"subsidiaryAddress\": \"{{subsidiaryAddress}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices - Restart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is restarted.\", function () {",
											"    pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);",
											"});",
											"console.log(jsonData.actionExecutedSuccessfully);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionType\": \"ReStart\",\n    \"comment\": \"Ok.\",\n    \"mentionedUserIds\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"actions"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "---  sleep 45 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(45);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers -CheckStatusPoll available state_4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 100) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is InReview.\", function () {\r",
											"        pm.expect(jsonData.status).to.be.eql(\"InReview\");\r",
											"    });\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceNummer is correct.\", function () {\r",
											"        pm.expect(jsonData.invoiceNumber).to.be.eql(pm.environment.get(\"invoiceNumber\"));\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						}
					]
				},
				{
					"name": "API Cost Invoice",
					"item": [
						{
							"name": "--- API Cost Invoice ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(\"InvoiceNumber is : \" +pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// // Invoice dates\r",
											"// pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"// pm.environment.set(\"cInvoiceDate\", moment());\r",
											"// pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.04.2021\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.06.2021\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"21\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"4\");\r",
											"\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", moment().subtract(1, 'days').format(\"DD.MM.YYYY\"));\r",
											"// pm.environment.set(\"dateEnd\", moment().add(30, 'days').format(\"DD.MM.YYYY\"));\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"// pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"// pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// console.log(pm.environment.get(\"startPeriodMonth\"))\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"console.log(\"cInvoiceId is: \" + pm.environment.get(\"cInvoiceId\"));\r",
											"\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											"\r",
											"// function sleep(milisecond) {\r",
											"//     var date = Date.now();\r",
											"//     while ((date + milisecond) > Date.now());\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"{{currencyCode}}\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"ApiTest Controller\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"NO{{cSupplierCode-A}}-1\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{invoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"NO{{cSupplierCode-A}}MVA\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Mobile-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Web-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}-1\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}-1\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": \"Mobile-CP-{{clientRegistrationNumber}}\",\r\n        \"Web\": \"Web-CP-{{clientRegistrationNumber}}\",\r\n        \"Street\": \"Street-CP-{{clientRegistrationNumber}}\",\r\n        \"Zip\": \"Zip-CP\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City-CP\",\r\n        \"BankAccountNumber\": \"BBAN-CP-{{clientRegistrationNumber}}\",\r\n        \"IbanAccountNumber\": \"IBAN-CP-{{clientRegistrationNumber}}\"\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"{{currencyCode}}\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n\r\n            \"Description\": \"DimValue:  {{cDimensionCodeValue-A}} CamelCaseAlias\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"{{currencyCode}}\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"{{currencyCode}}\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"{{currencyCode}}\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "---  sleep 45 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(45);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 100) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											" pm.environment.set(\"invoiceNumber_1\", jsonData.invoiceNumber);\r",
											"\r",
											" console.log(pm.environment.get(\"invoiceNumber_1\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"// if (pm.response.code == 200, 404, 503) {\r",
											"//      pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
											"//     pm.environment.set(\"supplierId\", pm.response.json().seller.id);\r",
											"//      pm.environment.set(\"supplierName\", pm.response.json().seller.name);\r",
											"// }\r",
											"// console.log(\"SupplierId is: \" + pm.environment.get(\"supplierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \" SupplierName is: \" +  pm.environment.get(\"supplierName\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency and Client are found. \", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
											"        pm.expect(jsonData.client).to.have.property(\"id\", pm.environment.get(\"datasetId\"));\r",
											"    \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "INT /invoices - checkInvoiceSupplierTypeCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and supplier are found. \", function () {",
											"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
											"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", pm.environment.get(\"cSupplierCode-A\"));",
											"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Api\");",
											"    });",
											"",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency is found. \", function () {",
											"         pm.expect(jsonData).to.have.property(\"invoiceCurrency\", pm.environment.get(\"currencyCode\"));",
											"        ",
											"    });",
											"",
											"var jsonDataAL = pm.response.json().invoiceLines;",
											"   //console.log(jsonDataAL);",
											"",
											"   var jsonDataAL1;",
											"    ",
											"    var i;",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].lineNumber == 1) {",
											"        var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-1 is found. \", function () {",
											"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 1);",
											"    });",
											"    }  ",
											"    if (jsonDataAL[i].lineNumber == 2) {",
											"        var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-2 is found. \", function () {",
											"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 2);",
											"    });",
											"    }  ",
											"    }",
											"       console.log(\"LineNumber is \" + pm.environment.get(\"lineNumber\"));",
											"     ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						}
					]
				},
				{
					"name": "UBL Cost Invoice",
					"item": [
						{
							"name": "PWA/health --- UBL Cost Invoice ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "INT /invoices-UBL - Cost Minimum-Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.environment.set(\"clientName\", jsonData.name);",
											"    pm.environment.set(\"clientRegistrationNumber\", jsonData.registrationNumber);",
											"    pm.environment.set(\"clientErpId\", jsonData.erpId);",
											"    pm.environment.set(\"clientErpType\", jsonData.erpType);",
											"    pm.environment.set(\"clientStreet\", jsonData.street);",
											"    pm.environment.set(\"clientCity\", jsonData.city);",
											"    pm.environment.set(\"clientZip\", jsonData.zip);",
											"    pm.environment.set(\"clientEmail\", jsonData.Email);",
											"    pm.environment.set(\"clientCurrency\", jsonData.currency);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "UBL Cost Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"// Invoice dates UBL style\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cInvoiceDate\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"dateStartUBL\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"dateEndUBL\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Sleeping for 10 seconds before next request.\");\r",
											"setTimeout(function () {\r",
											"    console.log(\"Done.\");\r",
											"}, 0);\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // pm.test(\"senderOrganizationId OK\", function () {\r",
											"    //     pm.expect(jsonData.ehf.senderOrganizationId).to.eql(pm.environment.get(\"cSupplierVATId-A\"));\r",
											"    // });\r",
											"\r",
											"    pm.test(\"recipientOrganizationId OK.\", function () {\r",
											"        pm.expect(jsonData.ehf).to.have.property(\"recipientOrganizationId\", pm.environment.get(\"clientRegistrationNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"cPackageId\", pm.response.json().packageId);\r",
											"\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"// postman.setNextRequest(\"INB-GW-invoice - UBL Cost\");\r",
											"\r",
											"// <!--Attachment-->\r",
											"//     <cbc:Attachment>U2VtaW5lLGNsaWVudCxidXl1cixzdXBwbGllcixkaW1lbnNpb25zLGludm9pY2UsQWNjb3VudGluZ0NvZGUsQWNjb3VudGluZ1BhcmFtZXRlcnM=</cbc:Attachment>\r",
											"\r",
											"\r",
											"\r",
											"//  <!--Attachment-->\r",
											"//     <cac:AdditionalDocumentReference>\r",
											"//         <cac:Attachment>\r",
											"//             <cbc:EmbeddedDocumentBinaryObject mimeCode=\"text/csv\" filename=\"SEMINE-Invoice.csv\">IlNlbWluZSBUZXN0IEF0dGFjaG1lbnQiCiIMIgo=</cbc:EmbeddedDocumentBinaryObject>\r",
											"//         </cac:Attachment>\r",
											"//     </cac:AdditionalDocumentReference>\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// <cac:AdditionalDocumentReference>\r",
											"//         <cac:Attachment>\r",
											"//             <cbc:EmbeddedDocumentBinaryObject mimeCode=\"text/csv\" filename=\"SEMINE-Invoice.csv\">IkluZGV4IiwgIkxpdmluZyBTcGFjZSAoc3EgZnQpIiwgIkJlZHMiLCAiQmF0aHMiLCAiWmlwIiwg\r",
											"// IlllYXIiLCAiTGlzdCBQcmljZSAoJCkiCiAxLCAyMjIyLCAzLCAzLjUsIDMyMzEyLCAxOTgxLCAy\r",
											"// NTAwMDAKIDIsIDE2MjgsIDMsIDIsICAgMzIzMDgsIDIwMDksIDE4NTAwMAogMywgMzgyNCwgNSwg\r",
											"// NCwgICAzMjMxMiwgMTk1NCwgMzk5MDAwCiA0LCAxMTM3LCAzLCAyLCAgIDMyMzA5LCAxOTkzLCAx\r",
											"// NTAwMDAKIDUsIDM1NjAsIDYsIDQsICAgMzIzMDksIDE5NzMsIDMxNTAwMAogNiwgMjg5MywgNCwg\r",
											"// MywgICAzMjMxMiwgMTk5NCwgNjk5MDAwCiA3LCAzNjMxLCA0LCAzLCAgIDMyMzA5LCAxOTk2LCA2\r",
											"// NDkwMDAKIDgsIDI0ODMsIDQsIDMsICAgMzIzMTIsIDIwMTYsIDM5OTAwMAogOSwgMjQwMCwgNCwg\r",
											"// NCwgICAzMjMxMiwgMjAwMiwgNjEzMDAwCjEwLCAxOTk3LCAzLCAzLCAgIDMyMzExLCAyMDA2LCAy\r",
											"// OTUwMDAKMTEsIDIwOTcsIDQsIDMsICAgMzIzMTEsIDIwMTYsIDI5MDAwMAoxMiwgMzIwMCwgNSwg\r",
											"// NCwgICAzMjMxMiwgMTk2NCwgNDY1MDAwCjEzLCA0ODkyLCA1LCA2LCAgIDMyMzExLCAyMDA1LCA3\r",
											"// OTk5MDAKMTQsIDExMjgsIDIsIDEsICAgMzIzMDMsIDE5NTUsICA4OTAwMAoxNSwgMTM4MSwgMywg\r",
											"// MiwgICAzMjMwMSwgMjAwNiwgMTQzMDAwCjE2LCA0MjQyLCA0LCA1LCAgIDMyMzAzLCAyMDA3LCA1\r",
											"// NjkwMDAKMTcsIDI1MzMsIDMsIDIsICAgMzIzMTAsIDE5OTEsIDM2NTAwMAoxOCwgMTE1OCwgMywg\r",
											"// MiwgICAzMjMwMywgMTk5MywgMTU1MDAwCjE5LCAyNDk3LCA0LCA0LCAgIDMyMzA5LCAxOTkwLCAy\r",
											"// ODkwMDAKMjAsIDQwMTAsIDUsIDMsICAgMzIzMDksIDIwMDIsIDU0OTkwMAo=</cbc:EmbeddedDocumentBinaryObject>\r",
											"//         </cac:Attachment>\r",
											"//     </cac:AdditionalDocumentReference>\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "KmsgQdmAy0XPEXAZCnp0AQI38kLBy4mLM1sP7Damv3z251BL3pafZCAJLLqROQpi",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Invoice xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\r\n    xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\"\r\n    xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\">\r\n    <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>\r\n    <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\r\n    <!-- ID has to be unique for every invoice from a given supplier in a client -->\r\n    <cbc:ID>{{invoiceNumber}}</cbc:ID>\r\n    <cbc:IssueDate>{{cIssueDate}}</cbc:IssueDate>\r\n    <cbc:DueDate>{{cDueDate}}</cbc:DueDate>\r\n    <!-- comment -->\r\n    <cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>\r\n    <cbc:DocumentCurrencyCode>EUR</cbc:DocumentCurrencyCode>\r\n    <!-- comment -->\r\n    <cbc:BuyerReference>ApiTest Controller</cbc:BuyerReference>\r\n    <!-- comment -->\r\n    <cac:InvoicePeriod>\r\n        <cbc:StartDate>{{dateStartUBL}}</cbc:StartDate>\r\n        <cbc:EndDate>{{dateEndUBL}}</cbc:EndDate>\r\n    </cac:InvoicePeriod>\r\n    <cac:AccountingSupplierParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:EndpointID>\r\n            <cac:PartyIdentification>\r\n                <cbc:ID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:ID>\r\n            </cac:PartyIdentification>\r\n            <cac:PartyIdentification>\r\n                <cbc:ID>{{cSupplierCode-A}}MVA</cbc:ID>\r\n            </cac:PartyIdentification>\r\n            <cac:PartyName>\r\n                <cbc:Name>name-{{cSupplierCode-A}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City</cbc:CityName>\r\n                <cbc:PostalZone>Zip-SP-9999</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>NO{{cSupplierCode-A}}MVA</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>Foretaksregisteret</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>TAX</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>RegistrationName-{{cSupplierCode-A}}</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n        </cac:Party>\r\n    </cac:AccountingSupplierParty>\r\n    <cac:AccountingCustomerParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Name-CP-{{clientRegistrationNumber}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City ÆØÅ</cbc:CityName>\r\n                <cbc:PostalZone>4321</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Legal Buyer Name AS ÆØÅ</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n            <cac:Contact>\r\n                <cbc:Name>ApiTest Controller</cbc:Name>\r\n                <cbc:Telephone>88008800</cbc:Telephone>\r\n                <cbc:ElectronicMail>ApiTestController@useful.no</cbc:ElectronicMail>\r\n            </cac:Contact>\r\n        </cac:Party>\r\n    </cac:AccountingCustomerParty>\r\n    <cac:Delivery>\r\n        <cac:DeliveryParty>\r\n            <cac:PartyName>\r\n                <cbc:Name>{{name-Delivery}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:DeliveryLocation>\r\n                <cac:Address>\r\n                    <cbc:StreetName>{{address1-Delivery}}</cbc:StreetName>\r\n                    <cbc:CityName>{{city-Delivery}}</cbc:CityName>\r\n                    <cbc:PostalZone>{{zipCode-Delivery}}</cbc:PostalZone>\r\n                    <cac:Country>\r\n                        <cbc:IdentificationCode>{{country-Delivery}}</cbc:IdentificationCode>\r\n                    </cac:Country>\r\n                </cac:Address>\r\n            </cac:DeliveryLocation>\r\n        </cac:DeliveryParty>\r\n    </cac:Delivery>\r\n    <cac:PaymentMeans>\r\n        <cbc:PaymentMeansCode>31</cbc:PaymentMeansCode>\r\n        <cbc:PaymentID>KidNumber-{{invoiceNumber}}</cbc:PaymentID>\r\n        <cac:PayeeFinancialAccount>\r\n            <cbc:ID >BBAN-{{cSupplierCode-A}}-1</cbc:ID>\r\n        </cac:PayeeFinancialAccount>\r\n    </cac:PaymentMeans>\r\n    <cac:PaymentTerms>\r\n        <cbc:Note>Payment within 10 days, 2% discount</cbc:Note>\r\n    </cac:PaymentTerms>\r\n    <cac:TaxTotal>\r\n        <cbc:TaxAmount currencyID=\"{{currencyCode}}\">25.15</cbc:TaxAmount>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"{{currencyCode}}\">100.00</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"{{currencyCode}}\">25</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"{{currencyCode}}\">1</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"{{currencyCode}}\">0.15</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n    </cac:TaxTotal>\r\n    <cac:LegalMonetaryTotal>\r\n        <cbc:LineExtensionAmount currencyID=\"{{currencyCode}}\">101.00</cbc:LineExtensionAmount>\r\n        <cbc:TaxExclusiveAmount currencyID=\"{{currencyCode}}\">101.00</cbc:TaxExclusiveAmount>\r\n        <cbc:TaxInclusiveAmount currencyID=\"{{currencyCode}}\">126.15</cbc:TaxInclusiveAmount>\r\n        <cbc:PayableAmount currencyID=\"{{currencyCode}}\">126.15</cbc:PayableAmount>\r\n    </cac:LegalMonetaryTotal>\r\n    <!-- Line 1 -->\r\n    <cac:InvoiceLine>\r\n        <cbc:ID>1</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>{{dateStartUBL}}</cbc:StartDate>\r\n            <cbc:EndDate>{{dateEndUBL}}</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>1</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"{{currencyCode}}\">1.00</cbc:LineExtensionAmount>\r\n        <cbc:AccountingCost>BookingCode001</cbc:AccountingCost>\r\n        <cac:Item>\r\n            <cbc:Name>Description  {{dateStart}}-{{dateEnd}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>{{cVatCode-R2}}</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"{{currencyCode}}\">1.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:InvoiceLine>\r\n    <!-- Line 2 -->\r\n    <cac:InvoiceLine>\r\n        <cbc:ID>2</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>{{dateStartUBL}}</cbc:StartDate>\r\n            <cbc:EndDate>{{dateEndUBL}}</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>2</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">4</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"{{currencyCode}}\">100.00</cbc:LineExtensionAmount>\r\n        <cac:Item>\r\n            <cbc:Name>Dimension Value:  {{cDimensionCodeValue-X}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>{{cVatCode-R1}}</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"{{currencyCode}}\">25.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:InvoiceLine>\r\n</Invoice>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{INB-GW}}/ubl",
									"host": [
										"{{INB-GW}}"
									],
									"path": [
										"ubl"
									]
								}
							},
							"response": []
						},
						{
							"name": "---  sleep 45 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(45);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices-UBL - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().data[0];\r",
											"\r",
											"    pm.environment.set(\"ublInvoiceId\", jsonData.id);\r",
											"}\r",
											"console.log(\"UBL invoiceId is : \" +pm.environment.get(\"ublInvoiceId\"));\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 100) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json().data[0];\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields are found.\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoiceSubType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData.purchaseSummary).to.have.property(\"purchaseOrderNumber\", \"\");\r",
											"                    pm.expect(jsonData.purchaseSummary).to.have.property(\"goodsReceivedNumber\", \"\");\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?Filter=[[\"invoiceNumber\",\"contains\",\"{{invoiceNumber}}\"]]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
											"disabled": true
										},
										{
											"key": "Filter",
											"value": "[[\"invoiceNumber\",\"contains\",\"{{invoiceNumber}}\"]]"
										}
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers-UBL - Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"// if (pm.response.code == 200, 404, 503) {\r",
											"//      pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
											"//     pm.environment.set(\"supplierId\", pm.response.json().seller.id);\r",
											"//      pm.environment.set(\"supplierName\", pm.response.json().seller.name);\r",
											"// }\r",
											"// console.log(\"SupplierId is: \" + pm.environment.get(\"supplierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \" SupplierName is: \" +  pm.environment.get(\"supplierName\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency and Client are found. \", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
											"        pm.expect(jsonData.client).to.have.property(\"id\", pm.environment.get(\"datasetId\"));\r",
											"    \r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{ublInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{ublInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "INT /invoices-UBL - checkInvoiceSupplierTypeCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and supplier are found. \", function () {",
											"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
											"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", (\"name-\" +pm.environment.get(\"cSupplierCode-A\")));",
											"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Ehf\");",
											"    });",
											"",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Currency is found. \", function () {",
											"         pm.expect(jsonData).to.have.property(\"invoiceCurrency\", pm.environment.get(\"currencyCode\"));",
											"        ",
											"    });",
											"",
											"var jsonDataAL = pm.response.json().invoiceLines;",
											"   //console.log(jsonDataAL);",
											"",
											"   var jsonDataAL1;",
											"    ",
											"    var i;",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].lineNumber == 1) {",
											"        var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-1 is found. \", function () {",
											"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 1);",
											"    });",
											"    }  ",
											"    if (jsonDataAL[i].lineNumber == 2) {",
											"        var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line-2 is found. \", function () {",
											"        pm.expect(jsonDataAL1).to.have.property(\"lineNumber\", 2);",
											"    });",
											"    }  ",
											"    }",
											"       console.log(\"LineNumber is \" + pm.environment.get(\"lineNumber\"));",
											"     ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{ublInvoiceId}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{ublInvoiceId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "--- Skip to PWA Start ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to PWA ---');\r",
											"postman.setNextRequest(\"--- PWA Start ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UBL Credit Note",
					"item": [
						{
							"name": "--- UBL Credit Note ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "UBL CreditNote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmssS\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Sleeping for 10 seconds before next request.\");\r",
											"setTimeout(function () {\r",
											"    console.log(\"Done.\");\r",
											"}, 0);\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(\"SenderOrganizationId OK\", function () {\r",
											"        pm.expect(jsonData.ehf).to.have.property(\"senderOrganizationId\", pm.environment.get(\"cSupplierVATId-A\"));\r",
											"    });\r",
											"\r",
											"    pm.test(\"RecipientOrganizationId OK\", function () {\r",
											"        pm.expect(jsonData.ehf).to.have.property(\"recipientOrganizationId\",pm.environment.get(\"clientRegistrationNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"cPackageId\", pm.response.json().packageId);\r",
											"\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"// postman.setNextRequest(\"INB-GW-invoice - UBL Cost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "KmsgQdmAy0XPEXAZCnp0AQI38kLBy4mLM1sP7Damv3z251BL3pafZCAJLLqROQpi",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<CreditNote xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\r\n    xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\"\r\n    xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2\">\r\n    <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>\r\n    <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\r\n    <!-- ID has to be unique for every invoice from a given supplier in a client -->\r\n    <cbc:ID>{{invoiceNumber}}</cbc:ID>\r\n    <cbc:IssueDate>2019-01-15</cbc:IssueDate>\r\n    <cbc:DueDate>2019-01-15</cbc:DueDate>\r\n    <!-- comment -->\r\n    <cbc:CreditNoteTypeCode>381</cbc:CreditNoteTypeCode>\r\n    <cbc:DocumentCurrencyCode>NOK</cbc:DocumentCurrencyCode>\r\n    <!-- comment -->\r\n    <cbc:BuyerReference>ApiTest Controller</cbc:BuyerReference>\r\n    <!-- comment -->\r\n    <cac:InvoicePeriod>\r\n        <cbc:StartDate>2020-08-12</cbc:StartDate>\r\n        <cbc:EndDate>2020-08-30</cbc:EndDate>\r\n    </cac:InvoicePeriod>\r\n\r\n    <cac:AccountingSupplierParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Heartbeat Test AS æøå</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>HEARTBEAT CITY ÆØÅ,</cbc:CityName>\r\n                <cbc:PostalZone>1234</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>NO{{cSupplierCode-A}}MVA</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>Foretaksregisteret</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>TAX</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Heartbeat Test AS æøå</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n        </cac:Party>\r\n    </cac:AccountingSupplierParty>\r\n    \r\n    <cac:AccountingCustomerParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Buyer Name AS ÆØÅ</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City ÆØÅ</cbc:CityName>\r\n                <cbc:PostalZone>4321</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Legal Buyer Name AS ÆØÅ</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n            <cac:Contact>\r\n                <cbc:Name>ApiTest Controller</cbc:Name>\r\n                <cbc:Telephone>88008800</cbc:Telephone>\r\n                <cbc:ElectronicMail>ApiTestController@useful.no</cbc:ElectronicMail>\r\n            </cac:Contact>\r\n        </cac:Party>\r\n    </cac:AccountingCustomerParty>\r\n\r\n    <cac:PaymentMeans>\r\n        <cbc:PaymentMeansCode>31</cbc:PaymentMeansCode>\r\n        <cbc:PaymentID>123</cbc:PaymentID>\r\n        <cac:PayeeFinancialAccount>\r\n            <cbc:ID >BBAN-{{cSupplierCode-A}}</cbc:ID>\r\n        </cac:PayeeFinancialAccount>\r\n    </cac:PaymentMeans>\r\n\r\n    <cac:PaymentTerms>\r\n        <cbc:Note>Payment within 10 days, 2% discount</cbc:Note>\r\n    </cac:PaymentTerms>\r\n    \r\n    <cac:TaxTotal>\r\n        <cbc:TaxAmount currencyID=\"NOK\">25.15</cbc:TaxAmount>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">100.00</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">25</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">1</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">0.15</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n    </cac:TaxTotal>\r\n    <cac:LegalMonetaryTotal>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">101.00</cbc:LineExtensionAmount>\r\n        <cbc:TaxExclusiveAmount currencyID=\"NOK\">101.00</cbc:TaxExclusiveAmount>\r\n        <cbc:TaxInclusiveAmount currencyID=\"NOK\">126.15</cbc:TaxInclusiveAmount>\r\n        <cbc:PayableAmount currencyID=\"NOK\">126.15</cbc:PayableAmount>\r\n    </cac:LegalMonetaryTotal>\r\n    <!-- Line 1 -->\r\n    <cac:CreditNoteLine>\r\n        <cbc:ID>1</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2013-06-01</cbc:StartDate>\r\n            <cbc:EndDate>2013-06-30</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>1</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">1.00</cbc:LineExtensionAmount>\r\n        <cbc:AccountingCost>BookingCode001</cbc:AccountingCost>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2020-08-12</cbc:StartDate>\r\n            <cbc:EndDate>2020-08-30</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:Item>\r\n            <cbc:Name>Jan-Feb 2020 {{cDimensionCodeValue-A}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">1.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:CreditNoteLine>\r\n    <!-- Line 2 -->\r\n    <cac:CreditNoteLine>\r\n        <cbc:ID>2</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2020-12-01</cbc:StartDate>\r\n            <cbc:EndDate>2021-02-28</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>2</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">100.00</cbc:LineExtensionAmount>\r\n        <cac:Item>\r\n            <cbc:Name>Example Item 2</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">100.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:CreditNoteLine>\r\n</CreditNote>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{INB-GW}}/api/v1.0/ubl",
									"host": [
										"{{INB-GW}}"
									],
									"path": [
										"api",
										"v1.0",
										"ubl"
									]
								}
							},
							"response": []
						},
						{
							"name": "INB /statelog/cPackageId - UNSET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cInvoiceId\");\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(jsonDataLength);\r",
											"\r",
											"    var i = 0;\r",
											"    var invoiceIdFound = null;\r",
											"\r",
											"\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].invoiceId != null && jsonData[x].sourceApplication == \"Semine.LogicService.Api\" && jsonData[x].state == \"Done\") {\r",
											"            // console.log(jsonData[x].invoiceId);\r",
											"            var invoiceIdFound = jsonData[x].invoiceId;\r",
											"            // console.log(invoiceIdFound);\r",
											"            // return;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // If invoiceId found, move to next request. \r",
											"    // If invoiceId not found repeat this request 100 times before failing.\r",
											"    if (retries < 100) {\r",
											"        if (invoiceIdFound != null) {\r",
											"            console.log(invoiceIdFound);\r",
											"            pm.environment.set(\"cInvoiceId\", invoiceIdFound);\r",
											"            pm.globals.set(\"retries\", 0);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
											"                pm.expect(invoiceIdFound).to.be.not.null;\r",
											"            });\r",
											"        } else {\r",
											"            // Wait 5s and then try again\r",
											"            sleep(5000);\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries);\r",
											"            console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(\"INB /statelog/cPackageId - UNSET\");\r",
											"        }\r",
											"    } else {\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
											"            pm.expect(invoiceIdFound).to.be.not.null;\r",
											"        });\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INB}}/api/organizations/{{organizationId}}/inbound/statelog/{{cPackageId}}",
									"host": [
										"{{INB}}"
									],
									"path": [
										"api",
										"organizations",
										"{{organizationId}}",
										"inbound",
										"statelog",
										"{{cPackageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Skip to PWA Start ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to PWA ---');\r",
											"postman.setNextRequest(\"--- PWA Start ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PWA",
					"item": [
						{
							"name": "--- PWA Start ---",
							"item": [
								{
									"name": "--- PWA Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "27706 Invoice Grid",
							"item": [
								{
									"name": "PWA /invoices/ - Invoice grid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//////////// Invoice Grid ///////////\r",
													"\r",
													"// OK: Supplier matched\r",
													"// OK: Type is correct\r",
													"// OK: Workflow triggered\r",
													"// OK: Assigned column is populated\r",
													"// OK: Status in review if workflow triggered\r",
													"// OK: Amounts are correct \r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"        pm.environment.set(\"cInvoiceId\", jsonData.id);\r",
													"    }\r",
													"\r",
													"    ///////// Supplier matched /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier matched.\", function () {\r",
													"        pm.expect(jsonData).to.have.not.property(\"supplier\", []);\r",
													"        pm.expect(jsonData.supplier).to.have.property(\"id\", pm.environment.get(\"cSupplierId-A\"));\r",
													"        pm.expect(jsonData.supplier).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.supplier).to.have.property(\"organizationNumber\", \"orgnr-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"    ////////// Type is correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Type is correct.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceSubType\", \"CostInvoice\");\r",
													"        // pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Ehf\");\r",
													"        // pm.expect(jsonData).to.have.property(\"sourceChannelType\", \"EhfApi\");\r",
													"        // pm.expect(jsonData).to.have.property(\"documentMimeType\", \"text/xml\");\r",
													"    });\r",
													"\r",
													"    ///////// Workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Workflow triggered.\", function () {\r",
													"        pm.expect(jsonData).to.have.not.property(\"workflows\", []);\r",
													"        pm.expect(jsonData.workflows[0]).to.have.not.property(\"id\", null);\r",
													"        pm.expect(jsonData.workflows[0]).to.have.property(\"state\", \"Active\");\r",
													"    });\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : InReview\", function () {\r",
													"    //     pm.expect(jsonData).to.have.property(\"status\", \"InReview\");\r",
													"    // });\r",
													"\r",
													"    ////////// Assigned column is populated /////////\r",
													"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Assigned column is populated.\", function () {\r",
													"\r",
													"//         pm.expect(jsonData.assigned).to.have.not.property(\"userIds\", null);\r",
													"//         pm.expect(jsonData.assigned).to.have.property(\"userNames\", \"ApiTest Controller\");\r",
													"//         pm.expect(jsonData.assigned).to.have.property(\"emails\", \"ApiTestController@useful.no\");\r",
													"//    });\r",
													"\r",
													"    ////////// Amounts are correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"netAmount\", 101.0000);\r",
													"        pm.expect(jsonData).to.have.property(\"amount\", 126.1500);\r",
													"        pm.expect(jsonData).to.have.property(\"vatAmount\", 25.1500);\r",
													"    });\r",
													"\r",
													"    ////////// BuyerRef is correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Type is correct.\", function () {\r",
													"        pm.expect(jsonData.buyerRef).to.have.not.property(\"userId\", null);\r",
													"        pm.expect(jsonData.buyerRef).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonData.buyerRef).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=1&filter=%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"invoices"
											],
											"query": [
												{
													"key": "skip",
													"value": "0",
													"disabled": true
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D"
												}
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "27707 Invoice Header",
							"item": [
								{
									"name": "PWA /invoices/ID/headers - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"      ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status is inReview : InReview\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\").eql(\"InReview\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status is inReview. : InReview\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"InReview\");\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Root fields are found.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
													"        pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
													"        pm.expect(jsonData).to.be.not.property(\"serialNumber\", []);\r",
													"       // pm.expect(jsonData).to.have.property(\"voucherNumber\", null);\r",
													"        pm.expect(jsonData.voucherDescription).to.be.oneOf([null, '']);\r",
													"        pm.expect(jsonData).to.have.property(\"doNotPay\", false);\r",
													"        pm.expect(jsonData).to.have.property(\"flag\", null);\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"sellerNsAccountingParameter\", null);\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonData).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonData).to.have.property(\"exchangeRateNumberOfUnits\", 1);\r",
													"        pm.expect(jsonData).to.have.property(\"reportingAmount\", 1261.5);\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData).to.be.not.property(\"invoiceDate\", []);\r",
													"        pm.expect(jsonData).to.be.not.property(\"dueDate\", []);\r",
													"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.environment.get(\"invoiceNumber\"));\r",
													"       \r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"InReview\");\r",
													"        pm.expect(jsonData).to.have.property(\"showReInvoicingCheckBox\", true);\r",
													"        pm.expect(jsonData).to.have.property(\"reInvoicingEnabled\", true);\r",
													"        pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
													"\r",
													"        // BUG: Subsidiary address for UBL\r",
													"        pm.expect(jsonData.subsidiaryAddress).to.include(\"externalCode-Delivery\");\r",
													"\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : BuyerRef is set.\", function () {\r",
													"        pm.expect(jsonData.buyerRef).to.have.property(\"name\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonData.buyerRef).is.property(\"isValidated\", true);\r",
													"        pm.expect(jsonData.buyerRef.id).eql(pm.environment.get(\"userIdController\"));\r",
													"    });\r",
													"\r",
													"    ///////// Client OK /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Client is OK.\", function () {\r",
													"        pm.expect(jsonData).to.be.not.property(\"client\", []);\r",
													"        pm.expect(jsonData.client).to.be.not.property(\"id\", []);\r",
													"        pm.expect(jsonData.client).to.be.not.property(\"name\", []);\r",
													"        pm.expect(jsonData.client).to.be.not.property(\"id\", []);\r",
													"    });\r",
													"\r",
													"\r",
													"    ///////// Supplier matched /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier matched.\", function () {\r",
													"        pm.expect(jsonData).to.be.not.property(\"seller\", []);\r",
													"        pm.expect(jsonData.seller).to.have.property(\"id\", pm.environment.get(\"cSupplierId-A\"));\r",
													"        pm.expect(jsonData.seller).to.have.property(\"erpVendorId\", pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller).to.have.property(\"vatId\", \"orgnr-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller).to.have.property(\"bankAccount\", (\"BBAN-\" + pm.environment.get(\"cSupplierCode-A\")+'-1'));\r",
													"    });\r",
													"\r",
													"    ////////// Amounts are correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"netAmount\", 101.0000);\r",
													"        pm.expect(jsonData).to.have.property(\"totalAmount\", 126.1500);\r",
													"\r",
													"        if(pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\"){\r",
													"            pm.expect(jsonData).to.have.property(\"vatAmount\", 25.15);\r",
													"            pm.expect(jsonData).to.have.property(\"vatAmountHigh\", 25);\r",
													"            pm.expect(jsonData).to.have.property(\"vatAmountMid\", 0.15);\r",
													"        }\r",
													"\r",
													"        //pm.expect(jsonData).to.have.property(\"vatAmountLow\", 0);\r",
													"        pm.expect(jsonData).to.have.property(\"totalAmount\", 126.15);\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonData).to.have.property(\"reportingAmount\", 1261.5);\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/workflows",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Workflow present\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"workflowState\", \"Active\");\r",
													"    });\r",
													" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Steps are found.\", function () {\r",
													"        pm.expect(jsonData).to.be.not.property(\"steps\", []);\r",
													"        \r",
													"    });\r",
													" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AllowedActions are not empty.\", function () {\r",
													"        pm.expect(jsonData.steps[0]).to.be.not.property(\"allowedActions\", []);\r",
													"    });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine is not empty.\", function () {\r",
													"        pm.expect(jsonData).to.be.not.property(\"invoiceLines\", []);\r",
													"    });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/workflows",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"workflows"
											],
											"query": [
												{
													"key": "take",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities are found.\", function () {\r",
													"        pm.expect(jsonData).to.be.not.property(\"activityId\", []);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments_1 is found.\", function () {\r",
													"        pm.expect(jsonData[0]).to.be.not.empty;\r",
													"        pm.expect(jsonData[0]).to.be.not.property(\"attachmentId\", []);\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"            pm.expect(jsonData[0]).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \".pdf\");\r",
													"            pm.expect(jsonData[0]).to.have.property(\"isInvoicePdf\", true);\r",
													"            pm.expect(jsonData[0]).to.have.property(\"mimeType\", \"application/pdf\");\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"            pm.expect(jsonData[0]).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.xml\");\r",
													"            pm.expect(jsonData[0]).to.have.property(\"isInvoicePdf\", false);\r",
													"            pm.expect(jsonData[0]).to.have.property(\"mimeType\", \"text/xml\");\r",
													"        }\r",
													"\r",
													"        // pm.expect(jsonData[0].fileSize).to.not.eql(0);\r",
													"        pm.expect(jsonData[0]).to.have.property(\"isInitialInvoiceDocument\", true);\r",
													"\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments_2 is found.\", function () {\r",
													"        pm.expect(jsonData[1]).to.be.not.empty;\r",
													"        pm.expect(jsonData[1]).to.be.not.property(\"attachmentId\", []);\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"            pm.expect(jsonData[1]).to.have.property(\"fileName\",pm.environment.get(\"invoiceNumber\") + \"-2.pdf\");\r",
													"            pm.expect(jsonData[1]).to.have.property(\"isInvoicePdf\", false);\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"            pm.expect(jsonData[1]).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.pdf\");\r",
													"            pm.expect(jsonData[1]).to.have.property(\"isInvoicePdf\", true);\r",
													"        }\r",
													"        // pm.expect(jsonData[1].fileSize).to.not.eql(0);\r",
													"        pm.expect(jsonData[1]).to.have.property(\"mimeType\", \"application/pdf\");\r",
													"        pm.expect(jsonData[1]).to.have.property(\"isInitialInvoiceDocument\", true);\r",
													"    });\r",
													"\r",
													"    pm.environment.set(\"attachmentId-1\", jsonData[0].attachmentId);\r",
													"    pm.environment.set(\"attachmentId-2\", jsonData[1].attachmentId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments/ 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found.\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"<?xml version=\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"</Invoice>\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId-1}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments/ 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_2 is found.\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_2 is found.\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId-2}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId-2}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PO - Toggle",
							"item": [
								{
									"name": "PWA /invoices/ID/purchaseType - 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 1 304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/invoicelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/dropdown 200, 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,204])\r",
													"})\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response)\r",
													"} \r",
													"//  pm.response.json().on('done', function (err, summary) {\r",
													"//     console.log(summary);\r",
													"// });\r",
													"  \r",
													"//  console.log(summary.collection.name)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/settings/gridviews/GridView_PurchaseOrderRelations/currentuser/organizations/{{organizationId}}/clients/{{datasetId}}/dropdown",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"settings",
												"gridviews",
												"GridView_PurchaseOrderRelations",
												"currentuser",
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dropdown"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/dropdown 200, 204 - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204])\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response)\r",
													"} \r",
													"// console.log(pm)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/settings/gridviews/GridView_PurchaseOrderRelations/currentuser/organizations/{{organizationId}}/clients/{{datasetId}}/dropdown",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"settings",
												"gridviews",
												"GridView_PurchaseOrderRelations",
												"currentuser",
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dropdown"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/purchaseorderrelations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/purchaseorderrelations",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"purchaseorderrelations"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 2 304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/purchaseorderrelations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/purchaseorderrelations",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"purchaseorderrelations"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/invoicelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SetAsModifiedByApprover",
							"item": [
								{
									"name": "PWA /invoices/ID/setasmodifiedbyapprover Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/setasmodifiedbyapprover",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"setasmodifiedbyapprover"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/ seeActivityForSetasmodifiedbyapprover",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"var jsonData = pm.response.json().data;\r",
													"   console.log(jsonData);\r",
													"\r",
													"   var jsonDataAL;\r",
													"    \r",
													"    var i;\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"ModifiedByApprover\") {\r",
													"        var jsonDataAL =jsonData[i];\r",
													"        console.log(jsonDataAL);\r",
													"\r",
													"    }\r",
													"    }\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ModifiedByApprover is carried out. \", function () {\r",
													"        pm.expect(jsonDataAL).to.have.property(\"activityOperationType\", \"ModifiedByApprover\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Images",
							"item": [
								{
									"name": "PWA /invoices/ID/images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image array is not empty.\", function () {\r",
													"        pm.expect(jsonData[0]).to.be.not.empty;\r",
													"        pm.expect(pm.response.text()).to.include(\"images\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body is > 1000 bytes.\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Original",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body is > 1000 bytes.\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(8000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Original",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Original"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Medium Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds.\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body is > 1000 bytes.\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(10000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Medium",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Medium"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Small",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body is > 1000 bytes.\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(5000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Small",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Small"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Tiny",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body is > 1000 bytes.\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Tiny",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Tiny"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Lines",
							"item": [
								{
									"name": "List",
									"item": [
										{
											"name": "PWA /invoices/ID/invoiceLines - List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 10 seconds\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLines are not exist.\", function () {\r",
															"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
															"        pm.expect(jsonData).to.be.not.property(\"invoiceLines\", []);\r",
															"        pm.expect(jsonData).to.be.not.property(\"invoiceAmounts\", []);\r",
															"\r",
															"    });\r",
															"\r",
															"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
															"        pm.environment.set(\"InvoiceLineId-1\", jsonData.invoiceLines[0].invoiceLineId);\r",
															"        pm.environment.set(\"InvoiceLineId-2\", jsonData.invoiceLines[1].invoiceLineId);\r",
															"        pm.environment.set(\"cAccountTypeParameterId\", jsonData.invoiceLines[0].accountTypeParameterId);\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// console.log(jsonData);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 1",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 1 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"Ledger-15-AI\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdLedger\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdLedger\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Apply Ledger Manual 50% of the time\r",
																	"var rnd = Math.random();\r",
																	"// console.log(rnd)\r",
																	"\r",
																	"// if (rnd > 0.0) {\r",
																	"//     pm.environment.set(\"Ledger_15_AI-15\", \"Ledger_15_AI\");\r",
																	"// } else {\r",
																	"//     pm.environment.set(\"Ledger_15_AI\", pm.environment.get(\"Ledger_15_Manual\"));\r",
																	"// }"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/condensed?query=Ledger-15-AI",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "15 Acc-2101",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "Ledger-15-AI"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"VAT-15\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdVat\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdVat\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVat}}/values/condensed?query=VAT-15",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "VAT-15"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdInterim\", jsonData.parameterValueId)\r",
																	"}\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"Interim-1\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdInterim\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdInterim\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdInterim}}/values/condensed?take=5&query=Interim-1",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5"
																},
																{
																	"key": "query",
																	"value": "Interim-1"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL1\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 1,\r\n    \"netAmount\": 1,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": \"{{startPeriodMonth}}\",\r\n    \"startPeriodYear\": \"{{startPeriodYear}}\",\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdInterim}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found.\", function () {\r",
															"        // pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", JSON.parse(pm.environment.get(\"startPeriodMonth\")));\r",
															"\r",
															"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3)\r",
															"    });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
															"        pm.expect(jsonData).to.have.property(\"unitPrice\",1);\r",
															"        pm.expect(jsonData).to.have.property(\"netAmount\", 1);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 1.15);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions is not empty.\", function () {\r",
															"        pm.expect(jsonData).to.be.not.property(\"accountingParameters\", []);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var x;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :VatCode is VAT-15.\", function () {\r",
															"                pm.expect(jsonData[i]).to.have.property(\"code\", \"VAT-15\");\r",
															"                pm.expect(jsonData[i]).to.have.property(\"relationType\", \"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 2",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 2 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"VAT-25\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdVat_1\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdVat_1\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVat}}/values/condensed?query=VAT-25",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "VAT-25"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 2 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"Ledger-25-AI\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdLedger_1\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdLedger_1\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Apply Ledger Manual 50% of the time\r",
																	"var rnd = Math.random();\r",
																	"// console.log(rnd)\r",
																	"\r",
																	"if (rnd > 1) {\r",
																	"    pm.environment.set(\"Ledger-25\", \"Ledger-25-AI\");\r",
																	"} else {\r",
																	"    pm.environment.set(\"Ledger-25\", pm.environment.get(\"Ledger_25_Manual\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/condensed?query=Ledger-25-AI",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "Ledger-25-AI"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdInterim\", jsonData.parameterValueId)\r",
																	"}\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == \"Interim-1\") {\r",
																	"            jsonDataAL=jsonData[x];\r",
																	"            pm.environment.set(\"parameterValueIdInterim\", jsonDataAL.parameterValueId)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(pm.environment.get(\"parameterValueIdInterim\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdInterim}}/values/condensed?take=5&query=Interim-1",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5"
																},
																{
																	"key": "query",
																	"value": "Interim-1"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL2\",\r\n    \"quantity\": 4.0000,\r\n    \"unitPrice\": 25.0000,\r\n    \"netAmount\": 100.00,\r\n    \"vatRate\": 25.0000,\r\n    \"discount\": 0.0000,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n     \"startPeriodMonth\": \"{{startPeriodMonth}}\",\r\n     \"startPeriodYear\": \"{{startPeriodYear}}\",\r\n     \"totalPeriod\": 4,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger_1}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat_1}}\"\r\n        }\r\n         ,\r\n         {\r\n             \"parameterId\": \"{{parameterIdInterim}}\",\r\n             \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n         }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
															"    //     pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"    //     pm.expect(jsonData.startPeriodMonth.toString()).to.eql(pm.environment.get(\"startPeriodMonth\"));\r",
															"    //     pm.expect(jsonData).to.heve.property(\"totalPeriod\", 3);\r",
															"    // });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"quantity\", 4);\r",
															"        pm.expect(jsonData).to.have.property(\"unitPrice\",25);\r",
															"        pm.expect(jsonData).to.have.property(\"netAmount\", 100);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 125);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions is not empty.\", function () {\r",
															"        pm.expect(jsonData).to.be.not.property(\"accountingParameters\", []);\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var x;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VatCode is VAT-25.\" , function () {\r",
															"                pm.expect(jsonData[i]).to.have.property(\"code\", \"VAT-25\");\r",
															"                pm.expect(jsonData[i]).to.have.property(\"relationType\", \"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Comments",
									"item": [
										{
											"name": "PWA /invoiceLines/ID 1 -postLineComment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"",
															"pm.environment.set('comment_B', 'Comment_B-' + moment().format(\"YYMMDD-HHmmss\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"if (pm.response.code == 200) {",
															"const jsonData = pm.response.json();",
															"console.log(jsonData);",
															"",
															"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId\")) {",
															"            var jsonDataAL=jsonData;",
															"        pm.environment.set(\"commentId\", jsonDataAL.commentId);",
															"        pm.environment.set(\"comment\", jsonDataAL.comment);",
															"    }",
															"    }",
															"    console.log(\"CommentId_ is: \" +pm.environment.get(\"commentId\"));",
															"    console.log(\"Comment is: \" +pm.environment.get(\"comment\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"@ApiTest Controller﻿ It is for line-B.-{{comment_B}}\",\r\n    \"taggedUserIds\": [\r\n         \"{{testControllerUserId}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}/comments",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}",
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 -seeLinesComment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"const jsonData= pm.response.json();\r",
															"  // console.log(jsonDataAL);\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId\") &&jsonData[i].commentId==pm.environment.get(\"commentId\")) {\r",
															"            var jsonDataAL =jsonData[i];\r",
															"\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment is found.\", function () {\r",
															"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@ApiTest Controller﻿ It is for line-B.-\" +pm.environment.get(\"comment_B\") );\r",
															"});   \r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : CreatedBy is found.\", function () {\r",
															"        pm.expect(jsonDataAL.createdBy).to.have.property(\"userId\", pm.environment.get(\"testControllerUserId\") );\r",
															"}); \r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TaggedUsers is found.\", function () {\r",
															"        pm.expect(jsonDataAL.taggedUsers[0]).to.have.property(\"userId\", pm.environment.get(\"testControllerUserId\"));\r",
															"});   \r",
															"}\r",
															"}\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}/comments",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}",
														"comments"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Accounting Lines - Periods",
							"item": [
								{
									"name": "PWA /accountinglines/generate - Check codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 4 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Enumerate accounting lines\r",
													"    // //\r",
													"\r",
													"    // const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    // var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    // for (i in jsonDataAL) {\r",
													"    //     if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
													"    //         jsonDataALHeaderLine = pm.response.json().accountingLines[i];\r",
													"    //     }\r",
													"    //     if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"    //         jsonDataAL1 = pm.response.json().accountingLines[i];\r",
													"    //         jsonDataALP1 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"\r",
													"    //     }\r",
													"    //     if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"    //         jsonDataAL2 = pm.response.json().accountingLines[i];\r",
													"    //         jsonDataALP2 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // //\r",
													"    // //  HEADERLINE\r",
													"    // //\r",
													"\r",
													"    // ////////// VAT Amount //////////\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine vatAmounts\", function () {\r",
													"    //     pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    // });\r",
													"\r",
													"\r",
													"    // ////////// AL 1 Fields //////////\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.id).to.eql();\r",
													"    //     // pm.expect(jsonDataALHeaderLine.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataALHeaderLine.description).to.eql(\"Semine Inngående Faktura\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.lineItemType).to.eql(\"HeaderLine\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.netAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.totalAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"    //     pm.expect(jsonDataALHeaderLine.exchangeRate).to.eql(1.000000);\r",
													"    //     pm.expect(jsonDataALHeaderLine.lineNumber).to.eql(1);\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingNetAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.kidNumber).to.eql(1);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.dueDate).to.eql(1);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.invoiceNumber).to.eql(1);\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // const jsonDataALP0 = pm.response.json().accountingLines[1].accountingLineParameters;\r",
													"\r",
													"\r",
													"    // var x;\r",
													"    // // AL 1 Parameters\r",
													"    // for (i in jsonDataALP1) {\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Credit\") {\r",
													"    //         //console.log(jsonDataALP0[i])\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 VAT-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"VAT-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // //\r",
													"    // //  AL 2\r",
													"    // //\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataAL1.id).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL1.description).to.eql(\"IL1\");\r",
													"    //     pm.expect(jsonDataAL1.lineItemType).to.eql(\"AccountingLine\");\r",
													"    //     pm.expect(jsonDataAL1.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataAL1.netAmount).to.eql(1.00);\r",
													"    //     pm.expect(jsonDataAL1.totalAmount).to.eql(1.15);\r",
													"    //     pm.expect(jsonDataAL1.vatAmount).to.eql(0.15);\r",
													"    //     pm.expect(jsonDataAL1.exchangeRate).to.eql(1.000000);\r",
													"    //     // pm.expect(jsonDataAL1.lineNumber).to.eql(2);\r",
													"    //     // pm.expect(jsonDataAL1.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL1.reportingNetAmount).to.eql(1.0);\r",
													"    //     pm.expect(jsonDataAL1.reportingAmount).to.eql(1.15);\r",
													"    //     pm.expect(jsonDataAL1.reportingVatAmount).to.eql(0.15);\r",
													"    //     // pm.expect(jsonDataAL1.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataAL1.kidNumber).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.dueDate).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.invoiceNumber).to.eql();\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // var x;\r",
													"\r",
													"    // for (i in jsonDataALP1) {\r",
													"\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Vat\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"VAT-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }else{}\r",
													"\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ledger-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"Ledger-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"\r",
													"\r",
													"    // //\r",
													"    // //  AL 3  \r",
													"    // //\r",
													"\r",
													"\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 3 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataAL2.id).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL2.description).to.eql(\"IL2\");\r",
													"    //     pm.expect(jsonDataAL2.lineItemType).to.eql(\"AccountingLine\");\r",
													"    //     pm.expect(jsonDataAL2.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataAL2.netAmount).to.eql(100.00);\r",
													"    //     pm.expect(jsonDataAL2.totalAmount).to.eql(125);\r",
													"    //     pm.expect(jsonDataAL2.vatAmount).to.eql(25);\r",
													"    //     pm.expect(jsonDataAL2.exchangeRate).to.eql(1.000000);\r",
													"    //     // pm.expect(jsonDataAL2.lineNumber).to.eql(3);\r",
													"    //     // pm.expect(jsonDataAL2.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL2.reportingNetAmount).to.eql(100.0);\r",
													"    //     pm.expect(jsonDataAL2.reportingAmount).to.eql(125);\r",
													"    //     pm.expect(jsonDataAL2.reportingVatAmount).to.eql(25);\r",
													"    //     // pm.expect(jsonDataAL2.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataAL2.kidNumber).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.dueDate).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.invoiceNumber).to.eql();\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // var x;\r",
													"    // for (i in jsonDataALP2) {\r",
													"\r",
													"    //     if (jsonDataALP2[i].parameterTypeCode == \"Vat\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-25\", function () {\r",
													"    //             pm.expect(jsonDataALP2[i].code).to.eql(\"VAT-25\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"\r",
													"    //     if (jsonDataALP2[i].parameterTypeCode == \"Ledger\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ledger-25\", function () {\r",
													"    //             pm.expect(jsonDataALP2[i].code).to.eql(\"Ledger-25\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"\r",
													"    // }\r",
													"\r",
													"\r",
													"//}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											],
											"query": [
												{
													"key": "documentType",
													"value": "CostInvoice"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/accountingLines - Period Allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 3) {\r",
													"            jsonDataALPeriod_1 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_1_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"            for(i in jsonDataALPeriod_1_LineParams) {\r",
													"                // if(jsonDataALPeriod_1_LineParams.)\r",
													"            }\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 4) {\r",
													"            jsonDataALPeriod_2 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_2_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 5) {\r",
													"            jsonDataALPeriod_3 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_3_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Is periodLines found?\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_1_LineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_2_LineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_3).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_3_LineParams).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  PERIOD 1\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodeLine_1 vatAmount is 0000.\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    // var testObject = null;\r",
													"    // for (i in jsonDataALHeaderLineParams) {\r",
													"    //     if (jsonDataALHeaderLineParams[i].parameterTypeCode == \"Ledger\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"    //         testObject = jsonDataALHeaderLineParams[i].code\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    //jsonDataALPeriod_1 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodizedLine_1 is found.\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingNetAmount\", 3.3);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingAmount\", 3.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    //jsonDataALPeriod_2 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodizedLine_2 is found.\", function () {\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingNetAmount\", 3.3);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingAmount\", 3.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"    //jsonDataALPeriod_3 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodizedLine_1 is found.\", function () {\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"netAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"totalAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingNetAmount\", 3.4);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingAmount\", 3.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountingLines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountingLines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Lines",
							"item": [
								{
									"name": "PWA /accountinglines/generate - Check codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											],
											"query": [
												{
													"key": "documentType",
													"value": "CostInvoice"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 15 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(15);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/accountingLines - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"    const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().accountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL1\" && jsonDataAL[i].lineNumber == 3) {\r",
													"            jsonDataIL1_PL3 = jsonDataAL[i];\r",
													"        }\r",
													"         if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL1\" && jsonDataAL[i].lineNumber == 4) {\r",
													"            jsonDataIL1_PL4 = jsonDataAL[i];\r",
													"        }\r",
													"         if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL1\" && jsonDataAL[i].lineNumber == 5) {\r",
													"            jsonDataIL1_PL5 = jsonDataAL[i];\r",
													"        }\r",
													"\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL2\" && jsonDataAL[i].lineNumber == 7) {\r",
													"            jsonDataIL2_PL7 = jsonDataAL[i];\r",
													"        }\r",
													"         if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL2\" && jsonDataAL[i].lineNumber == 8) {\r",
													"            jsonDataIL2_PL8 = jsonDataAL[i];\r",
													"        }\r",
													"         if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL2\" && jsonDataAL[i].lineNumber == 9) {\r",
													"            jsonDataIL2_PL9 = jsonDataAL[i];\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL2\" && jsonDataAL[i].lineNumber == 10) {\r",
													"            jsonDataIL2_PL10 = jsonDataAL[i];\r",
													"        }\r",
													"\r",
													"\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Are AL objects found?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :VatAmounts in HeaderLine is 0000.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].parameterTypeCode == \"Ledger\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i].code\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLineParameter is exist.\", function () {\r",
													"        pm.expect(testObject).to.eql(pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"description\", \"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineItemType\", \"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"netAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"totalAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineNumber\", 1);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingNetAmount\", 1261.5);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingAmount\", 1261.5);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"lineItemType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"netAmount\", 1.00);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"totalAmount\", 1.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"vatAmount\", 0.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingNetAmount\", 10);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingAmount\", 11.5);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"reportingVatAmount\", 1.5);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1_PeriodizedLine_1 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"reportingNetAmount\", 3.3);\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"reportingAmount\", 3.33);\r",
													"        pm.expect(jsonDataIL1_PL3).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1_PeriodizedLine_2 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"reportingNetAmount\", 3.3);\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"reportingAmount\", 3.33);\r",
													"        pm.expect(jsonDataIL1_PL4).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1_PeriodizedLine_3 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"netAmount\", 0.34);\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"totalAmount\", 0.34);\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"reportingNetAmount\", 3.4);\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"reportingAmount\", 3.34);\r",
													"        pm.expect(jsonDataIL1_PL5).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"    \r",
													"    //AL 1 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP1) {           \r",
													"         console.log(jsonDataALP1[i])\r",
													"        if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            i = i;\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Interim.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\",\"Interim-1\");\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].parameterTypeCode == \"Vat\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_1 is VAT-15\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-25\", \"VAT-15\"]);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccointingLine_2 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"lineItemType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"netAmount\", 100.00);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"totalAmount\", 125);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"vatAmount\", 25);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingNetAmount\", 1000);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingAmount\", 1250);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"reportingVatAmount\", 250);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2_PeriodizedLine_1 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"netAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"totalAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"reportingNetAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"reportingAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL7).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2_PeriodizedLine_2 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"netAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"totalAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"reportingNetAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"reportingAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL8).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2_PeriodizedLine_3 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"netAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"totalAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"reportingNetAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"reportingAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL9).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2_PeriodizedLine_4 field is exist and correct.\", function () {\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"lineItemType\", \"PeriodizedLine\");\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"netAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"totalAmount\", 25);\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"vatAmount\", 0.0000);\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"reportingNetAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"reportingAmount\", 250);\r",
													"        pm.expect(jsonDataIL2_PL10).to.have.property(\"reportingVatAmount\", 0.00);\r",
													"    });\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().accountingLines;\r",
													"    var jsonDataLast= jsonData[jsonData.length-1];\r",
													"\r",
													"   console.log(jsonDataLast);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Last line is found and 10.(2 Invoicelines with 3 and 4 periodes.)\", function () {\r",
													"         pm.expect(jsonDataLast).to.have.property(\"lineNumber\", 10);\r",
													"    });\r",
													"    }\r",
													"\r",
													"    // AL 2 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].parameterTypeCode == \"Ledger\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Interim\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\",\"Interim-1\");\r",
													"    });\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].parameterTypeCode == \"Vat\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat in AccointingLine_2 is VAT-25\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-25\", \"VAT-15\"]);\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountingLines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountingLines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    ////////// Approve //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Approve_actionExecuted  is successfully.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													"\r",
													"console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"setTimeout(function () {\r",
													"    console.log(\"Done.\");\r",
													"}, 5000);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Approve\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 10 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(10);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status Approved /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is approved\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Approved\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - GenerateAndPost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// Approved and posted //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is approved and posted.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"}\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"GenerateAndPost\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 10 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(10);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Posting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    /////////  Status is Posting /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status is Posting.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Posting\");\r",
													"    });\r",
													"\r",
													"}else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Attachment",
							"item": [
								{
									"name": "PWA /invoices/ID/- attachment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    for (x in jsonData) {\r",
													"        \r",
													"            pm.environment.set(\"attachmentId\", jsonData[x].attachmentId);\r",
													"        }\r",
													"}\r",
													" console.log(\"attachmentId is : \" +pm.environment.get(\"attachmentId\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "files",
												"value": "JVBERi0xLjUKJbXtrvsKNCAwIG9iago8PCAvTGVuZ3RoIDUgMCBSCiAgIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nGVPu27DMAzc+RUc7cGMqAcpjS2QpVtRbUWHwLCTDgrQxv+PKo0tA60ICLgjeXdkNLUGrl/0TDEmVcaxwBeY39b3GQ8ng+cbPGdIlOrT8FhqyDohm1Qs2mApBmUnmAsc5sEMBhnzDO/d21Q+rxPmniV2023Bp561W5bT2A+uu5TpuvQf+QWO+W5NQaJYfSRwNpIyI6uQxoBlZ5Kj5AM69qRJ0RqtAWqkpCRuxyPaaMirwj4iUk2kSTS8mow7ExKJDZsEsg/VPEBzWYm6suXYmJZzlfh7yYgX+H/dDK/wA1/mVWAKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCiAgIDIyOAplbmRvYmoKMyAwIG9iago8PAogICAvRXh0R1N0YXRlIDw8CiAgICAgIC9hMCA8PCAvQ0EgMSAvY2EgMSA+PgogICA+PgogICAvRm9udCA8PAogICAgICAvZi0wLTAgNiAwIFIKICAgPj4KPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgJSAxCiAgIC9QYXJlbnQgMSAwIFIKICAgL01lZGlhQm94IFsgMCAwIDU5NS4yNzU1NzQgODQxLjg4OTc3MSBdCiAgIC9Db250ZW50cyA0IDAgUgogICAvR3JvdXAgPDwKICAgICAgL1R5cGUgL0dyb3VwCiAgICAgIC9TIC9UcmFuc3BhcmVuY3kKICAgICAgL0kgdHJ1ZQogICAgICAvQ1MgL0RldmljZVJHQgogICA+PgogICAvUmVzb3VyY2VzIDMgMCBSCj4+CmVuZG9iago3IDAgb2JqCjw8IC9MZW5ndGggOCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKICAgL0xlbmd0aDEgNTQyMAo+PgpzdHJlYW0KeJzlV3t4VNW1X/uss+edmTOTmTxI5pVkSIYQEhNCCEQzIigPpeGhBW6jA4SIVEwA5WGIBLzkgdhghaiIMSJQBYopUkggIGgMVkzrlYRbq14VYin3jpHaoL1jstN1hqC2t/b2u//063f3njN777X2Y/3Wa58DDAAMUAUInoVL55e/Z3xmO4D+LQBp3sKV93vgHmc+gCkNgInS8ruXLhu9cgmAmcaw7+5715RqnW8Gqb+f1ngWL5pfYvotO0f8LqKNWUyEqGe1FQAWE41TFi+9f3VgNb9E4ywaj723bOF8gMD7NF5M44Kl81eXyxWaZTTeRWNP+fJF5eO1v6eupR2ALwYJSkWDXMp3kbRaGBYwyV+B5ium4+skGTLbu0LXgdIV6gplRVu9Vp/X6i2VoX8FJvR/Ihq05j9+vlzjBwY1gxfknfwypMJDgYIok2Q2Si63S6eXtAbJ7XZNMBhdbtnBwPGcfWvcNqu8Dbb6HrNuTnMZjO4ELSQlxJsztPH2pDTl/fZQf6jHasunQkf39PWElN4vepUOa2x+1rRZc7SK+VPqDjVzkw5a/IwVH3b7M/3f82Mxc4xiyUkahz3GzVzMYZe9ScNTc10sJ3tM7ujhmWwUyx2dkpMdI09e8dZdu19etefB8/8uPhAXl3xWVRFa/tO2mu0V599ksVfu+Q3f9XremKqVCxe549PfPfzuR1mZb0+6ufah+9a64zJO7uvoGU7mhGWEe51cAXZIgPJACjiYvlpXyx0vMt5qYsfiWm0tps2JCQ5J59DBNMlmmZSo9If6Qu0EMIIu1KP0Uu3rJUJWwF/oLHc2Od92XnbyQihkhVKhozCBj9Rm6jL1Iw1lUMbKpDJHWYK+eBkjrN4IsDyHmSV7wKpATjZoI/i18rr+g6bOI0tOL1j49g9FnzjN/P3nmbZF2l27vdUs3TnvxOnRow+MGMnGMgOLZjeJD9qfOHSgkVwSjgJonYQpCeYFhmts+jgLaJxah6nG6cGWhLZ4RQtWi06nKbLqLEWJcbphNycTpuz+/v5QBFVmQUFPX0F7KNtqI5MForNSilLKU7akNFF9JeXDlMEUPcl+A0ke47AmW0cPV+317U6OI8KU/ZNObnjpROvyB+r3tC5f9eie1tbC5jUP7sO6tSuvnB/4gdT43I4TuwZqpMadT7/y/ECNHDxw94K15Nlkl1MEZI3GHvHp9IBZc0L+GbRJnOlkuFmn9BeEsknOnv5QVsCo6AP6In1QX67nrDg6J3J+8qkWKnLwqyaN/dKQTuQS0kk0jAnEox7QzDQ1ZmuLqc3AJB1Mj9LrjDfbVTX0hVQN9PS1hyLwDwUdv3JIhPevASxpWbt22/7W1gkvP3CqQ9qlQnq2UYVEUBaVfAZsMEznXuLdhGIqoZC2wXqZBTARAlyndPX099BZfaHsLDat2TB7znHQQYCE1YFu8ORYa97YuYFo0LtBYYrk1qo4y/XP6vXF6HV4SQqvRv5soPfMQC/v3hvu5ukqzrLBC3iacKbCxaE4njUUxrO+CWOoZnWyvdpRF9dqlVt9Ld/E8cwEnVmrsydNSlP62ylpfDuOQ4q40qtc6bX9eRxfC2NIpTAOLE00JBoTTaPI2UcaR5rG68cbxhvHm4we8LAUKc2QZhwRnWnPdIyISXOluf0evzcltdpQbaw2VUfZyPJMkjQGjRFNGIVmtKCC8TgMEzBRdupTM/2F/rv86/xV/i3+Jv9lf1wxUBj9RcLQJP/PhDGGjIWPTH9hXl3dgq2F7bu//PW81+4t7Zi/YfOifYF9T370y9JDcuGBtLTZswNTvOYRT9XtOJycfCI3d+6MaUU+S8q2DY37XapfMsgj5/ycN5IfjQ3Em7nOgi+ClbXpagxG0rIMOsVmVv2ooJ1+2armMkNXYyk/P+vgSw6mepJqPnvMeOYgUXOtybk5VraKVYiN01YcP969s6aGN4pX6wea6qZvf/YdKVjPbrgaE4qa78mXJLqbXg3cSOeCzGXJyrnMrAY0gFUCRIPWymWNStRb0aBTGRMAtdsYrtdzvU6rkVFioOcGo9LVHhsJ956ukG3IpvxTLf2uNbqrXeVqn4zsMalGnmBhFsmitegsMAdWQjlsBr2W6SQN6uUYFi/dweZIRaa72WJpNVsprcXl8irtal0Nq5WqTE9KT2GDHEuW0zMvy2HJ6MVkqU30Sj5R8YmU/07twF213dw8EI8HwulsnVgfwV5BeTqD/NoAPmgLpMa7jbF6M7wYq2k1Wz3V7qOJrcnkxrEmiMU4NZbdqLNPGk7x/FZXKFtVPuFs7+nrJy/uoHxtzbfmq/n6vixnlivLneXJ8mYlFaYGnAFXwB3wBLyBpCJnkavIXeQp8hYlFaWWp2501rhq3DWeGu/GpC2pTamXU13Xll5bdG1B0BV0Bz1Bb7mr3F3uKfdWuarcVZ4qb1wxWT/iquSc17M8Mj0lfvIBclBvbiS7aHMjmUU68eH+9WVPtba0FLbV7j8z8BWTfvJE8PDsRSfm/eGylFNasWDFu4f8tw6s31s6/9TO4ydt6x4ZNWpvamq/6qN0p+FF0lU8FAYSKNZrZXN1VK1BjfVYUtIwrS0KJtsnDVP6e7JD10K7Tw1tyqaWBCWhKmFLQlMCZ9+6jK/dUknqLeWlaLo4/Zmilzs6Xi56Zvptu4sHxDmWwTS375Rz96enX+jsvJCevjclhS4JM7OxccnwdQ6mnB4No/88Bz/x13Nw6FoOPhi8GjffzsDW/yUDa+wDjWoKjpyMoL7RmUCWplProkhCMMM6GGSz2Hy2mj3Efix1SO97hnuyPOM8+71Jg4PquxY0sZksSPzKIX408fO/5n93YXTG+2w728EaqTYN1Q6qb7A3iK/5m6v/nmL4O+YwunW+qxhB1YcaWWqJAnmIjsC/nqMD/f9Zvv8XheVCC5yhegr2wg62h0alRF5GlCbpIGyEB4jyGjvD6qQMou2By3CWZtbAGdwrA5sKOUQFeJdL0MdmwyHaI5/ZWT7laJCny4fkmXKLfFHuhDx5hdwpB+UVLAd38jv4Hnry8XXJBr8AN7SwD2EFHMVLmINt8kTZDB9iJ+6FT+gU1a5noB52QQXJYmdlsE6qkGYS5TTvhO1Uy4jfSV56lqQ7yh6GbngSZWkyNLJuwnUGvoCHcba0jlwjRyol+U/TXp20fjuskIF3MwMIKZ1oJD2dtSDy78QM3h2plynKKmA27NK0aOzaZDpF1dge9hoLaR6HJjiLP8Bl+B7bKCfLL8iTof6qBjAI9bT3dnWNppStIexqrVB3l1bJQbYXLslB7QLa+3UVEZ15SJpJiEqhjZ5VGoUwjWcbsY4kVblO6NROlTNpPe2grSTUAGWYC0uoVwEH4CBkYAPU004RvJo8/gWt3CF/TJjr2aPSF9CJE8EPpXIv6Zo+F6AB4IhWwyO36UiP0iz5ppQ0B2bM8bwx15sx8i+GHkXraYai5qg1npbBwaI5cgKf28wTm9Gna5Z9yR9/F/PjjJHTiuZ4mgcmTRzadVJwItFmzaGuOiIy0SdNjPDUQ5u5j35Tgs2ehYs9m5RNyeM2KYvGZUAkA0p3trR1Bd++y1JwBdy6iA+ffTW9/1r75bn+W81z9fTtCSqTXXVy0tdS4aTvV/HlufAM89wh+jfFTB5ayu1QI4dgmfYMHJXy4RS3UfsIZfwLg2E5nXSdDHl8DSjyRaiQS2GZyh9aP5EOKSDh6P1Gom9kTKFnx9VHphzF76Xnd5Q0e0gsmqN7Qf2ujkhhxtmQDospk6lvR0+pUssOKYZauUWqCgx+JTBsx//24R+z8csG/MKMVwT2CfyDDz834+8b8LIPP9t0I/9MYG8DftqAoTD+Vxj/U+Clcfi7CXhR4G+z8ZOeWfyTBuyhiT2z8ML5TH4hjOcz8WOBHwn8MBv/w44fNOD7At+z4W8q8d1j+GuB52j6uUrs7rqFd1di1y149p0EflbgOwn4bwLfFvgrgb8U2NmAb51x8bcEnnHhm9n4C4EdG628IxFfj8F2ga8JfFXgKYEnBb4i8ITA4wLbBB4TeNSKrdU+3iqw5cgx3iLwyOFifuQYHqmSD//cxw8XBwbxcED+uQ8PCXy5AQ8K/JnAZoEvCTxQgj814/59Pr6/BPfttfF9PtxrwxdJ6BfD+ILAnwjcI3C3DXcJfH6nmT+fjTvN+FwJNtGUpgZ8VmDjMyZ6U8VnTLjj6Xi+owSf3q7wp+Nxu4JPGfBJgU80RPEnBDZE4TZatK0Btz5u5lvT8HEz/jiMj205xh8TuKW+mG85hluq5Pof+Xh9MdYH5B/58FGBmx8ZxTcLfGQUbiKYm27Eulojr7NjrRFriFBTgtWkqWofbrTivwp8eIOVPyxwgxXXC6wSuE5gYPChykr+kMDKSlxbghWzHbzChw8KXCNwtRlXmXClAR8QeH8YV4RxeRiXhbFcYJnA+wTe68UfClxincCXzMJ7BC6uxLtpUCpwkcASgQsFLhA4fxwGw3inCYsF/ovAeQLnzjHwuWGcY8Dvx8Tz72fjHQJvp5Nvn4CzHTiLKXxWHM6044yp0XyGwCIjfk/g9NsUPl3gbQreKnAacaYJnDpF4VOjcYozik9RcHIU3iLw5gac1IATBd4kZfCbwjjhGN44DQMCCwXecL2N32DH6wss/HobFoyP4gWBQQuOj8JxAvMFjs2z87FhzBuj8Dw7jsk18jEK5hpxtAtzojD7OiPPFnidEbMyjTwrCjONOCpDz0cpmKHHkdmYPsLH00twhN/GR/jQb8O0VB9PuxFTfTjcZ+TDLegzYorAZIFJFvQSTq8NPSXoDqOLILhK0BmFiaTBRIEJYRw2AeNpEC8wrgRjSVOxAmNoUUw8OgTaBUYLtNEEm0ArYbVOQKUSLSVoFhhliuFRAk002xSDRoEGBfUCdTRNJ1BrR00JysSUyQMcSFQUlKUVLmUgUxAEshZWsvFRlv7PUOAfLcDfLM4/AQ3AOe8KZW5kc3RyZWFtCmVuZG9iago4IDAgb2JqCiAgIDM3MjUKZW5kb2JqCjkgMCBvYmoKPDwgL0xlbmd0aCAxMCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnicXZHPboMwDMbveQofu0NFoLS0EkKauguH/dHYHiAkhkYaIQrhwNvPSapO2oH4F9vfJ+Nk1/alNdpD9uFm2aGHQRvlcJlXJxF6HLVheQFKS3+/xVNOwrKMxN22eJxaM8ysriH7pOLi3Qa7ZzX3+MQAIHt3Cp02I+y+r11Kdau1Pzih8cBZ04DCgexehX0TE0IWxftWUV37bU+yv46vzSIU8Z6nkeSscLFCohNmRFZz3kA9DA1Do/7V8kOS9IO8Ccfq44FaOafA6tMxMgVilVgFviS+BMbESFzwyBTIp0w+JXGVPKvgWaV8FfJlHpkC+SQ+RU79pzjDOfE5Dn+fMvxG2PdjP3J1jlYTHyXuJGxDG3y8m51tUMXvF28Fi6EKZW5kc3RyZWFtCmVuZG9iagoxMCAwIG9iagogICAyODYKZW5kb2JqCjExIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvcgogICAvRm9udE5hbWUgL0FOWkhOSitEZWphVnVTYW5zCiAgIC9Gb250RmFtaWx5IChEZWphVnUgU2FucykKICAgL0ZsYWdzIDMyCiAgIC9Gb250QkJveCBbIC0xMDIwIC00NjIgMTc5MyAxMjMyIF0KICAgL0l0YWxpY0FuZ2xlIDAKICAgL0FzY2VudCA5MjgKICAgL0Rlc2NlbnQgLTIzNQogICAvQ2FwSGVpZ2h0IDEyMzIKICAgL1N0ZW1WIDgwCiAgIC9TdGVtSCA4MAogICAvRm9udEZpbGUyIDcgMCBSCj4+CmVuZG9iago2IDAgb2JqCjw8IC9UeXBlIC9Gb250CiAgIC9TdWJ0eXBlIC9UcnVlVHlwZQogICAvQmFzZUZvbnQgL0FOWkhOSitEZWphVnVTYW5zCiAgIC9GaXJzdENoYXIgMzIKICAgL0xhc3RDaGFyIDExNgogICAvRm9udERlc2NyaXB0b3IgMTEgMCBSCiAgIC9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCiAgIC9XaWR0aHMgWyAzMTcgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDY4NCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgNjM0IDYxMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2MTIgMCA1NDkgMCA2MTUgMCAwIDYzMyAyNzcgMCAwIDAgOTc0IDYzMyAwIDAgMCAwIDUyMCAzOTIgXQogICAgL1RvVW5pY29kZSA5IDAgUgo+PgplbmRvYmoKMSAwIG9iago8PCAvVHlwZSAvUGFnZXMKICAgL0tpZHMgWyAyIDAgUiBdCiAgIC9Db3VudCAxCj4+CmVuZG9iagoxMiAwIG9iago8PCAvUHJvZHVjZXIgKGNhaXJvIDEuMTYuMCAoaHR0cHM6Ly9jYWlyb2dyYXBoaWNzLm9yZykpCiAgIC9DcmVhdG9yIDxGRUZGMDA0OTAwNkUwMDZCMDA3MzAwNjMwMDYxMDA3MDAwNjUwMDIwMDAzMTAwMkUwMDMwMDAyMDAwMjgwMDY4MDA3NDAwNzQwMDcwMDA3MzAwM0EwMDJGMDAyRjAwNjkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyRTAwNkYwMDcyMDA2NzAwMjk+CiAgIC9DcmVhdGlvbkRhdGUgKEQ6MjAyMDEyMDIxODQ4NDYrMDEnMDApCj4+CmVuZG9iagoxMyAwIG9iago8PCAvVHlwZSAvQ2F0YWxvZwogICAvUGFnZXMgMSAwIFIKPj4KZW5kb2JqCnhyZWYKMCAxNAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDU1OTIgMDAwMDAgbiAKMDAwMDAwMDQ1MSAwMDAwMCBuIAowMDAwMDAwMzQyIDAwMDAwIG4gCjAwMDAwMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDMyMCAwMDAwMCBuIAowMDAwMDA1MTgzIDAwMDAwIG4gCjAwMDAwMDA2ODMgMDAwMDAgbiAKMDAwMDAwNDUwMiAwMDAwMCBuIAowMDAwMDA0NTI1IDAwMDAwIG4gCjAwMDAwMDQ4ODkgMDAwMDAgbiAKMDAwMDAwNDkxMiAwMDAwMCBuIAowMDAwMDA1NjU3IDAwMDAwIG4gCjAwMDAwMDU5MzMgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSAxNAogICAvUm9vdCAxMyAwIFIKICAgL0luZm8gMTIgMCBSCj4+CnN0YXJ0eHJlZgo1OTg2CiUlRU9GCg==",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"contentType": "application/pdf",
													"type": "file",
													"src": "/C:/Users/adama/OneDrive/Skrivebord/postman/AttachmentForPostAndDelete_(1).pdf"
												}
											]
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found.\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"%PDF-1.5\"); // Start of file\r",
													"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments/ CheckAttachment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"    for(i in jsonData){\r",
													"        \r",
													"    }\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment is deleted. \", function () {\r",
													"        pm.expect(jsonData[i]).to.have.not.property(\"fileName\", \"AttachmentForPostAndDelete_(1).pdf\");\r",
													"    });\r",
													"    }\r",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Download Spreadsheet",
							"item": [
								{
									"name": "PWA /export/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Openxmlformat is OK.\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\");\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(8000);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// // Get some base64 encoded binary data from the server. Imagine we got this:\r",
													"// var b64Data     = 'H4sIAAAAAAAAAwXB2w0AEBAEwFbWl2Y0IW4jQmziPNo3k6TuGK0Tj/ESVRs6yzkuHRnGIqPB92qzhg8yp62UMAAAAA==';\r",
													"\r",
													"// // Decode base64 (convert ascii to binary)\r",
													"// var strData     = atob(b64Data);\r",
													"\r",
													"// // Convert binary string to character-number array\r",
													"// var charData    = strData.split('').map(function(x){return x.charCodeAt(0);});\r",
													"\r",
													"// // Turn number array into byte-array\r",
													"// var binData     = new Uint8Array(charData);\r",
													"// console.log(binData)\r",
													"\r",
													"// // Pako magic\r",
													"// var data        = pako.inflate(binData);\r",
													"\r",
													"// // Convert gunzipped byteArray back to ascii string:\r",
													"// var strData     = String.fromCharCode.apply(null, new Uint8Array(data));\r",
													"\r",
													"// // Output to console\r",
													"// alert(strData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceIds\": [\r\n        \"{{cInvoiceId}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/export/invoicelines?filter=%5B%5D&sort=%5B%5D",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"export",
												"invoicelines"
											],
											"query": [
												{
													"key": "filter",
													"value": "%5B%5D"
												},
												{
													"key": "sort",
													"value": "%5B%5D"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /export/accountingLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Openxmlformat is OK.\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\");\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(7000);\r",
													"    });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceIds\": [\r\n        \"{{cInvoiceId}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/export/accountinglines?filter=%5B%5D&sort=%5B%5D&exportHeader=false",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"export",
												"accountinglines"
											],
											"query": [
												{
													"key": "filter",
													"value": "%5B%5D"
												},
												{
													"key": "sort",
													"value": "%5B%5D"
												},
												{
													"key": "exportHeader",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Posting Error, Retry",
							"item": [
								{
									"name": "INT /invoices/ID/status - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"//         pm.expect(jsonData.buyerReference).eql(\"ApiTest Controller\");\r",
													" \r",
													"\r",
													"//     });\r",
													"\r",
													"// }\r",
													"\r",
													"\r",
													"if (pm.response.code != 200) {\r",
													"    console.log(pm.response)\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"PostingError\",\r\n    \"message\": \"200 chars ÆØÅ 0002 000000003 000000004 000000005 000000006 000000007 000000008 000000009 000000010 000000011 000000012 000000013 000000014 000000015 000000016 000000017 000000018 000000019 000000020\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/status",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities PostingError\", function () {\r",
													"        pm.expect(jsonData.details).property(\"newValue\",\"PostingError\");\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PostingError message is in comment\", function () {\r",
													"        pm.expect(jsonData.comment).to.eql(\"200 chars ÆØÅ 0002 000000003 000000004 000000005 000000006 000000007 000000008 000000009 000000010 000000011 000000012 000000013 000000014 000000015 000000016 000000017 000000018 000000019 000000020<p><br></p>\");\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Restart comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 6 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :RestartActions is successfully\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"ReStart\",\r\n    \"comment\": \"Restart with comment and user mention\",\r\n    \"mentionedUserIds\": [\r\n        \"{{userIdController}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - Restart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"InvoiceRestarted\") {\r",
													"            jsonDataActivity = jsonData[i];\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Invoice is Restarted.\", function () {\r",
													"\r",
													"        pm.expect(jsonDataActivity).to.have.property(\"activityOperationType\", \"InvoiceRestarted\");\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonDataActivity.details).to.have.property(\"comment\", \"Restart with comment and user mention\");\r",
													"\r",
													"        // pm.expect(jsonData.details).to.have.property(\"newValue\", null);\r",
													"        // pm.expect(jsonData).to.have.property(\"activityOperationType\", \"InvoiceRestarted\");\r",
													"        // pm.expect(jsonData.createdBy).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"        // pm.expect(jsonData.createdBy).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        // pm.expect(jsonData.details).to.have.property(\"comment\", \"Restart with comment and user mention\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - Restart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Restart message is in comment\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"comment\", \"Restart with comment and user mention<p><br></p>\");\r",
													"        pm.expect(jsonData).to.have.property(\"commentType\", \"Invoice\");\r",
													"\r",
													"        pm.expect(jsonData.createdBy).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonData.createdBy).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"\r",
													"        pm.expect(jsonData.taggedUsers[0]).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonData.taggedUsers[0]).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"commentStyle\", \"Default\");\r",
													"\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 3 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ApproveAction is successfully.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													"\r",
													"console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"setTimeout(function () {\r",
													"    console.log(\"Done.\");\r",
													"}, 5000);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Approve\",\r\n    \"comment\": \"Approve with comment and user mention\",\r\n    \"mentionedUserIds\": [\r\n        \"{{userIdController}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    ///////// Status in approved if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities invoice Approved.\", function () {\r",
													"        pm.expect(jsonData.details).to.have.property(\"newValue\", \"Approved\");\r",
													"        pm.expect(jsonData).to.have.property(\"activityOperationType\",\"StatusChanged\");\r",
													"    });\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"Approved\") {\r",
													"            jsonDataActivity = jsonData[i];\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    ///////// Status in approved if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities invoice Approved by ApiTest Controller.\", function () {\r",
													"\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonDataActivity.details).to.have.property(\"comment\", \"Approve with comment and user mention\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Restart messag is in comment.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"comment\", \"Approve with comment and user mention<p><br></p>\");\r",
													"        pm.expect(jsonData).to.have.property(\"action\", \"Approve\");\r",
													"        pm.expect(jsonData.commentType).to.be.oneOf([\"InvoiceLine\",\"Invoice\"]);\r",
													"\r",
													"        pm.expect(jsonData.createdBy).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonData.createdBy).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"\r",
													"        pm.expect(jsonData.taggedUsers[0]).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonData.taggedUsers[0]).to.have.property(\"userName\", \"ApiTest Controller\");\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"commentStyle\", \"Default\");\r",
													"\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status is Approved.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Approved\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 30 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"   const jsonData = pm.response.json();\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    \r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"actionExecutedSuccessfully\", true);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Post\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Posting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : Posting\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\", \"Posting\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - posted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    // console.log(jsonData)\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"PostedSuccessfully\") {\r",
													"\r",
													"            var jsonDataActivity = jsonData[i];\r",
													"\r",
													"            ///////// Status in approved if workflow triggered /////////\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities invoice is posted\", function () {\r",
													"\r",
													"                pm.expect(jsonDataActivity.createdBy).to.have.property(\"userName\", \"ApiTest Integration\");\r",
													"                pm.expect(jsonDataActivity.createdBy).to.have.property(\"email\", \"ApiTestIntegration@useful.no\");\r",
													"                pm.expect(jsonDataActivity.details).to.have.property(\"comment\", null);\r",
													"\r",
													"            });\r",
													"\r",
													"            console.log(jsonDataActivity);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - GET Invoices",
							"item": [
								{
									"name": "INT /invoices/ID/ubl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:BuyerReference\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"<cbc:BuyerReference>ApiTest Controller</cbc:BuyerReference>\");\r",
													"    });\r",
													"\r",
													"//TODO: Test XML object instead\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:StartDate, cbc:EndDate\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:StartDate>{{IsoDateStart}}</cbc:StartDate>\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:EndDate>{{IsoDateEnd}}</cbc:EndDate>\");\r",
													"    // });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost IL1\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Konto=Ledger-25-AI\");\r",
													"        pm.expect(pm.response.text()).to.include(\"MVAkode=VAT-25\");\r",
													"        pm.expect(pm.response.text()).to.include(\"Interim=Interim-1\");\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost IL2\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Konto=Ledger-15\");\r",
													"        pm.expect(pm.response.text()).to.include(\"MVAkode=VAT-15\");\r",
													"        pm.expect(pm.response.text()).to.include(\"Interim=Interim-1\");\r",
													"    });\r",
													"}\r",
													"// console.log(pm.response);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/ubl",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"ubl"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID/ubl createAccountingLines=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:BuyerReference\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:BuyerReference>ApiTest Controller</cbc:BuyerReference>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Supplier Line\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;Supplier-=\" + pm.environment.get(\"cSupplierCode-A\") + \";netamount=126.15;totalamount=126.15;vatamount=0.00</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Line 1\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;VATCode+=VAT-15;Account+=Ledger-15\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"netamount=1.00;totalamount=1.15;vatamount=0.15</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Line 2\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;VATCode+=VAT-25;Account+=Ledger-25\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"netamount=100.00;totalamount=125.00;vatamount=25.00</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"\r",
													"    // TODO: For in loop to find lines regardless of order\r",
													"\r",
													"    var jsonObject = xml2Json(pm.response.text().replace(/cbc:|cac:/g, \"\"));\r",
													"    // console.log(jsonObject.Invoice.InvoiceLine[0].AccountingCost)\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - HeaderLine\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[0].AccountingCost).to.include(\"NS4102;Supplier-=A2-2102;netamount=126.15;totalamount=126.15;vatamount=0.00\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - IL1\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[1].AccountingCost).to.include(\"S4102;VATCode+=VAT-15;Account+=Ledger-15-AI;netamount=1.00;totalamount=1.15;vatamount=0.15\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - IL2\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[2].AccountingCost).to.include(\"NS4102;VATCode+=VAT-25;Account+=Ledger-25-M-210215-232804;netamount=100.00;totalamount=125.00;vatamount=25.00\");\r",
													"    // });\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/ubl?createAccountingLines=true",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"ubl"
											],
											"query": [
												{
													"key": "createAccountingLines",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - Root",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Status : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice details are exist and correct. \", function () {\r",
													"        // pm.expect(jsonData.supplierIsApproved).eql(true);s\r",
													"        // pm.expect(jsonData.invoiceDate).eql(0);\r",
													"        // pm.expect(jsonData.dueDate).eql(126.15);\r",
													"        pm.expect(jsonData).to.have.property(\"supplierIsApproved\").eql(true);\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceCurrency\").eql(pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonData).to.have.property(\"customerReference\", \"\")\r",
													"        pm.expect(jsonData).to.have.property(\"purchaserName\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData).to.have.property(\"paymentTerms\", '');\r",
													"        pm.expect(jsonData).to.have.property(\"buyerReference\", \"ApiTest Controller\");\r",
													"        pm.expect(jsonData).to.have.property(\"buyerContactPerson\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"project\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"carPlateNumber\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"doNotPay\", false);\r",
													"        pm.expect(jsonData).to.have.property(\"supplierNsAccount\", null);\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceSourceType, voucherNumber, department, orderReference, capturedPurchaseOrderNumber and description field are exist.\", function () {\r",
													"                pm.expect(jsonData.invoiceSourceType).include(\"Api\");\r",
													"                pm.expect(jsonData.voucherNumber).to.be.not.empty;\r",
													"                pm.expect(jsonData).to.have.property(\"department\", \"department\");\r",
													"                pm.expect(jsonData).to.have.property(\"orderReference\", \"orderReference\");\r",
													"                pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", \"-1\");\r",
													"                pm.expect(jsonData).to.have.property(\"description\", null);\r",
													"            });\r",
													"\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceSourceType, capturedPurchaseOrderNumber and description fields are found.\", function () {\r",
													"                pm.expect(jsonData.invoiceSourceType).include(\"Ehf\");\r",
													"                pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", null);\r",
													"                pm.expect(jsonData).to.have.property(\"description\", '');\r",
													"                // pm.expect(jsonData.voucherNumber).to.be.not.empty;\r",
													"                // pm.expect(jsonData).to.have.property(\"department\", \"department\");\r",
													"                // pm.expect(jsonData).to.have.property(\"orderReference\", \"orderReference\");\r",
													"            });\r",
													"\r",
													"        }\r",
													"\r",
													"\r",
													"\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceAmount, supplierParty, customerParty, deliveryParty, buyer, attachments, taxDetails, invoiceAccountingLines and supplier are exist.\", function () {\r",
													"        pm.expect(jsonData, \"invoiceAmount\").to.have.property(\"invoiceAmount\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"supplierParty\").to.have.property(\"supplierParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"customerParty\").to.have.property(\"customerParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"deliveryParty\").to.have.property(\"deliveryParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"buyer\").to.have.property(\"buyer\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"attachments\").to.have.property(\"attachments\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"taxDetails\").to.have.property(\"taxDetails\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"invoiceAccountingLines\").to.have.property(\"invoiceAccountingLines\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"supplier\").to.have.property(\"supplier\").that.is.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Flag, accountNumber, purchaseOrderNumber, isDeleted and reinvoiceAddressCode are exist.\", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"flag\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"accountNumber\", (\"BBAN-\" +pm.environment.get(\"cSupplierCode-A\")+'-1'));\r",
													"        pm.expect(jsonData).to.have.property(\"purchaseOrderNumber\", null);\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"isDeleted\", false);\r",
													"        pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
													"\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceId, organizationId, datasetId and clientId are exist and correct.\", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceId\", pm.environment.get(\"cInvoiceId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"organizationId\", pm.environment.get(\"organizationId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"datasetId\", pm.environment.get(\"datasetId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"clientId\", pm.environment.get(\"datasetId\"));\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ExternalClientId, invoiceNumber, documentType, invoiceType, invoiceStatus and semineUrl are exist.\", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"externalClientId\", pm.environment.get(\"erpId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceType\", \"Debit\");\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceStatus\", \"Posting\");\r",
													"        pm.expect(jsonData).to.have.property(\"semineUrl\").include(\"/external/invoice/\" + pm.environment.get(\"cInvoiceId\"));\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - invoiceAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    const jsonDataInvoiceAmount = jsonData.invoiceAmount;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceAmounts are exsist.\", function () {\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionRate,                   JSON.stringify(jsonDataInvoiceAmount)).eql(pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionDate,                   JSON.stringify(jsonDataInvoiceAmount)).include(pm.environment.get(\"conversionDate\"));\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionNumberOfUnits,          JSON.stringify(jsonDataInvoiceAmount)).eql(1);\r",
													"        pm.expect(jsonDataInvoiceAmount.totalAmount,                      JSON.stringify(jsonDataInvoiceAmount)).eql(126.15);\r",
													"        pm.expect(jsonDataInvoiceAmount.balanceAmount,                    JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.vatAmount,                        JSON.stringify(jsonDataInvoiceAmount)).eql(25.15);\r",
													"        pm.expect(jsonDataInvoiceAmount.accountingLineTotalAmount,        JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.accountingLineRemainingTotal,     JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.netAmount,                        JSON.stringify(jsonDataInvoiceAmount)).eql(101);\r",
													"        pm.expect(jsonDataInvoiceAmount.reportingAmount,                  JSON.stringify(jsonDataInvoiceAmount)).eql(1261.5);\r",
													"        pm.expect(jsonDataInvoiceAmount.roundingAmount,                   JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"pm.environment.set(\"conversionDate\", moment().format(\"YYYY\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - supplierParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().supplierParty;\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierParty is exist.\", function () {\r",
													"        //pm.expect(jsonData).to.have.property(\"name\", pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData).to.have.property(\"vatNumber\", pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumber\", pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"zip\", \"Zip-SP-9999\");\r",
													"        pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"        pm.expect(jsonData).to.have.property(\"city\", \"City\");\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierParty  organizationNumberAuthority, street and bankAccountNumber  are exist.\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"            pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-SP-A2\");\r",
													"\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierParty bankAccountNumber is found.\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"            // pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"            // pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-A2-\" + YYMM);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - customerParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().customerParty;\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierParty \", function () {\r",
													"    //     pm.expect(jsonData).to.have.property(\"name\", \"name-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"vatNumber\", \"A2-\" + YYMM)\r",
													"    //     pm.expect(jsonData).to.have.property(\"organizationNumber\", \"A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"zip\", \"Zip-SP-9999\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"city\", \"City\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-SP-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    // });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - deliveryParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().deliveryParty;\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DeliveryParty_ApiCostInvoice is exist.\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"street\", \"address1-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"zip\", \"zipCode-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"            pm.expect(jsonData).to.have.property(\"city\", \"city-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumber\", '');\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DeliveryParty_UblCostInvoice is exist.\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"street\", '');\r",
													"            pm.expect(jsonData).to.have.property(\"zip\", null);\r",
													"            pm.expect(jsonData).to.have.property(\"country\", null);\r",
													"            pm.expect(jsonData).to.have.property(\"city\", '');\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumber\", \"NA\");\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : DeliveryParty is exist.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"name-Delivery-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"vatNumber\", null)\r",
													"        \r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"        \r",
													"        pm.expect(jsonData).to.have.property(\"bankAccountNumber\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - buyer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().buyer;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Buyer is exist.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"email\", \"ApiTestController@useful.no\");\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"ApiTest Controller\");\r",
													"    });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - taxDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    /// API ///\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        const jsonData0 = pm.response.json().taxDetails[0];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TaxDetails[0]_ApiCostInvoice is exist.\", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData0).to.have.property(\"taxRate\", 15.0000);\r",
													"            pm.expect(jsonData0).to.have.property(\"taxAmount\", 0.15);\r",
													"            pm.expect(jsonData0).to.have.property(\"taxCategory\", \"taxCategory\");\r",
													"            pm.expect(jsonData0).to.have.property(\"taxExemptionReason\", \"taxExemptionReason\");\r",
													"            pm.expect(jsonData0).to.have.property(\"taxType\", \"Mid\");\r",
													"        });\r",
													"\r",
													"        const jsonData1 = pm.response.json().taxDetails[1];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TaxDetails[1]_ApiCostInvoice is exist.\", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData1).to.have.property(\"taxRate\", 25.0000);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxAmount\", 25.00);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxCategory\", \"taxCategory\");\r",
													"            pm.expect(jsonData1).to.have.property(\"taxExemptionReason\", \"taxExemptionReason\");\r",
													"            pm.expect(jsonData1).to.have.property(\"taxType\", \"High\");\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        const jsonData1 = pm.response.json().taxDetails[0];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TaxDetails[1]_UblCostInvoice is exist.\", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData1).to.have.property(\"taxRate\", 25.0000);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxAmount\", 25.15);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxCategory\", null);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxExemptionReason\", null);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxType\", \"High\");\r",
													"        });\r",
													"\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - supplier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().supplier;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier is found.\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-A\"))\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumber\", \"orgnr-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData).to.have.property(\"bankAccount\", (\"BBAN-\" + pm.environment.get(\"cSupplierCode-A\")+'-1'));\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"    // \"supplier\": {\r",
													"    //     \"code\": \"A2-2102\",\r",
													"    //     \"name\": \"name-A2-2102\",\r",
													"    //     \"organizationNumber\": \"orgnr-A2-2102\",\r",
													"    //     \"bankAccount\": \"BBAN-A2-2102\"\r",
													"    // },"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData0 = pm.response.json().attachments[0];\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment-0 is found.\", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData0).to.have.property(\"isInvoicePdf\", true);\r",
													"            pm.expect(jsonData0).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \".pdf\");\r",
													"            pm.expect(jsonData0).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment-0 found.\", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData0).to.have.property(\"isInvoicePdf\", false); \r",
													"            pm.expect(jsonData0).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.xml\");\r",
													"            pm.expect(jsonData0).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    const jsonData1 = pm.response.json().attachments[1];\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment-1 found. \", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData1).to.have.property(\"isInvoicePdf\", false);\r",
													"            pm.expect(jsonData1).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \"-2.pdf\");\r",
													"            pm.expect(jsonData1).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment-1 found.\", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData1).to.have.property(\"isInvoicePdf\", true);\r",
													"            pm.expect(jsonData1).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.pdf\");\r",
													"            pm.expect(jsonData1).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - AL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2, jsonDataALPer_1, jsonDataALPer_2;\r",
													"\r",
													"    var i;\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"            \r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataALPer_1 = jsonDataAL[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"PeriodizedLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataALPer_2 = jsonDataAL[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    console.log(jsonDataAL1);\r",
													"    console.log(jsonDataALP1);\r",
													"    console.log(jsonDataAL2);\r",
													"    console.log(jsonDataALP2);\r",
													"    console.log(jsonDataALPer_1);\r",
													"    console.log(jsonDataALPer_2);\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 1-Are AL objects Found?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 2-VatAmounts in HeaderLine is 0000.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].type == \"Supplier\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 3-HeaderLineParameter(Supplier) is exist.\", function () {\r",
													"        pm.expect(testObject.code).to.eql(pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Leverandør\");\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", (\"name-\"+pm.environment.get(\"cSupplierCode-A\")));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    console.log(jsonDataALHeaderLine)\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 4-HeaderLine fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"description\", \"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineType\", \"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"netAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"totalAmount\", 126.15);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"grossAmount\", 1261.50);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"vatAmount\", 0);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"numberOfUnits\", 1);\r",
													"        pm.expect(jsonDataALHeaderLine).to.have.property(\"lineNumber\", 1);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingNetAmount\", 126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingAmount\", 126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine).to.have.property(\"reportingVatAmount\", 0);\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 5-AccountingLine_1 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"lineType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"netAmount\", 1.00);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"totalAmount\", 1.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"grossAmount\", 11.50);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"vatAmount\", 0.15);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"debitLedgerType\", \"AccountingCode\");\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"creditLedgerType\", null);\r",
													"        pm.expect(jsonDataAL1).to.have.property(\"voucherTypeCode\", \"\");\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingNetAmount\", 1.0);\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingAmount\", 1.15);\r",
													"        // pm.expect(jsonDataAL1).to.have.property(\"reportingVatAmount\", 0.15);\r",
													"    });\r",
													"\r",
													"\r",
													"  // AL 1 INTERIM\r",
													"var testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"AccountingCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :6-Interim in Accountingline_1 is interim_1.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", \"Interim-1\");\r",
													"        pm.expect(testObject).to.not.have.property(\"codeDescription\", null);\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"Interim konto æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"\r",
													"    });\r",
													"\r",
													"    // AL 1 PeriodizedLine Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALPer_1) {\r",
													"        if (jsonDataALPer_1[i].type == \"AccountingCode\" && jsonDataALPer_1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALPer_1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :7-Ledger in PeriodizedLine is Ledger-15-AI.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", \"Ledger-15-AI\");\r",
													"        pm.expect(testObject).to.not.have.property(\"codeDescription\", null);\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"Fast MVA 15% og interim æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"\r",
													"    });\r",
													"\r",
													"    \r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"VatCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 8-Vat in AccointingLine_1 is VAT-15.\", function () {\r",
													"        pm.expect(testObject.code).to.be.oneOf([\"VAT-15\",\"VAT-25\"]);\r",
													"        pm.expect(testObject).to.not.have.property(\"code\", \"Ledger-15-AI\");\r",
													"        pm.expect(testObject).to.not.have.property(\"codeDescription\", null);\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"15% MVA kode æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"MVA kode\");\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 9-AccointingLine_2 Fields are exist and correct.\", function () {\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"description\", \"IL2\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"lineType\", \"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"currency\", pm.environment.get(\"currencyCode\"));\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"netAmount\", 100.00);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"totalAmount\", 125);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"grossAmount\", 1250);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"vatAmount\", 25);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"exchangeRate\", pm.environment.get(\"conversionRate\"));\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"debitLedgerType\", \"AccountingCode\");\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"creditLedgerType\", null);\r",
													"        pm.expect(jsonDataAL2).to.have.property(\"voucherTypeCode\", \"\");\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingNetAmount\", 100.0);\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingAmount\", 125);\r",
													"        // pm.expect(jsonDataAL2).to.have.property(\"reportingVatAmount\", 25);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 INTERIM\r",
													"var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"AccountingCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :10-Interim in Accountingline_2 is interim_1.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", \"Interim-1\");\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"Interim konto æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"\r",
													"    });\r",
													"\r",
													"    // AL 2 PeriodizedLine Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALPer_2) {\r",
													"        if (jsonDataALPer_2[i].type == \"AccountingCode\" && jsonDataALPer_2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALPer_2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :11-Ledger in AL2 PeriodizedLine is Ledger-25-AI.\", function () {\r",
													"        pm.expect(testObject).to.have.property(\"code\", \"Ledger-25-AI\");\r",
													"        pm.expect(testObject).to.not.have.property(\"codeDescription\", null);\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"Fast MVA 25% æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"Konto\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"VatCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i];\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 12-Vat in AccointingLine_2 is VAT-25.\", function () {\r",
													"        pm.expect(testObject.code).to.be.oneOf([\"VAT-15\",\"VAT-25\"]);\r",
													"        pm.expect(testObject).to.not.have.property(\"codeDescription\", null);\r",
													"        pm.expect(testObject).to.have.property(\"codeDescription\", \"25% MVA kode æøå\");\r",
													"        pm.expect(testObject).to.have.property(\"parentCodeDescription\", \"MVA kode\");\r",
													"    });\r",
													"}\r",
													"\r",
													"//Check periodStartYear, periodStartMonth and periodCount;\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"// var jsonData = pm.response.json();\r",
													"// console.log(jsonData)\r",
													"\r",
													"// const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
													"// for (i in jsonDataAL) {\r",
													"//     if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"//         testObject = jsonDataAL[i];\r",
													"//     }\r",
													"// }\r",
													"\r",
													"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_1 PeriodStartYear, PeriodStartMonth and PeriodCount are not null.\", function () {\r",
													"//     pm.expect(testObject).to.have.property(\"periodStartYear\", pm.environment.get(\"startPeriodYear\"));\r",
													"//     pm.expect(testObject).to.have.property(\"periodStartMonth\", pm.environment.get(\"startPeriodMonth\"));\r",
													"//     pm.expect(testObject).to.have.property(\"periodCount\", 3);\r",
													"// });\r",
													"// for (i in jsonDataAL) {\r",
													"//     if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"//         testObject = jsonDataAL[i];\r",
													"//     }\r",
													"// }\r",
													"\r",
													"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AccountingLine_2 PeriodStartYear, PeriodStartMonth and PeriodCount are not null.\", function () {\r",
													"//     pm.expect(testObject).to.have.property(\"periodStartYear\", pm.environment.get(\"startPeriodYear\"));\r",
													"//     pm.expect(testObject).to.have.property(\"periodStartMonth\", pm.environment.get(\"startPeriodMonth\"));\r",
													"//     pm.expect(testObject).to.have.property(\"periodCount\", 4);\r",
													"// });\r",
													"// }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// const moment = require(\"moment\");",
													"",
													"//  pm.environment.set(\"periodStartYear\", moment().format(\"YYYY\"));",
													"// pm.environment.set(\"periodStartMonth\", moment().format(\"MM\"));",
													"",
													"",
													"",
													"// var periodStartYear =pm.environment.get(\"periodStartYear\");",
													"",
													"// pm.environment.set(\"periodStartYearInt\", parseInt(pm.environment.get(\"periodStartYear\")));",
													"",
													"// pm.environment.set(\"periodStartMonthInt\", parseInt(pm.environment.get(\"periodStartMonth\")));",
													"",
													"// console.log(\"PeriodStartYear is :\" +pm.environment.get(\"periodStartYearInt\"));",
													"// console.log(\"PeriodStartMonth is :\" +pm.environment.get(\"periodStartMonthInt\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/PDF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PDF received\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/pdf",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"pdf"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Status : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"    //     pm.expect(jsonData).to.have.property(\"buyerReference\", \"ApiTest Controller\");\r",
													"    //     // pm.expect(jsonData.buyerRef).to.have.property(\"name\", \"ApiTest Controller\");\r",
													"    //     // pm.expect(jsonData.buyerRef.isValidated).is.true;\r",
													"    //     // pm.expect(jsonData.buyerRef).is.not.property(\"id\", []);\r",
													"\r",
													"    // });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID/status - posted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"//         pm.expect(jsonData.buyerReference).eql(\"ApiTest Controller\");\r",
													"\r",
													"\r",
													"//     });\r",
													"\r",
													"// }\r",
													"\r",
													"if (pm.response.code != 200) {\r",
													"    console.log(pm.response)\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"posted\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/status",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - posted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    // console.log(jsonData)\r",
													"\r",
													"    var jsonDataActivity;\r",
													"    \r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].details.newValue == \"Posted\") {\r",
													"            jsonDataActivity = jsonData[i];\r",
													"            console.log(jsonDataActivity);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    ///////// Status in approved if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Invoice is posted.\", function () {\r",
													"\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"userName\", \"ApiTest Integration\");\r",
													"        pm.expect(jsonDataActivity.createdBy).to.have.property(\"email\", \"ApiTestIntegration@useful.no\");\r",
													"        pm.expect(jsonDataActivity.details).to.have.property(\"comment\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "--- Skip to END ---",
							"item": [
								{
									"name": "--- Skip to END ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// console.log('--- Skipping to END ---');\r",
													"postman.setNextRequest(\"--- END ---\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "--- AL Start ---",
							"item": [
								{
									"name": "--- Skip to AL Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// console.log('--- Skipping to PWA ---');\r",
													"postman.setNextRequest(\"--- AL Start ---\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "--- AL Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reports",
							"item": [
								{
									"name": "PWA /suppliers/search - sellerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json().data;\r",
													"    for (x in jsonData) {\r",
													"        if(jsonData[x].id == (pm.environment.get(\"cSupplierCode-A\")+ \"*BBAN-\" +pm.environment.get(\"cSupplierCode-A\"))) {\r",
													"        pm.environment.set(\"sellerId\", jsonData[x].realId);\r",
													"        }\r",
													"        \r",
													"}\r",
													"}\r",
													"\r",
													"console.log(pm.environment.get(\"sellerId\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers"
											],
											"query": [
												{
													"key": "skip",
													"value": "1",
													"description": "Skip records",
													"disabled": true
												},
												{
													"key": "take",
													"value": "2",
													"description": "Take records",
													"disabled": true
												},
												{
													"key": "textSearch",
													"value": "{{cSupplierCode-A}}",
													"disabled": true
												}
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								},
								{
									"name": "PWA /invoiceAutomation/chart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response.json());\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Headers is not be empty.\", function () {\r",
													"        pm.expect(jsonData.headers[0]).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : charts\", function () {\r",
													"    //     pm.expect(jsonData.charts[0]).to.be.not.empty;\r",
													"    // });\r",
													"\r",
													"}\r",
													"//pm.expect(jsonData, \"invoiceAmount\").to.have.property(\"invoiceAmount\").that.is.not.empty;"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set(\"startDate\", moment().subtract(11, \"months\"));\r",
													"pm.environment.set(\"endDate\", moment());\r",
													"\r",
													"console.log(pm.environment.get(\"startDate\"));\r",
													"console.log(pm.environment.get(\"endDate\"));\r",
													"\r",
													"\r",
													"\r",
													"// var startDate =pm.environment.get(\"startDate\");\r",
													"// var endDate =pm.environment.get(\"endDate\");\r",
													"\r",
													"// pm.environment.set(\"startDate\", parseInt(pm.environment.get(\"startDate\")));\r",
													"\r",
													"// pm.environment.set(\"endDate\", parseInt(pm.environment.get(\"endDate\")));\r",
													"\r",
													"// console.log(\"StartDate is :\" +pm.environment.get(\"startDate\"));\r",
													"// console.log(\"EndDate is :\" +pm.environment.get(\"endDate\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"startDate\": \"{{startDate}}\",\r\n    \"endDate\": \"{{endDate}}\",\r\n    \"timeSpanOption\": \"Current year\",\r\n    \"clientSellerPairs\": [],\r\n    \"offset\": -2,\r\n    \"isTrendLine\": true,\r\n    \"reportTypes\": [\r\n        \"3\",\r\n        \"5\",\r\n        \"4\",\r\n        \"6\",\r\n        \"9\",\r\n        \"10\"\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/reports/invoiceautomation/chart",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"reports",
												"invoiceautomation",
												"chart"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoiceAutomation/grid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response.json());\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice Aotomation is exsist.\", function () {\r",
													"        pm.expect(jsonData.data[0]).to.be.not.empty;\r",
													"        pm.expect(jsonData.totalCount).to.be.greaterThan(0);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataSub;\r",
													"    for(i in jsonData){\r",
													"        if(jsonData[i].sellerName==(\"name-\"+pm.environment.get(\"cSupplierCode-A\"))){\r",
													"            jsonDataSub=jsonData[i];\r",
													"            //console.log(jsonDataSub);\r",
													"            break; \r",
													"        }\r",
													"    \r",
													"    }\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : CliendId and sellerId are found and corect. \", function () {\r",
													"        pm.expect(jsonDataSub).to.have.property(\"sellerId\", pm.environment.get(\"sellerId\"));\r",
													"        pm.expect(jsonDataSub).to.have.property(\"clientId\", pm.environment.get(\"datasetId\"));\r",
													"    });\r",
													"    }\r",
													"    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/reports/invoiceautomation/grid?startDate={{startDate}}&endDate={{endDate}}&offset=-1&skip=0&take=20&requireTotalCount=true&select=[\"clientName\",\"sellerName\",\"invoiceAutomationAccountPercentage\",\"lineAutomationAccountPercentage\",\"invoiceAutomationDimensionPercentage\",\"lineAutomationDimensionPercentage\",\"invoiceAutomationVatPercentage\",\"lineAutomationVatPercentage\",\"accountant\",\"consultant\",\"sellerId\",\"clientId\",\"invoiceCount\",\"lineCount\"]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"reports",
												"invoiceautomation",
												"grid"
											],
											"query": [
												{
													"key": "startDate",
													"value": "{{startDate}}"
												},
												{
													"key": "endDate",
													"value": "{{endDate}}"
												},
												{
													"key": "offset",
													"value": "-1"
												},
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "select",
													"value": "[\"clientName\",\"sellerName\",\"invoiceAutomationAccountPercentage\",\"lineAutomationAccountPercentage\",\"invoiceAutomationDimensionPercentage\",\"lineAutomationDimensionPercentage\",\"invoiceAutomationVatPercentage\",\"lineAutomationVatPercentage\",\"accountant\",\"consultant\",\"sellerId\",\"clientId\",\"invoiceCount\",\"lineCount\"]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DeleteParameters",
							"item": [
								{
									"name": "Delete parameters",
									"item": [
										{
											"name": "Delete Supplier/FA",
											"item": [
												{
													"name": "INT /supplier/FA",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-FA}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"suppliers",
																"{{cSupplierCode-FA}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Transactiontypes",
											"item": [
												{
													"name": "INT /transactiontypes/TT AI",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes/{{TT-AI}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"transactiontypes",
																"{{TT-AI}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /transactiontypes/TT Manual",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes/{{TT_Manual}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"transactiontypes",
																"{{TT_Manual}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Fixedasset",
											"item": [
												{
													"name": "INT /fixedassets/FA AI",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{FA-AI}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"fixedassets",
																"{{FA-AI}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /fixedassets/FA Manual",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{FA_Manual}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"fixedassets",
																"{{FA_Manual}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Dimensions X",
											"item": [
												{
													"name": "---Delete Dimension X ---",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/health",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"health"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /parameters/condensed checkDimensions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json();\r",
																	"   \r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cDimensionCode-X\")) {\r",
																	"            jsonDataDim= jsonData[x];\r",
																	"            console.log(jsonDataDim)\r",
																	"            pm.environment.set(\"cDimensionCode-X\", jsonDataDim.code);\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"DimensionCode: \" + pm.environment.get(\"cDimensionCode-X\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"condensed"
															]
														}
													},
													"response": []
												},
												{
													"name": "INT /dimensions/X/values/X",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json();\r",
																	"   \r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].dimensionCode == pm.environment.get(\"cDimensionCode-X\")) {\r",
																	"            pm.environment.set(\"cDimensionCodeValue-X\", jsonData[x].code);\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"cDimensionCodeValue-C is : \" + pm.environment.get(\"cDimensionCodeValue-X\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}/values",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"dimensions",
																"{{cDimensionCode-X}}",
																"values"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensions/X",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"dimensions",
																"{{cDimensionCode-X}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensions/X value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"console.log(pm.response.json());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-X}}/values/{{cDimensionCodeValue-X}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"dimensions",
																"{{cDimensionCode-X}}",
																"values",
																"{{cDimensionCodeValue-X}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "PWA /parameters/condensed checkDimensions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonDataDim = pm.response.json();\r",
																	"    var dim = true\r",
																	"    for (var i in jsonDataDim) {\r",
																	"        if (jsonDataDim[i].code == pm.environment.get(\"cDimensionCode-X\")) {\r",
																	"            dim = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    console.log(dim)\r",
																	"    console.log(jsonDataDim[i])\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimensions X are deleted.\", function () {\r",
																	"        pm.expect(jsonDataDim[i]).to.not.have.property(\"code\", pm.environment.get(\"cDimensionCode-X\"));\r",
																	"});\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"condensed"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Supplier/B",
											"item": [
												{
													"name": "INT /supplier/A",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"suppliers",
																"{{cSupplierCode-A}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete VAT",
											"item": [
												{
													"name": "INT /VAT/25",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"vatcodes",
																"{{cVatCode-R1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/15",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R2}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"vatcodes",
																"{{cVatCode-R2}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/10",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-S1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"vatcodes",
																"{{cVatCode-S1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-S2}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"vatcodes",
																"{{cVatCode-S2}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Interim",
											"item": [
												{
													"name": "INT /Interim-1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Interim_1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{Interim_1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Ledgers",
											"item": [
												{
													"name": "INT /Ledgers 25_AI",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_25_AI}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{Ledger_25_AI}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /Ledgers 15_AI",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_15_AI}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{Ledger_15_AI}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /Ledgers 25_Manual",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_25_Manual}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{Ledger_25_Manual}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /Ledgers 15_Manual",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_15_Manual}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{Ledger_15_Manual}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Accountingcodes",
											"item": [
												{
													"name": "INT client/accountingcodes/A",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cAccountingCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"accountingcodes",
																"{{cAccountingCode-A}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT organization/accountingcodes/A",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes/{{oAccountingCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"accountingcodes",
																"{{oAccountingCode-A}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "DeleteParametersClient04",
							"item": [
								{
									"name": "Delete parameters",
									"item": [
										{
											"name": "Delete Dimensions B",
											"item": [
												{
													"name": "PWA /parameters/condensed checkDimensions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json();\r",
																	"   \r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].code == pm.environment.get(\"cDimensionCode-B\")) {\r",
																	"            jsonDataDim= jsonData[x];\r",
																	"            pm.environment.set(\"cDimensionCode-B\", jsonDataDim.code);\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"DimensionCode: \" + pm.environment.get(\"cDimensionCode-B\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"condensed"
															]
														}
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B/values/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json();\r",
																	"   \r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].dimensionCode == pm.environment.get(\"cDimensionCode-B\")) {\r",
																	"            pm.environment.set(\"cDimensionCodeValue-B\", jsonData[x].code);\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"console.log(\"cDimensionCodeValue-B is : \" + pm.environment.get(\"cDimensionCodeValue-B\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}/values",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}",
																"values"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B value",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"console.log(pm.response.json());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}",
																"values",
																"{{cDimensionCodeValue-B}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /dimensions/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/dimensions/{{cDimensionCode-B}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"dimensions",
																"{{cDimensionCode-B}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "PWA /parameters/condensed checkDimensions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonDataDim = pm.response.json();\r",
																	"    var dim = true\r",
																	"    for (var i in jsonDataDim) {\r",
																	"        if (jsonDataDim[i].code == pm.environment.get(\"cDimensionCode-B\")) {\r",
																	"            dim = false;\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"    console.log(dim)\r",
																	"    console.log(jsonDataDim[i])\r",
																	"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimensions are deleted.\", function () {\r",
																	"        pm.expect(jsonDataDim[i]).to.not.have.property(\"code\", pm.environment.get(\"cDimensionCode-B\"));\r",
																	"});\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/parameters/condensed",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"parameters",
																"condensed"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Supplier/B",
											"item": [
												{
													"name": "INT /supplier/B",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/suppliers/{{cSupplierCode-B}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"suppliers",
																"{{cSupplierCode-B}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete VAT",
											"item": [
												{
													"name": "INT /VAT/25",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-R1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"vatcodes",
																"{{cVatCode-R1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/15",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-R2}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"vatcodes",
																"{{cVatCode-R2}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/10",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-S1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"vatcodes",
																"{{cVatCode-S1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT /VAT/0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/vatcodes/{{cVatCode-S2}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"vatcodes",
																"{{cVatCode-S2}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Interim",
											"item": [
												{
													"name": "INT /Interim-1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes/{{Interim_1}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"accountingcodes",
																"{{Interim_1}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Accountingcodes",
											"item": [
												{
													"name": "INT client/accountingcodes/A",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_4}}/accountingcodes/{{cAccountingCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId_4}}",
																"accountingcodes",
																"{{cAccountingCode-A}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												},
												{
													"name": "INT organization/accountingcodes/A",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenINT}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes/{{oAccountingCode-A}}",
															"host": [
																"{{INT}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"accountingcodes",
																"{{oAccountingCode-A}}"
															]
														},
														"description": "Gets an accounting code based on the ERP code."
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Delete Currency",
							"item": [
								{
									"name": "Currency Client Level",
									"item": [
										{
											"name": "INT/ client/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"startDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"endDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/currency/{{currencyCode}}?startDate={{startDate}}&endDate={{endDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"currency",
														"{{currencyCode}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{startDate}}"
														},
														{
															"key": "endDate",
															"value": "{{endDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "--- Currency OrgLevel Switch---",
									"item": [
										{
											"name": "---  Switch ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var environment = pm.environment.get(\"ENV\");\r",
															"// console.log(environment)\r",
															"switch (environment) {\r",
															"\r",
															"    case \"DEV\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Dev Delete ---\");\r",
															"        break;\r",
															"    case \"PROD\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-Prod Delete ---\");\r",
															"        break;\r",
															"\r",
															"    case \"TEST\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-Prod Delete ---\")\r",
															"        break;\r",
															"\r",
															"    case \"UAT\":\r",
															"        console.log(environment);\r",
															"        postman.setNextRequest(\"--- Currecy Test-UAT-Prod Delete ---\")\r",
															"        break;\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Currency OrgLevel Dev",
									"item": [
										{
											"name": "--- Currecy Dev Delete ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT / organizations/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"startDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"endDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency/{{oCurrencyCode}}?startDate={{startDate}}&endDate={{endDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency",
														"{{oCurrencyCode}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{startDate}}"
														},
														{
															"key": "endDate",
															"value": "{{endDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "--- Skip to PWA Start_2 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// console.log('--- Skipping to PWA ---');\r",
															"postman.setNextRequest(\"--- PWA Start_2 ---\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Currency OrgLevel Test-UAT-PROD",
									"item": [
										{
											"name": "--- Currecy Test-UAT-Prod Delete ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "--- Skip to PWA Start_2 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// console.log('--- Skipping to PWA ---');\r",
															"postman.setNextRequest(\"--- PWA Start_2 ---\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										},
										{
											"name": "INT / organizations/currency",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"// pm.environment.set(\"EUR\", jsonData.currencyCode);\r",
															"\r",
															"// console.log(\"Currency is : \" +pm.environment.get(\"EUR\"));\r",
															"\r",
															"\r",
															"\r",
															"// var jsonData = pm.response.json().data[0];\r",
															"//   // console.log(jsonDataAL);\r",
															"\r",
															"//         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Curruncy_EUR is found.\", function () {\r",
															"//         pm.expect(jsonData).to.have.property(\"currencyCode\", \"EUR\");\r",
															"//         });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');",
															"pm.environment.set(\"startDate\", moment().subtract(1, \"month\").format(\"YYYY-MM-DD\"));",
															"pm.environment.set(\"endDate\", moment().add(2, \"months\").format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/currency/{{oCurrencyCode}}?startDate={{startDate}}&endDate={{endDate}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"currency",
														"{{oCurrencyCode}}"
													],
													"query": [
														{
															"key": "startDate",
															"value": "{{startDate}}"
														},
														{
															"key": "endDate",
															"value": "{{endDate}}"
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "--- PWA Start_2 ---",
									"item": [
										{
											"name": "--- PWA Start_2 ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Dimension-AccountingRelation-MultipleAliases-ClientForAcl03",
							"item": [
								{
									"name": "INT clients/ID/accountingcodes A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-A', 'cAccCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-A}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/A - Get active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes",
												"{{cAccountingCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-B', 'cAccCode-B-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-B}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-B}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes",
												"{{cAccountingCode-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-C', 'cAccCode-C-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-C}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-C}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-C}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes",
												"{{cAccountingCode-C}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes D",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-D', 'cAccCode-D-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DesAccountingcodes_Client', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-D}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Konto kode-{{DesAccountingcodes_Client}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Account code\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\":\"{{cAccountingCode-D}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/D",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/accountingcodes/{{cAccountingCode-D}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"accountingcodes",
												"{{cAccountingCode-D}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cDimensionCode-B', 'cDimCodeB-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('Dimensions_B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{cDimensionCode-B}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"Norsk æøå-{{Dimensions_B}}\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"Dimension\",\n            \"languageCode\": \"English\"\n        }\n    ],\n     \"externalId\":\"{{cDimensionCode-B}}-externalId\"\n}"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensionsB/values/B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
													"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"// Create some sort of stack trace for DevOps\r",
													"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
													"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-A}}\",\n                \"code\": \"{{cAccountingCode-A}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{cHHmmss}}-Alias-A\",\n            \"{{userNameController}}\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/B/values/B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////// Check Aliases and relations are applied.\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    console.log(jsonData);\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-A\"));\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
													"    pm.expect(jsonData.aliases).to.include(\"ApiTest Controller\",\"ApiTest\",\"Api\",\"Controller\");\r",
													"                \r",
													"            });\r",
													"    }\r",
													"\r",
													"// console.log(pm.response.json());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"{{cDimensionCodeValue-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-True",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
													"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"// Create some sort of stack trace for DevOps\r",
													"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
													"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-B}}\",\n                \"code\": \"{{cAccountingCode-B}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"Apites\",\n            \"ApiT\",\n            \"Cont\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values?preserveExistingAliases=true&preserveExistingRelations=true",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											],
											"query": [
												{
													"key": "preserveExistingAliases",
													"value": "true"
												},
												{
													"key": "preserveExistingRelations",
													"value": "true"
												}
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/B/values/B True",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////// Check Aliases and relations are applied.\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    console.log(jsonData);\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-A\"));\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
													"    pm.expect(jsonData.aliases).to.include(\"ApiTest Controller\",\"ApiTest\",\"Api\",\"Controller\");\r",
													"                \r",
													"            });\r",
													"    }\r",
													"\r",
													"// console.log(pm.response.json());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"{{cDimensionCodeValue-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-False Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
													"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"// Create some sort of stack trace for DevOps\r",
													"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
													"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-C}}\",\n                \"code\": \"{{cAccountingCode-C}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"Api\",\n            \"ApiTest\",\n            \"Controller\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/B/values/B Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////// Check Aliases and relations are applied.\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    console.log(jsonData);\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-C\"));\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
													"    pm.expect(jsonData.aliases).to.include(\"ApiTest Controller\",\"ApiTest\",\"Api\",\"Controller\");\r",
													"                \r",
													"            });\r",
													"    }\r",
													"\r",
													"// console.log(pm.response.json());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"{{cDimensionCodeValue-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensionsB/values/B Add new AccountCode-Alliases-False",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
													"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"// Create some sort of stack trace for DevOps\r",
													"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
													"pm.environment.set('cDimensionCodeValue-B', 'DimValueB' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('DimensionCodeValue-B', moment().format(\"YYYYMMDD-HHmmss\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"relations\": [\n            {\n                \"type\": \"AccountingCode\",\n                \"typeCode\": \"{{cAccountingCode-D}}\",\n                \"code\": \"{{cAccountingCode-D}}\",\n                \"operation\": \"Requirement\",\n                \"status\": \"Active\"\n            }\n        ],\n        \"code\": \"{{cDimensionCodeValue-B}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"Api---\",\n            \"ApiTest---\",\n            \"Controller---\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå-{{DimensionCodeValue-B}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ],\n        \"externalId\": \"{{cDimensionCodeValue-B}}-externalId\"\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values?preserveExistingAliases=false&preserveExistingRelations=false",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											],
											"query": [
												{
													"key": "preserveExistingAliases",
													"value": "false"
												},
												{
													"key": "preserveExistingRelations",
													"value": "false"
												}
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/B/values/B False",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////// Check Aliases and relations are applied.\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    console.log(jsonData);\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension, multiple Aliases and relation are applied.\" , function () {\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"type\", \"AccountingCode\");\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"code\", pm.environment.get(\"cAccountingCode-D\"));\r",
													"    pm.expect(jsonData.relations[0]).to.have.property(\"operation\", \"Requirement\");\r",
													"    pm.expect(jsonData.aliases).to.include(\"ApiTest Controller\",\"ApiTest\",\"Api\",\"Controller\");\r",
													"                \r",
													"            });\r",
													"    }\r",
													"\r",
													"// console.log(pm.response.json());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_3}}/dimensions/{{cDimensionCode-B}}/values/{{cDimensionCodeValue-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId_3}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"{{cDimensionCodeValue-B}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "All Settings Org/User/Group/Client/Parameters/Purchase",
							"item": [
								{
									"name": "Users Settings",
									"item": [
										{
											"name": "All Users And Groups",
											"item": [
												{
													"name": "PWA /Grid/User/invoiceList/Groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"const jsonData = pm.response.json().data;\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataGroup;\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Controller Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Controller Group Org\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integration Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
																	"\r",
																	"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
																	"\r",
																	"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
																	"\r",
																	"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
																	"\r",
																	"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
																	"\r",
																	"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
																	"\r",
																	"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
																	"console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"    "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenPWA}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/admin/organizations/{{organizationId}}/admingroups?skip=0&take=20",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"admin",
																"organizations",
																"{{organizationId}}",
																"admingroups"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "0"
																},
																{
																	"key": "take",
																	"value": "20"
																}
															]
														},
														"description": "Gets details for an invoice.\r\nTODO Get all details"
													},
													"response": []
												},
												{
													"name": "PWA /currentuser - Controller",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if(pm.response.code == 200){\r",
																	"   pm.environment.set(\"userId\", pm.response.json().id);\r",
																	"   pm.environment.set(\"testControllerUserId\", pm.response.json().id);\r",
																	"}\r",
																	"\r",
																	"if (pm.response.code != 200) {\r",
																	"    console.log(pm.response)\r",
																	"} "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"accept": true,
															"accept-encoding": true,
															"connection": true,
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenPWA}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/currentuser",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"currentuser"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												},
												{
													"name": "PWA /user - AllUsers",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataUser;\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ApiTest Approver\") {\r",
																	"            var jsonDataUser =jsonData[i];\r",
																	"        pm.environment.set(\"testApproverUserId\", jsonDataUser.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Adam Arelsen\") {\r",
																	"            var jsonDataUser =jsonData[i];\r",
																	"        pm.environment.set(\"adamArelsenUserId\", jsonDataUser.id);\r",
																	"    }\r",
																	"    }\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ApiTest Controller\") {\r",
																	"            var jsonDataUser =jsonData[i];\r",
																	"        pm.environment.set(\"testControllerUserId\", jsonDataUser.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ApiApiTest Integration\") {\r",
																	"            var jsonDataUser =jsonData[i];\r",
																	"        pm.environment.set(\"testIntegrationUserId\", jsonDataUser.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ApiTest Admin\") {\r",
																	"            var jsonDataUser =jsonData[i];\r",
																	"        pm.environment.set(\"testAdminUserId\", jsonDataUser.id);\r",
																	"    }\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"console.log(\"Test Approver User Id is : \" + pm.environment.get(\"testApproverUserId\"));\r",
																	"\r",
																	"console.log(\"Adam Arelsen User Id is : \" + pm.environment.get(\"adamArelsenUserId\"));\r",
																	"\r",
																	"console.log(\"ApiTest Controller Id is : \" + pm.environment.get(\"testControllerUserId\"));\r",
																	"\r",
																	"console.log(\"ApiTest Integration Id is: \" + pm.environment.get(\"testIntegrationUserId\"));\r",
																	"\r",
																	"console.log(\"Test Admin Id is: \" + pm.environment.get(\"testAdminUserId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"    "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"accept": true,
															"accept-encoding": true,
															"connection": true,
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenPWA}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "ApiTest Controller User",
											"item": [
												{
													"name": "PWA /users/userDetails putControlGrouponTestContUser",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require(\"moment\");",
																	"",
																	"",
																	"var firstIndex = 0;",
																	"var visibleIndex;",
																	"var lastVisibleIndex =51;",
																	"",
																	"// for (){",
																	"",
																	"// }",
																	"",
																	"// //for(visibleIndex=0; visibleIndex<=lastVisibleIndex; visibleIndex++){",
																	"//     //console.log(visibleIndex);",
																	"// //}",
																	"",
																	"// //pm.environment.set(\"visibleIndex\", visibleIndex);",
																	"",
																	"// //pm.environment.set(\"visibleIndex_0\", 0);",
																	"",
																	"// switch (visibleIndex <= lastVisibleIndex) {",
																	"",
																	"//     case 0:",
																	"//         pm.environment.set(\"visibleIndex_0\", 0);",
																	"//         break;",
																	"",
																	"//     case 1:",
																	"//         pm.environment.set(\"visibleIndex_1\", +pm.environment.get(\"visibleIndex_0\") + 5);",
																	"//         break;",
																	"// }",
																	"",
																	"// console.log(pm.environment.get(\"visibleIndex_1\"));",
																	"",
																	"",
																	"// var visibleIndex_0 = -52;",
																	"// pm.environment.set(\"visibleIndex_0\", visibleIndex_0);",
																	"// pm.environment.set(\"visibleIndex_1\", visibleIndex_0 + 1);",
																	"// pm.environment.set(\"visibleIndex_2\", visibleIndex_0 + 2);",
																	"// pm.environment.set(\"visibleIndex_3\", visibleIndex_0 + 3);",
																	"// pm.environment.set(\"visibleIndex_4\", visibleIndex_0 + 4)",
																	"// pm.environment.set(\"visibleIndex_5\", visibleIndex_0 + 5);",
																	"// pm.environment.set(\"visibleIndex_6\", visibleIndex_0 + 6);",
																	"// pm.environment.set(\"visibleIndex_7\", visibleIndex_0 + 7);",
																	"// pm.environment.set(\"visibleIndex_8\", visibleIndex_0 + 8);",
																	"// pm.environment.set(\"visibleIndex_9\", visibleIndex_0 + 9);",
																	"// pm.environment.set(\"visibleIndex_10\", visibleIndex_0 + 10);",
																	"// pm.environment.set(\"visibleIndex_11\", visibleIndex_0 + 11);",
																	"// pm.environment.set(\"visibleIndex_12\", visibleIndex_0 + 12);",
																	"// pm.environment.set(\"visibleIndex_13\", visibleIndex_0 + 13);",
																	"// pm.environment.set(\"visibleIndex_14\", visibleIndex_0 + 14)",
																	"// pm.environment.set(\"visibleIndex_15\", visibleIndex_0 + 15);",
																	"// pm.environment.set(\"visibleIndex_16\", visibleIndex_0 + 16);",
																	"// pm.environment.set(\"visibleIndex_17\", visibleIndex_0 + 17);",
																	"// pm.environment.set(\"visibleIndex_18\", visibleIndex_0 + 18);",
																	"// pm.environment.set(\"visibleIndex_19\", visibleIndex_0 + 19);",
																	"// pm.environment.set(\"visibleIndex_20\", visibleIndex_0 + 20);",
																	"// pm.environment.set(\"visibleIndex_21\", visibleIndex_0 + 21);",
																	"// pm.environment.set(\"visibleIndex_22\", visibleIndex_0 + 22);",
																	"// pm.environment.set(\"visibleIndex_23\", visibleIndex_0 + 23);",
																	"// pm.environment.set(\"visibleIndex_24\", visibleIndex_0 + 24);",
																	"// pm.environment.set(\"visibleIndex_25\", visibleIndex_0 + 25);",
																	"// pm.environment.set(\"visibleIndex_26\", visibleIndex_0 + 26);",
																	"// pm.environment.set(\"visibleIndex_27\", visibleIndex_0 + 27);",
																	"// pm.environment.set(\"visibleIndex_28\", visibleIndex_0 + 28);",
																	"// pm.environment.set(\"visibleIndex_29\", visibleIndex_0 + 29);",
																	"// pm.environment.set(\"visibleIndex_30\", visibleIndex_0 + 30);",
																	"// pm.environment.set(\"visibleIndex_31\", visibleIndex_0 + 31);",
																	"// pm.environment.set(\"visibleIndex_32\", visibleIndex_0 + 32);",
																	"// pm.environment.set(\"visibleIndex_33\", visibleIndex_0 + 33);",
																	"// pm.environment.set(\"visibleIndex_34\", visibleIndex_0 + 34);",
																	"// pm.environment.set(\"visibleIndex_35\", visibleIndex_0 + 35);",
																	"// pm.environment.set(\"visibleIndex_36\", visibleIndex_0 + 36);",
																	"// pm.environment.set(\"visibleIndex_37\", visibleIndex_0 + 37);",
																	"// pm.environment.set(\"visibleIndex_38\", visibleIndex_0 + 38);",
																	"// pm.environment.set(\"visibleIndex_39\", visibleIndex_0 + 39);",
																	"// pm.environment.set(\"visibleIndex_40\", visibleIndex_0 + 40);",
																	"// pm.environment.set(\"visibleIndex_41\", visibleIndex_0 + 41);",
																	"// pm.environment.set(\"visibleIndex_42\", visibleIndex_0 + 42);",
																	"// pm.environment.set(\"visibleIndex_43\", visibleIndex_0 + 43);",
																	"// pm.environment.set(\"visibleIndex_44\", visibleIndex_0 + 44);",
																	"// pm.environment.set(\"visibleIndex_45\", visibleIndex_0 + 45);",
																	"// pm.environment.set(\"visibleIndex_46\", visibleIndex_0 + 46);",
																	"// pm.environment.set(\"visibleIndex_47\", visibleIndex_0 + 47);",
																	"// pm.environment.set(\"visibleIndex_48\", visibleIndex_0 + 48);",
																	"// pm.environment.set(\"visibleIndex_49\", visibleIndex_0 + 49);",
																	"// pm.environment.set(\"visibleIndex_50\", visibleIndex_0 + 50);",
																	"// pm.environment.set(\"visibleIndex_51\", visibleIndex_0 + 51);",
																	"var visibleIndex_0 = 123456789;",
																	"pm.environment.set(\"visibleIndex_0\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_1\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_2\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_3\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_4\", visibleIndex_0)",
																	"pm.environment.set(\"visibleIndex_5\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_6\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_7\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_8\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_9\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_10\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_11\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_12\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_13\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_14\", visibleIndex_0)",
																	"pm.environment.set(\"visibleIndex_15\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_16\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_17\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_18\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_19\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_20\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_21\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_22\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_23\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_24\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_25\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_26\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_27\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_28\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_29\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_30\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_31\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_32\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_33\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_34\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_35\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_36\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_37\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_38\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_39\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_40\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_41\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_42\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_43\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_44\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_45\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_46\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_47\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_48\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_49\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_50\", visibleIndex_0);",
																	"pm.environment.set(\"visibleIndex_51\", visibleIndex_0);",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenAd}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"userId\": \"{{testControllerUserId}}\",\r\n    \"email\": \"ApiTestController@useful.no\",\r\n    \"secondaryEmail\": null,\r\n    \"organizations\": [\r\n        {\r\n            \"id\": \"{{organizationId}}\",\r\n            \"name\": \"AdamsOrganization\",\r\n            \"organizationStatus\": \"Active\"\r\n        }\r\n    ],\r\n    \"groups\": [\r\n        {\r\n            \"id\": \"{{controllerGroupId}}\",\r\n            \"name\": \"Controller Group\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        },\r\n        {\r\n            \"id\": \"{{controllerGroupOrgId}}\",\r\n            \"name\": \"Controller Group Org\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        },\r\n        {\r\n            \"id\": \"{{settingsControllerGroupId}}\",\r\n            \"name\": \"Settings Controller Group\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        },\r\n        {\r\n            \"id\": \"{{integrasjonKlientnivåId}}\",\r\n            \"name\": \"Integrasjon Klientnivå\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        },\r\n        {\r\n            \"id\": \"{{integrasjonOrganisasjonsnivåId}}\",\r\n            \"name\": \"Integrasjon Organisasjonsnivå\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        },\r\n        {\r\n            \"id\": \"{{integrationGroupId}}\",\r\n            \"name\": \"Integration Group\",\r\n            \"organizationId\": \"{{organizationId}}\",\r\n            \"active\": true\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/users/userDetails",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"users",
																"userDetails"
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /currentuser - Permissions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"accept": true,
															"accept-encoding": true,
															"connection": true,
															"user-agent": true
														}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenPWA}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/users/currentuser/permissions",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"users",
																"currentuser",
																"permissions"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Groups Settings",
									"item": [
										{
											"name": "Groups",
											"item": [
												{
													"name": "PWA /Grid/User/invoiceList/Groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"const jsonData = pm.response.json().data;\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataGroup;\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Controller Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"controllerGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Controller Group Org\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"controllerGroupOrgId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integrasjon Klientnivå\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrasjonKlientnivåId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integrasjon Organisasjonsnivå\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrasjonOrganisasjonsnivåId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Integration Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"integrationGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"Settings Controller Group\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"settingsControllerGroupId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"ViewGroup Controller\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"viewGroupControllerId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].group == \"ViewGroup Integration\") {\r",
																	"            var jsonDataGroup =jsonData[i];\r",
																	"        pm.environment.set(\"viewGroupIntegrationId\", jsonDataGroup.groupId);\r",
																	"    }\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"console.log(\"ControllerGroup Id is : \" + pm.environment.get(\"controllerGroupId\"));\r",
																	"\r",
																	"console.log(\"ControllerGroupOrg Id is : \" + pm.environment.get(\"controllerGroupOrgId\"));\r",
																	"\r",
																	"console.log(\"IntegrasjonKlientnivå Id is: \" + pm.environment.get(\"integrasjonKlientnivåId\"));\r",
																	"\r",
																	"console.log(\"IntegrasjonOrganisasjonsnivå Id is: \" + pm.environment.get(\"integrasjonOrganisasjonsnivåId\"));\r",
																	"\r",
																	"console.log(\"IntegrationGroup Id is: \" + pm.environment.get(\"integrationGroupId\"));\r",
																	"\r",
																	"console.log(\"SettingsControllerGroup Id is: \" + pm.environment.get(\"settingsControllerGroupId\"));\r",
																	"\r",
																	"console.log(\"ViewGroup Controller Id is: \" + pm.environment.get(\"viewGroupControllerId\"));\r",
																	"console.log(\"ViewGroup Integration Id is: \" + pm.environment.get(\"viewGroupIntegrationId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"    "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TokenPWA}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/admin/organizations/{{organizationId}}/admingroups?skip=0&take=20",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"admin",
																"organizations",
																"{{organizationId}}",
																"admingroups"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "0"
																},
																{
																	"key": "take",
																	"value": "20"
																}
															]
														},
														"description": "Gets details for an invoice.\r\nTODO Get all details"
													},
													"response": []
												}
											]
										},
										{
											"name": "Integrations Organisations Level Group",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testIntegrationUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrasjonOrganisasjonsnivåId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrasjonOrganisasjonsnivåId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Controller Group",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testApproverUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{controllerGroupId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{controllerGroupId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Integrations Client Level Group",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testIntegrationUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrasjonKlientnivåId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrasjonKlientnivåId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Controller Group Org",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testApproverUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{controllerGroupOrgId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{controllerGroupOrgId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Integration Group",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testIntegrationUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrationGroupId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrationGroupId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Settings Controller Group",
											"item": [
												{
													"name": "PWA /Org/Groups/Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"usersToAdd\": [\r\n        \"{{testApproverUserId}}\",\r\n        \"{{testControllerUserId}}\",\r\n        \"{{adamArelsenUserId}}\"\r\n    ],\r\n    \"usersToRemove\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{settingsControllerGroupId}}/users",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{settingsControllerGroupId}}",
																"users"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Client-Groups-Org Relations Settings",
									"item": [
										{
											"name": "Clients",
											"item": [
												{
													"name": "PWA /organizations/ID/clients",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json().data;\r",
																	"    for (x in jsonData) {\r",
																	"        if (jsonData[x].name == \"111222333 - API Test & Client B\") {\r",
																	"            pm.environment.set(\"datasetId\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0011 - ClientForAcl_1\") {\r",
																	"            pm.environment.set(\"datasetId_1\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0012 - ClientForAcl_2\") {\r",
																	"            pm.environment.set(\"datasetId_2\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0013 - ClientForAcl_3\") {\r",
																	"            pm.environment.set(\"datasetId_3\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0014 - ClientForAcl_4\") {\r",
																	"            pm.environment.set(\"datasetId_4\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0015 - Client_P_YMC\") {\r",
																	"            pm.environment.set(\"datasetId_5\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0016 - ClientCurrency\") {\r",
																	"            pm.environment.set(\"datasetId_6\", jsonData[x].id)\r",
																	"        }   \r",
																	"        if (jsonData[x].name == \"0017 - ClientForView_1\") {\r",
																	"            pm.environment.set(\"datasetId_7\", jsonData[x].id)\r",
																	"        }\r",
																	"        if (jsonData[x].name == \"0018 - ClientForView_2\") {\r",
																	"            pm.environment.set(\"datasetId_8\", jsonData[x].id)\r",
																	"        }\r",
																	"    }\r",
																	"}\r",
																	"console.log(\"1-111222333 - API Test & Client B is: \" +pm.environment.get(\"datasetId\"));\r",
																	"console.log(\"2-ClientForAcl_1 is: \" +pm.environment.get(\"datasetId_1\"));\r",
																	"console.log(\"3-ClientForAcl_2 is: \" +pm.environment.get(\"datasetId_2\"));\r",
																	"console.log(\"4-ClientForAcl_3 is: \" +pm.environment.get(\"datasetId_3\"));\r",
																	"console.log(\"5-ClientForAcl_4 is: \" +pm.environment.get(\"datasetId_4\"));\r",
																	"console.log(\"6-0015 - Client_P_YMC is: \" +pm.environment.get(\"datasetId_5\"));\r",
																	"console.log(\"7-0016 - ClientCurrency is: \" +pm.environment.get(\"datasetId_6\"));\r",
																	"console.log(\"8-0017-0017-0017-ClientForView_1 is: \" +pm.environment.get(\"datasetId_7\"));\r",
																	"console.log(\"9-0018- 0018-0018-ClientForView_2 is: \" +pm.environment.get(\"datasetId_8\"));\r",
																	"\r",
																	"if (pm.response.code != 200) {\r",
																	"    console.log(pm.response)\r",
																	"} "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept": true,
															"accept-encoding": true,
															"connection": true
														}
													},
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients"
															]
														},
														"description": "Gets a supplier for a given client."
													},
													"response": []
												}
											]
										},
										{
											"name": "Roles",
											"item": [
												{
													"name": "PWA /Organization/NonAdminRoleList",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" Groups:  200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"   console.log(jsonData);\r",
																	"\r",
																	"    var jsonDataRole;\r",
																	"\r",
																	"    var i;\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Invoice Editor\" || jsonData[i].name ==\"InvoiceEditor\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"invoiceEditorRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Invoice Flow Report\"|| jsonData[i].name == \"FlagEditor\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"invoiceFlowReportRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"IntegrationEngineAdmin\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"integrationEngineAdminRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Integration\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"integrationRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Inbound Status\" || jsonData[i].name == \"InboundStatusReader\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"inboundStatusRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Automation Report\" || jsonData[i].name ==\"AutomationReportAccess\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"automationReportRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Approver\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"approverRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Invoice Reader\" || jsonData[i].name ==\"InvoiceReader\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"invoiceReaderRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Statistics Report\" || jsonData[i].name ==\"StatisticsReportAccess\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"statisticsReportRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Controller\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"controllerRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"     for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Lead Time\"|| jsonData[i].name ==\"ApproverReadAny\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"leadTimeRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Controller without upload\" || jsonData[i].name ==\"ControllerWithoutUpload\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"controllerWithoutUploadRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Inbound Inbox\"|| jsonData[i].name ==\"InboundStatusReader\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"inboundInboxRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Approver - Set Flag\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"approverSetFlagRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"System\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"systemRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ControllerReadOnly\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"controllerReadOnlyRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Visningsadministrator\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"visningsadministratorRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"BasicAccess\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"basicAccessRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"Impersonator\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"impersonatorRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ActionButtons\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"actionButtonsRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"FlagEditor\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"flagEditorRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"ApproverReadAny\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"approverReadAnyRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"IntegrationUpload\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"integrationUploadRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    for (i in jsonData) {\r",
																	"        if (jsonData[i].name == \"RoleCheck\") {\r",
																	"            var jsonDataRole =jsonData[i];\r",
																	"        pm.environment.set(\"roleCheckRoleId\", jsonDataRole.id);\r",
																	"    }\r",
																	"    }\r",
																	"    \r",
																	"    }\r",
																	"\r",
																	"console.log(\"1-Invoice Editor Role Id is : \" + pm.environment.get(\"invoiceEditorRoleId\"));\r",
																	"\r",
																	"console.log(\"2-Invoice Flow Report Role Id is : \" + pm.environment.get(\"invoiceFlowReportRoleId\"));\r",
																	"\r",
																	"console.log(\"3-Integration Engine Admin Role Id is : \" + pm.environment.get(\"integrationEngineAdminRoleId\"));\r",
																	"\r",
																	"console.log(\"4-Integration Role Id is : \" + pm.environment.get(\"integrationRoleId\"));\r",
																	"\r",
																	"console.log(\"5-Inbound Status Role Id is : \" + pm.environment.get(\"inboundStatusRoleId\"));\r",
																	"\r",
																	"console.log(\"6-Automation Report Role Id is : \" + pm.environment.get(\"automationReportRoleId\"));\r",
																	"\r",
																	"console.log(\"7-Approver Role Id is : \" + pm.environment.get(\"approverRoleId\"));\r",
																	"\r",
																	"console.log(\"8-Invoice Reader Role Id is : \" + pm.environment.get(\"invoiceReaderRoleId\"));\r",
																	"\r",
																	"console.log(\"9-Statistics Report Role Id is : \" + pm.environment.get(\"statisticsReportRoleId\"));\r",
																	"\r",
																	"console.log(\"10-Controller Role Id is : \" + pm.environment.get(\"controllerRoleId\"));\r",
																	"\r",
																	"console.log(\"11-Lead Time Role Id is : \" + pm.environment.get(\"leadTimeRoleId\"));\r",
																	"\r",
																	"console.log(\"12-Controller without upload Role Id is : \" + pm.environment.get(\"controllerWithoutUploadRoleId\"));\r",
																	"\r",
																	"console.log(\"13-Inbound Inbox Role Id is : \" + pm.environment.get(\"inboundInboxRoleId\"));\r",
																	"\r",
																	"console.log(\"14-Approver - Set Flag Role Id is : \" + pm.environment.get(\"approverSetFlagRoleId\"));\r",
																	"\r",
																	"console.log(\"15-System Role Id is : \" + pm.environment.get(\"systemRoleId\"));\r",
																	"\r",
																	"console.log(\"16-ControllerReadOnly Role Id is : \" + pm.environment.get(\"controllerReadOnlyRoleId\"));\r",
																	"\r",
																	"console.log(\"17-Visningsadministrator Role Id is : \" + pm.environment.get(\"visningsadministratorRoleId\"));\r",
																	"\r",
																	"console.log(\"18-BasicAccess Role Id is : \" + pm.environment.get(\"basicAccessRoleId\"));\r",
																	"\r",
																	"console.log(\"19-ImpersonatorRoleId Role Id is : \" + pm.environment.get(\"impersonatorRoleId\"));\r",
																	"\r",
																	"console.log(\"20-ActionButtons Role Id is : \" + pm.environment.get(\"actionButtonsRoleId\"));\r",
																	"\r",
																	"console.log(\"21-FlagEditor Role Id is : \" + pm.environment.get(\"flagEditorRoleId\"));\r",
																	"\r",
																	"console.log(\"22-ApproverReadAny Role Id is : \" + pm.environment.get(\"approverReadAnyRoleId\"));\r",
																	"\r",
																	"console.log(\"23-IntegrationUpload Role Id is : \" + pm.environment.get(\"integrationUploadRoleId\"));\r",
																	"\r",
																	"console.log(\"24-RoleCheck Role Id is : \" + pm.environment.get(\"roleCheckRoleId\"));\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"    "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true,
														"disabledSystemHeaders": {}
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-language-code",
																"value": "en",
																"type": "text"
															},
															{
																"key": "",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/nonadminroleslist",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"nonadminroleslist"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Controller Group Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{controllerGroupId}}\",\n    \"groupName\": \"Controller Group\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Time from the invoice is received until it is posted.\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{leadTimeRoleId}}\",\n                \"name\": \"Lead Time\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": [\n                \"Approved\",\n                \"Rejected\",\n                \"Forwarded\",\n                \"Posting\",\n                \"Posted\",\n                \"New\",\n                \"Duplicate\",\n                \"Cancelled\",\n                \"Moved\",\n                \"Paused\",\n                \"InReview\",\n                \"UnidentifiedSupplier\",\n                \"Received\",\n                \"BackgroundProcessing\",\n                \"UnidentifiedPurchaser\",\n                \"MissingWorkflow\",\n                \"PostingError\",\n                \"PartiallyPaid\",\n                \"Paid\",\n                \"PreReview\",\n                \"PreReview2\",\n                \"PreReview3\",\n                \"PostedPO\"\n            ]\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{controllerGroupId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{controllerGroupId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Controller Group Org Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{controllerGroupOrgId}}\",\n    \"groupName\": \"Controller Group Org\",\n    \"roleClientRelations\": [],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"inheritanceLevel\": \"ImmediateChildren\",\n            \"invoiceStatuses\": []\n        },\n        // {\n        //     \"role\": {\n        //         \"isInvoiceStatusEnabled\": false,\n        //         \"toolTip\": \"Access for inbound invoices inbox.\",\n        //         \"category\": \"Other\",\n        //         \"linkData\": null,\n        //         \"id\": \"{{inboundInboxRoleId}}\",\n        //         \"name\": \"Inbound Inbox\"\n        //     },\n        //     \"inheritanceLevel\": \"ImmediateChildren\",\n        //     \"invoiceStatuses\": []\n        // },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"Access to edit invoice in selected Invoice Statuses.\",\n                \"category\": \"Admin\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceEditorRoleId}}\",\n                \"name\": \"Invoice Editor\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": [\n                \"Approved\"\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": [\n                \"Approved\",\n                \"Rejected\",\n                \"Forwarded\",\n                \"Posting\",\n                \"Posted\",\n                \"New\",\n                \"Duplicate\",\n                \"Cancelled\",\n                \"Moved\",\n                \"Paused\",\n                \"InReview\",\n                \"UnidentifiedSupplier\",\n                \"Received\",\n                \"BackgroundProcessing\",\n                \"UnidentifiedPurchaser\",\n                \"MissingWorkflow\",\n                \"PostingError\",\n                \"PartiallyPaid\",\n                \"Paid\",\n                \"PreReview\",\n                \"PreReview2\",\n                \"PreReview3\",\n                \"PostedPO\"\n            ]\n        },\n        // {\n        //     \"role\": {\n        //         \"isInvoiceStatusEnabled\": false,\n        //         \"toolTip\": \"Access for inbound invoices inbox.\",\n        //         \"category\": \"Other\",\n        //         \"linkData\": null,\n        //         \"id\": \"{{inboundInboxRoleId}}\",\n        //         \"name\": \"Inbound Inbox\"\n        //     },\n        //     \"inheritanceLevel\": \"NoInheritance\",\n        //     \"invoiceStatuses\": []\n        // }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{controllerGroupOrgId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{controllerGroupOrgId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Integration Client Level Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{integrasjonKlientnivåId}}\",\n    \"groupName\": \"Integrasjon Klientnivå\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_1}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_2}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_3}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Time from the invoice is received until it is posted.\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{leadTimeRoleId}}\",\n                \"name\": \"Lead Time\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrasjonKlientnivåId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrasjonKlientnivåId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Integration Organization Level Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{integrasjonOrganisasjonsnivåId}}\",\n    \"groupName\": \"Integrasjon Organisasjonsnivå\",\n    \"roleClientRelations\": [],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrasjonOrganisasjonsnivåId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrasjonOrganisasjonsnivåId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Integration Group Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{integrationGroupId}}\",\n    \"groupName\": \"Integration Group\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_2}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_3}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n                \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Time from the invoice is received until it is posted.\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{leadTimeRoleId}}\",\n                \"name\": \"Lead Time\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Provides full access to all functionality in the integration API as well as Semine Integration Setup\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{integrationRoleId}}\",\n                \"name\": \"Integration\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{integrationGroupId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{integrationGroupId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Settings Controller Group Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{settingsControllerGroupId}}\",\n    \"groupName\": \"Settings Controller Group\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_5}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_6}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_1}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_2}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_3}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Time from the invoice is received until it is posted.\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{leadTimeRoleId}}\",\n                \"name\": \"Lead Time\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_8}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Invoice Flow Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{automationReportRoleId}}\",\n                \"name\": \"Automation Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Role for approving invoices. Only invoices directly assigned to the user will be accessible. Invoices where the user is @-mentioned in a comment can be viewed but the user can only add a comment, not edit the invoice.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{approverRoleId}}\",\n                \"name\": \"Approver\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{statisticsReportRoleId}}\",\n                \"name\": \"Statistics Report\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{invoiceFlowReportRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": [\n                \"Approved\",\n                \"Rejected\",\n                \"Forwarded\",\n                \"Posting\",\n                \"Posted\",\n                \"New\",\n                \"Duplicate\",\n                \"Cancelled\",\n                \"Moved\",\n                \"Paused\",\n                \"InReview\",\n                \"UnidentifiedSupplier\",\n                \"Received\",\n                \"BackgroundProcessing\",\n                \"UnidentifiedPurchaser\",\n                \"MissingWorkflow\",\n                \"PostingError\",\n                \"PartiallyPaid\",\n                \"Paid\",\n                \"PreReview\",\n                \"PreReview2\",\n                \"PreReview3\",\n                \"PostedPO\"\n            ]\n        },\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": false,\n                \"toolTip\": \"Time from the invoice is received until it is posted.\",\n                \"category\": \"Reports\",\n                \"linkData\": null,\n                \"id\": \"{{leadTimeRoleId}}\",\n                \"name\": \"Lead Time\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": []\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{settingsControllerGroupId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{settingsControllerGroupId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ViewGroup Controller Clients Relations",
											"item": [
												{
													"name": "PWA /Group/ClientRelations",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// const moment = require(\"moment\");\r",
																	"\r",
																	"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
																	"\r",
																	"\r",
																	"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"groupId\": \"{{viewGroupControllerId}}\",\n    \"groupName\": \"ViewGroup Controller\",\n    \"roleClientRelations\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"clients\": [\n                {\n                    \"id\": \"{{datasetId_4}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                },\n                {\n                    \"id\": \"{{datasetId_7}}\",\n                    \"active\": true,\n                    \"invoiceStatuses\": [\n                        \"Approved\",\n                        \"Rejected\",\n                        \"Forwarded\",\n                        \"Posting\",\n                        \"Posted\",\n                        \"New\",\n                        \"Duplicate\",\n                        \"Cancelled\",\n                        \"Moved\",\n                        \"Paused\",\n                        \"InReview\",\n                        \"UnidentifiedSupplier\",\n                        \"Received\",\n                        \"BackgroundProcessing\",\n                        \"UnidentifiedPurchaser\",\n                        \"MissingWorkflow\",\n                        \"PostingError\",\n                        \"PartiallyPaid\",\n                        \"Paid\",\n                        \"PreReview\",\n                        \"PreReview2\",\n                        \"PreReview3\",\n                        \"PostedPO\"\n                    ],\n                    \"name\": \"\",\n                    \"code\": null\n                }\n            ]\n        }\n    ],\n    \"forOrganization\": true,\n    \"organizationRoles\": [\n        {\n            \"role\": {\n                \"isInvoiceStatusEnabled\": true,\n                \"toolTip\": \"A controller in Semine has full access to settings and edit access to all invoice. A controller is allowed to approve, forward, reject and pause on behalf of other users.\",\n                \"category\": \"Basic\",\n                \"linkData\": null,\n                \"id\": \"{{controllerRoleId}}\",\n                \"name\": \"Controller\"\n            },\n            \"inheritanceLevel\": \"NoInheritance\",\n            \"invoiceStatuses\": [\n                \"Approved\",\n                \"Rejected\",\n                \"Forwarded\",\n                \"Posting\",\n                \"Posted\",\n                \"New\",\n                \"Duplicate\",\n                \"Cancelled\",\n                \"Moved\",\n                \"Paused\",\n                \"InReview\",\n                \"UnidentifiedSupplier\",\n                \"Received\",\n                \"BackgroundProcessing\",\n                \"UnidentifiedPurchaser\",\n                \"MissingWorkflow\",\n                \"PostingError\",\n                \"PartiallyPaid\",\n                \"Paid\",\n                \"PreReview\",\n                \"PreReview2\",\n                \"PreReview3\",\n                \"PostedPO\"\n            ]\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/groups/{{viewGroupControllerId}}/rolesandstatus",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"groups",
																"{{viewGroupControllerId}}",
																"rolesandstatus"
															],
															"query": [
																{
																	"key": "take",
																	"value": "15",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{cAccountingCode-A}}",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "ClientSettings",
									"item": [
										{
											"name": "PWA /settings/ID 1 -periodeOnConectVat-CostOff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"const jsonDataAL = pm.response.json();\r",
															"   //console.log(jsonDataAL);\r",
															"\r",
															"    var jsonDataAL1;\r",
															"\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonDataAL) {\r",
															"        if (jsonDataAL[i].key == \"Periodization_UseCostAccountToVatCode\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Vat code is not connected to cost account.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", false);\r",
															"});\r",
															"}\r",
															"if (jsonDataAL[i].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PeriodozedsLines  are regarded.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", false);\r",
															"});\r",
															"}\r",
															"if (jsonDataAL[i].key == \"Accounts_ClosingDate\") {\r",
															"            var jsonDataAL1 =jsonDataAL[i];\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Accounts_ClosingDate  is null.\", function () {\r",
															"        pm.expect(jsonDataAL1).to.have.property(\"value\", null);\r",
															"});\r",
															"}\r",
															"}\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const moment = require(\"moment\");\r",
															"\r",
															"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
															"\r",
															"\r",
															"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"key\": \"Accounts_ClosingDate\",\n        \"value\": null\n    },\n    {\n        \"key\": \"EnableVatHandling\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Accounting_EnableExternalEdit\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Accounts_DisregardPeriodsWhenGeneratingAl\",\n        \"value\": false\n    },\n    {\n        \"key\": \"DateExtractor_MinimumThresholdAmount\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"Periodization_UseCostAccountToVatCode\",\n        \"value\": false\n    },\n    {\n        \"key\": \"Reinvoicing_Enable\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Reinvoicing_Enable_Capture_Threshold\",\n        \"value\": 1\n    },\n    {\n        \"key\": \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\",\n        \"value\": null\n    },\n    {\n        \"key\": \"VoucherNumbers_SetByErp\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_AllowPostWithoutApprove\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_MissingBuyerRefStepEnabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_PassthroughInvoicesWithoutWorkflow\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_WorkflowType\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Workflow_ContractType\",\n        \"value\": null\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"settings"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "---  sleep 10 sec ---",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(10);      "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/health",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"health"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Parameters Settings AI",
									"item": [
										{
											"name": "PWA /parameters/condensed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"//////// Set Environment Variables /////////\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json()\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
															"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
															"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
															"        }\r",
															"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
															"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
															"        }\r",
															"    }\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"parameters",
														"condensed"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /parameters/LEDGER/groupedsettings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(jsonData);\r",
															"\r",
															"\r",
															"//Check if AI is enabled\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json();\r",
															"    var i;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].key == \"Ai_Enabled\") {\r",
															"            jsonDataSettings=jsonData[i];\r",
															"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ai_Enabled true.\", function () {\r",
															"                        pm.expect(jsonDataSettings).to.have.property(\"value\", true);\r",
															"                    });\r",
															"                }\r",
															"\r",
															"                if (jsonData[i].key == \"Ai_Threshold\") {\r",
															"                    jsonDataSettings=jsonData[i];\r",
															"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Ai_Threshold 50.0.\", function () {\r",
															"                        pm.expect(jsonDataSettings).to.have.property(\"value\", 50.0);\r",
															"                    });\r",
															"                }\r",
															"            }\r",
															"        }\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept": true,
													"accept-encoding": true,
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"key\": \"Ai_Enabled\",\r\n        \"value\": true\r\n    },\r\n    {\r\n        \"key\": \"Ai_Threshold\",\r\n        \"value\": 50\r\n    },\r\n    {\r\n        \"key\": \"AI_ShouldOverwrite\",\r\n        \"value\": null\r\n    },\r\n    {\r\n        \"key\": \"Extractor_ShouldOverwrite\",\r\n        \"value\": null\r\n    },\r\n    {\r\n        \"key\": \"Extractor_DoNotAddToExistingSuggestions\",\r\n        \"value\": null\r\n    },\r\n    {\r\n        \"key\": \"Extractor_UseSingleExactCodeMatch\",\r\n        \"value\": null\r\n    },\r\n    {\r\n        \"key\": \"Extractor_UseSingleExactAliasMatch\",\r\n        \"value\": null\r\n    },\r\n    {\r\n        \"key\": \"Extractor_AutoApplyLowestCode\",\r\n        \"value\": true\r\n    },\r\n    {\r\n        \"key\": \"Extractor_AutoApplyHighestCode\",\r\n        \"value\": true\r\n    },\r\n    {\r\n        \"key\": \"Extractor_AutoApplyDescriptionExactMatch\",\r\n        \"value\": null\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/settingvalues",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"parameters",
														"{{parameterIdLedger}}",
														"settingvalues"
													]
												},
												"description": "Gets a supplier for a given client."
											},
											"response": []
										}
									]
								},
								{
									"name": "Purchase Orders",
									"item": [
										{
											"name": "PWA /settings/client/ID 1 -purchaseorders Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const moment = require(\"moment\");\r",
															"\r",
															"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
															"\r",
															"\r",
															"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"poMatchOnAllInvoices\": false,\n    \"nsAccountsInPoCategory\": false,\n    \"goodsReceiptEnabled\": false,\n    \"quantityIsDeviation\": true,\n    \"unitPriceIsDeviation\": true,\n    \"netAmountIsDeviation\": true,\n    \"totalAmountIsDeviation\": true,\n    \"autoPostWhenApproved\": false,\n    \"autoPostOnEntry\": false,\n    \"generateAccountingLines\": false,\n    \"matchingQualityMin\": 80,\n    \"roundingToleranceOnInvoice\": 0.5,\n    \"numberOfDigitsToleranceForQuantityDecimals\": 3,\n    \"numberOfDecimalPointsForUnitPriceRounding\": 2,\n    \"serviceItemParameter\": null,\n    \"serviceItemParameterValue\": null,\n    \"showDeviationsOnPurchaseInvoiceLines\": true,\n    \"deviationDisplayType\": \"Numeric\",\n    \"lineNetAmountDeviationThreshold\": 0,\n    \"lineQuantityDeviationThreshold\": 0,\n    \"lineTotalAmountDeviationThreshold\": 0,\n    \"lineUnitPriceDeviationThreshold\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/purchaseorders/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"purchaseorders",
														"settings"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /settings/client/ID 1 -purchaseorders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const moment = require(\"moment\");\r",
															"\r",
															"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
															"\r",
															"\r",
															"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"poMatchOnAllInvoices\": true,\n    \"nsAccountsInPoCategory\": false,\n    \"goodsReceiptEnabled\": false,\n    \"quantityIsDeviation\": true,\n    \"unitPriceIsDeviation\": true,\n    \"netAmountIsDeviation\": true,\n    \"totalAmountIsDeviation\": true,\n    \"autoPostWhenApproved\": false,\n    \"autoPostOnEntry\": false,\n    \"generateAccountingLines\": false,\n    \"matchingQualityMin\": 80,\n    \"roundingToleranceOnInvoice\": 0.5,\n    \"numberOfDigitsToleranceForQuantityDecimals\": 3,\n    \"numberOfDecimalPointsForUnitPriceRounding\": 2,\n    \"serviceItemParameter\": null,\n    \"serviceItemParameterValue\": null,\n    \"showDeviationsOnPurchaseInvoiceLines\": true,\n    \"deviationDisplayType\": \"Numeric\",\n    \"lineNetAmountDeviationThreshold\": 0,\n    \"lineQuantityDeviationThreshold\": 0,\n    \"lineTotalAmountDeviationThreshold\": 0,\n    \"lineUnitPriceDeviationThreshold\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/purchaseorders/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"purchaseorders",
														"settings"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /settings/client/ID 1 -purchaseorders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 304\", function () {\r",
															"    pm.response.to.have.status(304);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const moment = require(\"moment\");\r",
															"\r",
															"// pm.environment.set(\"Accounts_ClosingDate\", moment().add(6, 'months').format(\"YYYY-MM-DD\"));\r",
															"\r",
															"\r",
															"// console.log(\"Accounts_ClosingDate is :\" +pm.environment.get(\"Accounts_ClosingDate\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"poMatchOnAllInvoices\": true,\n    \"nsAccountsInPoCategory\": false,\n    \"goodsReceiptEnabled\": false,\n    \"quantityIsDeviation\": true,\n    \"unitPriceIsDeviation\": true,\n    \"netAmountIsDeviation\": true,\n    \"totalAmountIsDeviation\": true,\n    \"autoPostWhenApproved\": false,\n    \"autoPostOnEntry\": false,\n    \"generateAccountingLines\": false,\n    \"matchingQualityMin\": 80,\n    \"roundingToleranceOnInvoice\": 0.5,\n    \"numberOfDigitsToleranceForQuantityDecimals\": 3,\n    \"numberOfDecimalPointsForUnitPriceRounding\": 2,\n    \"serviceItemParameter\": null,\n    \"serviceItemParameterValue\": null,\n    \"showDeviationsOnPurchaseInvoiceLines\": true,\n    \"deviationDisplayType\": \"Numeric\",\n    \"lineNetAmountDeviationThreshold\": 0,\n    \"lineQuantityDeviationThreshold\": 0,\n    \"lineTotalAmountDeviationThreshold\": 0,\n    \"lineUnitPriceDeviationThreshold\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/purchaseorders/settings",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"purchaseorders",
														"settings"
													],
													"query": [
														{
															"key": "take",
															"value": "15",
															"disabled": true
														},
														{
															"key": "query",
															"value": "{{cAccountingCode-A}}",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "---  sleep 10 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(10);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "27709 Invoice Header Actions",
							"item": [
								{
									"name": "Change supplier id",
									"item": [
										{
											"name": "PWA /invoices/ID/supplier - A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"supplier"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - take 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?skip=0&take=10&requireTotalCount=false",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "10"
														},
														{
															"key": "requireTotalCount",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - filter A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?filter=[\"erpVendorId\",\"=\",\"{{cSupplierCode-A}}\"]",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "filter",
															"value": "[\"erpVendorId\",\"=\",\"{{cSupplierCode-A}}\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - filter B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?skip=0&take=10&requireTotalCount=false&filter=[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"]]",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "10"
														},
														{
															"key": "requireTotalCount",
															"value": "false"
														},
														{
															"key": "filter",
															"value": "[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"vatId\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"bankAccounts\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"name\",\"contains\",\"{{cSupplierCode-B}}\"]]",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"exchangeRate\": 1,\r\n    \"invoiceNumber\": \"INT-20201202-1921119\",\r\n    \"invoiceDate\": \"2020-12-02\",\r\n    \"dueDate\": \"2020-12-12T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-INT-20201202-1921119\",\r\n    \"netAmount\": 200,\r\n    \"vatAmount\": 50,\r\n    \"vatHigh\": 50,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 250,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": null,\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierId is changed.\", function () {\r",
															"        pm.expect(jsonData.seller).to.have.property(\"erpVendorId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"vatId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"bankAccount\", \"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/supplier - A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"supplier"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Change all header values",
									"item": [
										{
											"name": "PWA invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.collectionVariables.set(\"cYYYYMMDD-HHmmss\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"SEK\",\r\n    \"exchangeRate\": 2,\r\n    \"invoiceNumber\": \"invoiceNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"invoiceDate\": \"2020-12-01\",\r\n    \"dueDate\": \"2020-12-01T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"netAmount\": 204,\r\n    \"vatAmount\": 51,\r\n    \"vatHigh\": 51,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 255,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": \"voucherDescription-{{cYYYYMMDD-HHmmss}}\",\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : SupplierId is changed.\", function () {\r",
															"        pm.expect(jsonData.seller).to.have.property(\"erpVendorId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"vatId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"bankAccount\", \"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"currency\", \"SEK\");\r",
															"        pm.expect(jsonData).to.have.property(\"exchangeRate\", 2.0);\r",
															"        pm.expect(jsonData).to.have.property(\"reportingAmount\", 510.00);\r",
															"\r",
															"    });\r",
															"}\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"voucherDescription\", \"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData).to.not.be.property(\"description\", null);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"invoiceDate\", \"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"dueDate\", \"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", \"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"netAmount\", 204);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmount\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountHigh\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountMid\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountLow\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingTotalAmount\", -255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingNetAmount\", -204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id.\", function () {\r",
															"\r",
															"        pm.expect(jsonData.seller).to.have.property(\"erpVendorId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"vatId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"bankAccount\", \"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"currency\", \"SEK\");\r",
															"        pm.expect(jsonData).to.have.property(\"exchangeRate\", 2.0);\r",
															"        pm.expect(jsonData).to.have.property(\"reportingAmount\", 510.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"voucherDescription\", \"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData).to.not.be.property(\"description\", null);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date.\", function () {\r",
															"         pm.expect(jsonData).to.have.property(\"invoiceDate\", \"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"dueDate\", \"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", \"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts.\", function () {\r",
															"       pm.expect(jsonData).to.have.property(\"netAmount\", 204);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmount\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountHigh\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountMid\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountLow\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingTotalAmount\", -255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingNetAmount\", -204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA invoices/ID/headers Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.collectionVariables.set(\"cYYYYMMDD-HHmmss\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"SEK\",\r\n    \"exchangeRate\": 2,\r\n    \"invoiceNumber\": \"{{cInvoiceNumberDuplicate}}\",\r\n    \"invoiceDate\": \"2020-12-01\",\r\n    \"dueDate\": \"2020-12-01T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"netAmount\": 204,\r\n    \"vatAmount\": 51,\r\n    \"vatHigh\": 51,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 255,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": \"voucherDescription-{{cYYYYMMDD-HHmmss}}\",\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id.\", function () {\r",
															"\r",
															"        pm.expect(jsonData.seller).to.have.property(\"erpVendorId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"name\", \"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"vatId\", pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller).to.have.property(\"bankAccount\", \"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"currency\", \"SEK\");\r",
															"        pm.expect(jsonData).to.have.property(\"exchangeRate\", 2.0);\r",
															"        pm.expect(jsonData).to.have.property(\"reportingAmount\", 510.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"voucherDescription\", \"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData).to.not.be.property(\"description\", null);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date.\", function () {\r",
															"         pm.expect(jsonData).to.have.property(\"invoiceDate\", \"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"dueDate\", \"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number.\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", \"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts.\", function () {\r",
															"       pm.expect(jsonData).to.have.property(\"netAmount\", 204);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmount\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountHigh\", 51);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountMid\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"vatAmountLow\", 0);\r",
															"        pm.expect(jsonData).to.have.property(\"totalAmount\", 255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingTotalAmount\", -255);\r",
															"        pm.expect(jsonData.lineItemAmount).to.have.property(\"remainingNetAmount\", -204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "INT /invoices - Cost Minimum Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.environment.set(\"invoiceIdDuplicate\", jsonData.invoiceId);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.environment.set(\"cInvoiceNumberDuplicate\", \"D-\" + moment().format(\"YYYYMMDD-HHmmssS\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"InvoiceNumber\": \"{{cInvoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"ApiTest Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 250.00,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 50.00,\r\n        \"AccountingLineTotalAmount\": 250.01,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 200.00,\r\n        \"ReportingAmount\": 200.02,\r\n        \"RoundingAmount\": 0.3\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-A}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Description-{{cIssueDate}}\",\r\n            \"Quantity\": 10.0,\r\n            \"UnitPrice\": 20.00,\r\n            \"TotalAmount\": 250.00,\r\n            \"NetAmount\": 200.0,\r\n            \"Discount\": 0.5,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 50.0,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n        \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 50,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices"
													]
												},
												"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Should change status to duplicate\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice number duplicate\", function () {\r",
															"        pm.expect(jsonData).to.have.property(\"status\", \"Duplicate\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// TODO: Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{invoiceIdDuplicate}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{invoiceIdDuplicate}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "27715 Invoice Line Action Buttons",
							"item": [
								{
									"name": "PWA /invoicelines - Add Line",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "content-length",
												"value": "0"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - LinesAdded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line is added.\", function () {\r",
													"        pm.expect(jsonData.data[0]).to.have.property(\"activityOperationType\", \"LinesAdded\");\r",
													"    });\r",
													"}\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"// let apiName = 'Groups - ';\r",
													"\r",
													"// let isSuccess = false;\r",
													"// pm.test(apiName + \"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"\r",
													"//     if (pm.response.status == \"OK\") {\r",
													"//         isSuccess = true;\r",
													"//     }\r",
													"// });\r",
													"\r",
													"// if (isSuccess) {\r",
													"//     let name = pm.collectionVariables.get(\"cGroupName-A\");\r",
													"\r",
													"//     let allGroups = pm.response.json();\r",
													"\r",
													"//     pm.test(apiName + \"Response length should be greater than zero\", function () {\r",
													"//         pm.expect(allGroups.length).not.equal(0);\r",
													"//     });\r",
													"\r",
													"//     if (allGroups.length > 0) {\r",
													"//         var desiredGroupName = allGroups.find(item => item.name == name);\r",
													"\r",
													"//         pm.test(apiName + \"Desired group should be found.\", function () {\r",
													"//             pm.expect(desiredGroupName).not.to.be.null;\r",
													"//             pm.expect(desiredGroupName).not.to.be.undefined;\r",
													"//         });\r",
													"\r",
													"//         if (desiredGroupName != null) {\r",
													"//             let name = pm.collectionVariables.get(\"cGroupName-A\");\r",
													"//             let code = pm.collectionVariables.get(\"cGroupCode-A\");\r",
													"\r",
													"//             pm.test(apiName + \"Desired group name should match with the request name.\", function () {\r",
													"//                 pm.expect(desiredGroupName.name).is.to.equal(name);\r",
													"//             });\r",
													"\r",
													"//             pm.test(apiName + \"Desired client info code should match with the request code.\", function () {\r",
													"//                 pm.expect(desiredGroupName.code).is.to.equal(code);\r",
													"//             });\r",
													"\r",
													"//             pm.collectionVariables.set(\"cGroupId-A\", desiredGroupName.id);\r",
													"//         }\r",
													"//     }\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine is found.\", function () {\r",
													"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
													"        pm.expect(jsonData, \"invoiceLines\").to.have.property(\"invoiceLines\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"invoiceAmounts\").to.have.property(\"invoiceAmounts\").that.is.not.empty;\r",
													"\r",
													"    });\r",
													"\r",
													"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Delete\", jsonData.invoiceLines[0].invoiceLineId);\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Split\", jsonData.invoiceLines[1].invoiceLineId);\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/deletelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine is deleted\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0]).to.be.not.property(\"invoiceLineId\", pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"invoiceLineIds\":[\"{{invoiceLineId_Delete}}\"]}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/deletelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"deletelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine is deleted\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0]).to.be.not.property(\"invoiceLineId\", pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID/split",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice Line is split\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0]).to.be.not.property(\"invoiceLineId\", pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"invoiceLineIds\":[\"{{invoiceLineId_Delete}}\"]}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Split}}/split?rowCount=2",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Split}}",
												"split"
											],
											"query": [
												{
													"key": "rowCount",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - NumericSplitApplied",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : NumericSplitApplied\", function () {\r",
													"        pm.expect(jsonData.data[0]).to.have.property(\"activityOperationType\", \"NumericSplitApplied\");\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"LineItem_1\", jsonData.data[0].details.references[0].id);\r",
													"    pm.collectionVariables.set(\"LineItem_2\", jsonData.data[0].details.references[1].id);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/invoicelines/groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \"Status : 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"masterLineSourceLineId\": \"{{LineItem_1}}\",\r\n    \"invoiceLineIds\": [\r\n        \"{{LineItem_1}}\",\r\n        \"{{LineItem_2}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/groups",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - LinesGrouped",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Lines are grouped.\", function () {\r",
													"        pm.expect(jsonData.data[0]).to.have.property(\"activityOperationType\", \"LinesGrouped\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceLine is copied\", function () {\r",
													"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
													"        pm.expect(jsonData, \"invoiceLines\").to.have.property(\"invoiceLines\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"invoiceAmounts\").to.have.property(\"invoiceAmounts\").that.is.not.empty;\r",
													"\r",
													"    });\r",
													"\r",
													"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Code\", jsonData.invoiceLines[0].invoiceLineId);\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /accountinglines/generate - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - Apply code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20.4,\r\n    \"netAmount\": 204,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-02T18:21:11.999Z\",\r\n    \"startPeriodMonth\": null,\r\n    \"startPeriodYear\": null,\r\n    \"totalPeriod\": null,\r\n    \"gtin\": null,\r\n    \"accountTypeParameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"3008bccd-9f80-4aea-a25b-c89478062954\",\r\n            \"parameterValueId\": \"00000000-0000-0000-0000-000000000000\"\r\n        },\r\n        {\r\n            \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n            \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Code}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - copyToAllLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"column\": \"AccountingParameter\",\r\n    \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\",\r\n    \"invoiceLineId\": \"31e124b0-5816-4335-b040-b946af55b759\",\r\n    \"requestType\": \"copyToAllLines\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/applyall",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"applyall"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - Apply interim",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20.4,\r\n    \"netAmount\": 204,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-02T18:21:11.999Z\",\r\n    \"startPeriodMonth\": null,\r\n    \"startPeriodYear\": null,\r\n    \"totalPeriod\": null,\r\n    \"gtin\": null,\r\n    \"accountTypeParameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n            \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\"\r\n        },\r\n        {\r\n            \"parameterId\": \"3008bccd-9f80-4aea-a25b-c89478062954\",\r\n            \"parameterValueId\": \"00000000-0000-0000-0000-000000000000\"\r\n        },\r\n        {\r\n            \"parameterId\": \"8ee75574-a814-4a96-a3db-e511a1fd33ae\",\r\n            \"parameterValueId\": \"209a0d25-bbdc-46e4-8cb2-a9699b7edfd2\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Code}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - copyToAllLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"column\": \"AccountingParameter\",\r\n    \"parameterId\": \"8ee75574-a814-4a96-a3db-e511a1fd33ae\",\r\n    \"parameterValueId\": \"209a0d25-bbdc-46e4-8cb2-a9699b7edfd2\",\r\n    \"invoiceLineId\": \"31e124b0-5816-4335-b040-b946af55b759\",\r\n    \"requestType\": \"copyToAllLines\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/applyall",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"applyall"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /accountinglines/generate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Find invoices in list",
							"item": [
								{
									"name": "PWA /invoices/ filter - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"function sleep(milisecond) {\r",
													"    var date = Date.now();\r",
													"    while ((date + milisecond) > Date.now());\r",
													"}\r",
													"\r",
													"var retries = pm.globals.get(\"retries\");\r",
													"\r",
													"\r",
													"////////////// FIND INVOICE ///////////////\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    // pm.environment.unset(\"cInvoiceId\");\r",
													"\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    // If invoiceId found, move to next request. \r",
													"    // If invoiceId not found repeat this request 20 times before failing.\r",
													"    if (retries < 20) {\r",
													"        if (jsonData != null) {\r",
													"            pm.environment.set(\"cInvoiceId\", jsonData.id);\r",
													"            pm.globals.set(\"retries\", 0);\r",
													"            console.log(\"cInvoiceId \" + pm.environment.get(\"cInvoiceId\"));\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceId not null.\", function () {\r",
													"                pm.expect(jsonData).to.be.not.property(\"id\", []);\r",
													"            });\r",
													"        } else {\r",
													"            // Wait 5s and then try again\r",
													"            sleep(5000);\r",
													"            retries++;\r",
													"            pm.globals.set(\"retries\", retries);\r",
													"            console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
													"            postman.setNextRequest(\"PWA /invoices/ filter - Cost\");\r",
													"        }\r",
													"    } else {\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : InvoiceId not null.\", function () {\r",
													"            pm.expect(jsonData).to.be.not.property(\"id\", []);\r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=1&filter=[\"invoiceNumber\",\"=\",\"{{invoiceNumber}}\"]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"invoices"
											],
											"query": [
												{
													"key": "skip",
													"value": "0",
													"disabled": true
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"invoiceNumber\",\"=\",\"{{invoiceNumber}}\"]"
												}
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "PWA context/invoices/ID - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/context/invoices/{{cInvoiceId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"context",
										"invoices",
										"{{cInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/supplier - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"supplier"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/operations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/operations",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"operations"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/actions/determinepostingdate - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions/determinepostingdate",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"actions",
										"determinepostingdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/actions - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /parameters/ID/values/condensed?take=15&query=req-acc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "semine.webapi.nginx.devsemine.no"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "dnt",
										"value": "1"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDcxOTc0MDQsImV4cCI6MTYwNzI4MzgwNCwiaXNzIjoiaHR0cHM6Ly9zZW1pbmUubG9naW4ubmdpbnguZGV2c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiJhOVlWa0hhVGRmSzVQRkUwTS1FVGcyc25WQmVXZGwzWkRQbmJzbTZjNjNSVGwiLCJpYXQiOjE2MDcxOTc0MDIsInNfaGFzaCI6ImhfdjB0OUh1eHNOMy1HSU5venJ2MGciLCJzaWQiOiJqQkEyU1A5bnhudmpLbm1mTjlwdHhBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA3MTk3NDAxLCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiJlYzE4OTMwNS0wZjk5LTRhMDEtOGMwMC0yNmZlMGU4ZDk1N2YiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.i1Dp9oYDrZ4PYg6uPDWO5vYjRNk8OhgGaEIav-gwvlZ4C2_X1PriL81edQROoqglBXMrBzCTIMa6M5RSObI9n22agU1YbuYuhphY04bvnq4OLbNIaVWdb34NdSfQGB6NusKsOfMr-8n9ND_w6-tcfQGwk0rdurNc-PQ0hgze0JXZOWPKqqI4cSSNLFQsF4G9TOalCEBbjqK6O4XZaoguXWyTj2qIKEY4gwP9Cz2Si2bXkGaT1TbhxDrPctfRnd5DFSY_cbrtLTtayLdmFLFcH5SREZTnvkm1VcuGvEnEv-pJzgJhIRGKw7nfmpWlDgl7nhm-VtH1VG5_kP9B1BIukw"
									},
									{
										"key": "azds-route-as",
										"value": "semine"
									},
									{
										"key": "x-language-code",
										"value": "en"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"
									},
									{
										"key": "origin",
										"value": "https://semine.angular.nginx.devsemine.no"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-site"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "accept-language",
										"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
									}
								],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/619fbbed-79ef-4f29-855c-d170cc20d1b4/values/condensed?take=15&query=req-acc",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"619fbbed-79ef-4f29-855c-d170cc20d1b4",
										"values",
										"condensed"
									],
									"query": [
										{
											"key": "take",
											"value": "15"
										},
										{
											"key": "query",
											"value": "req-acc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoicelines/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "authority",
										"value": "semine.webapi.nginx.devsemine.no"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "dnt",
										"value": "1"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDcxOTc0MDQsImV4cCI6MTYwNzI4MzgwNCwiaXNzIjoiaHR0cHM6Ly9zZW1pbmUubG9naW4ubmdpbnguZGV2c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiJhOVlWa0hhVGRmSzVQRkUwTS1FVGcyc25WQmVXZGwzWkRQbmJzbTZjNjNSVGwiLCJpYXQiOjE2MDcxOTc0MDIsInNfaGFzaCI6ImhfdjB0OUh1eHNOMy1HSU5venJ2MGciLCJzaWQiOiJqQkEyU1A5bnhudmpLbm1mTjlwdHhBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA3MTk3NDAxLCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiJlYzE4OTMwNS0wZjk5LTRhMDEtOGMwMC0yNmZlMGU4ZDk1N2YiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.i1Dp9oYDrZ4PYg6uPDWO5vYjRNk8OhgGaEIav-gwvlZ4C2_X1PriL81edQROoqglBXMrBzCTIMa6M5RSObI9n22agU1YbuYuhphY04bvnq4OLbNIaVWdb34NdSfQGB6NusKsOfMr-8n9ND_w6-tcfQGwk0rdurNc-PQ0hgze0JXZOWPKqqI4cSSNLFQsF4G9TOalCEBbjqK6O4XZaoguXWyTj2qIKEY4gwP9Cz2Si2bXkGaT1TbhxDrPctfRnd5DFSY_cbrtLTtayLdmFLFcH5SREZTnvkm1VcuGvEnEv-pJzgJhIRGKw7nfmpWlDgl7nhm-VtH1VG5_kP9B1BIukw"
									},
									{
										"key": "azds-route-as",
										"value": "semine"
									},
									{
										"key": "x-language-code",
										"value": "en"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "origin",
										"value": "https://semine.angular.nginx.devsemine.no"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-site"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "accept-language",
										"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20,\r\n    \"netAmount\": 200,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-06T00:25:37.697Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-Batch-100-1-20201205-1751480\",\r\n    \"accountTypeParameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n            \"parameterValueId\": \"4492c679-9625-4534-a653-9a038523d498\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/05b58ef5-c3e2-436f-832a-d832f7710506/invoicelines/61ad19cb-4103-4215-aa0f-e96a7359943f",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"05b58ef5-c3e2-436f-832a-d832f7710506",
										"invoicelines",
										"61ad19cb-4103-4215-aa0f-e96a7359943f"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "--- END ---",
					"item": [
						{
							"name": "--- END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"invoiceType : \" + pm.environment.get(\"invoiceType\"))\r",
											"console.log('/// END ///');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenPWA}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 10 seconds\", function () {",
					"//     pm.expect(pm.response.responseTime).to.be.below(10000);",
					"// });",
					"",
					"",
					"",
					"// console.log(pm.environment.get(\"cSupplierCode-A\"));",
					"// console.log(pm.environment.get(\"cSupplierVATId-A\"));",
					"",
					"// console.log(pm.environment.get(\"cSupplierCode-A\"));",
					"// console.log(pm.environment.get(\"cSupplierVATId-A\"));",
					"",
					"",
					"// console.log(pm.environment.get(\"UserController\"));",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cInvoiceNumber",
			"value": ""
		},
		{
			"key": "cPackageId",
			"value": ""
		},
		{
			"key": "cSupplierCode-A",
			"value": ""
		},
		{
			"key": "cSupplierVATId-A",
			"value": ""
		},
		{
			"key": "cSupplierId-A",
			"value": ""
		},
		{
			"key": "cAccountingCode-A",
			"value": ""
		},
		{
			"key": "cDueDate",
			"value": ""
		},
		{
			"key": "cInvoiceDate",
			"value": ""
		},
		{
			"key": "cIssueDate",
			"value": ""
		},
		{
			"key": "cAccountTypeParameterId",
			"value": ""
		},
		{
			"key": "cInvoiceLineId",
			"value": ""
		},
		{
			"key": "cAttachmentId",
			"value": ""
		},
		{
			"key": "cWorkflowId",
			"value": ""
		},
		{
			"key": "oAccountingCode-A",
			"value": ""
		},
		{
			"key": "YYYYMMDD-HHmmss",
			"value": ""
		},
		{
			"key": "cYYYYMMDD-HHmmss",
			"value": ""
		},
		{
			"key": "invoiceLineId_Delete",
			"value": ""
		},
		{
			"key": "invoiceLineId_Split",
			"value": ""
		},
		{
			"key": "LineItem_1",
			"value": ""
		},
		{
			"key": "LineItem_2",
			"value": ""
		},
		{
			"key": "invoiceLineId_Code",
			"value": ""
		},
		{
			"key": "address1-Delivery",
			"value": ""
		},
		{
			"key": "address2-Delivery",
			"value": ""
		},
		{
			"key": "addressType-Delivery",
			"value": ""
		},
		{
			"key": "city-Delivery",
			"value": ""
		},
		{
			"key": "code-Delivery",
			"value": ""
		},
		{
			"key": "code-Delivery-Encoded",
			"value": ""
		},
		{
			"key": "country-Delivery",
			"value": ""
		},
		{
			"key": "externalCode-Delivery",
			"value": ""
		},
		{
			"key": "name-Delivery",
			"value": ""
		},
		{
			"key": "status",
			"value": ""
		},
		{
			"key": "zipCode-Delivery",
			"value": ""
		},
		{
			"key": "parameterValueIdLedger",
			"value": ""
		},
		{
			"key": "cDimensionCode-C",
			"value": ""
		},
		{
			"key": "cDimensionCode-X",
			"value": ""
		},
		{
			"key": "supplierRealId",
			"value": ""
		},
		{
			"key": "suppliername",
			"value": ""
		},
		{
			"key": "organizationNumber",
			"value": ""
		},
		{
			"key": "accountnumber1",
			"value": ""
		},
		{
			"key": "cSupplierCodeARealId",
			"value": ""
		}
	]
}