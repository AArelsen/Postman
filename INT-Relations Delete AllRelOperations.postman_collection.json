{
	"info": {
		"_postman_id": "2dab1da1-137c-4a83-a590-69c239389834",
		"name": "INT-Relations Delete AllRelOperations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "BASIC",
			"item": [
				{
					"name": "CLEANUP",
					"item": [
						{
							"name": "Login",
							"item": [
								{
									"name": "IDP /connect/token INT - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        \r",
													"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        // console.log(pm.environment.get(\"TokenINT\"));\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"pm.environment.set(\"tryCounterLimit\", 10)\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeIntegration}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserIntegration}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassIntegration}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token PWA - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Init try\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"\r",
													"    // If we get a token, pass test and go directly to target\r",
													"\r",
													"    if (pm.response.json().access_token != null) {\r",
													"\r",
													"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"        console.log(\"tryCounter init \" + tryCounter);\r",
													"        postman.setNextRequest();\r",
													"        return;\r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"tryCounter\", 0);\r",
													"\r",
													"\r",
													"pm.globals.set(\"retries\", 0);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeController}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserController}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassController}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token AdminSemine  - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Try N times\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"    if (pm.response.code == 200) {\r",
													"        if (pm.response.json().access_token != null) {\r",
													"\r",
													"            // If we get a token, pass test and go directly to the next request\r",
													"\r",
													"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"            pm.environment.set(\"TokenAd\", pm.response.json().access_token);\r",
													"            postman.setNextRequest();\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
													"            return;\r",
													"        } else {\r",
													"            // Try again if tryCounter < tryCounterLimit\r",
													"            tryCounter++;\r",
													"            pm.globals.set(\"tryCounter\", tryCounter);\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"        }\r",
													"    } else {\r",
													"        // Try again if tryCounter < tryCounterLimit\r",
													"        tryCounter++;\r",
													"        pm.globals.set(\"tryCounter\", tryCounter);\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"    }\r",
													"} else {\r",
													"    // Fail after 10 tries\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
													"\r",
													"    postman.setNextRequest();\r",
													"}\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestScopeAdmin}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestUserAdmin}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestPassAdmin}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "IDP /connect/token AdminINTENG  - Try Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Try N times\r",
													"var tryCounter = pm.globals.get(\"tryCounter\");\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
													"    if (pm.response.code == 200) {\r",
													"        if (pm.response.json().access_token != null) {\r",
													"\r",
													"            // If we get a token, pass test and go directly to the next request\r",
													"\r",
													"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
													"            pm.environment.set(\"TokenINTENGAd\", pm.response.json().access_token);\r",
													"            postman.setNextRequest();\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token is gotten 200.\", function () { pm.response.to.have.status(200); });\r",
													"            return;\r",
													"        } else {\r",
													"            // Try again if tryCounter < tryCounterLimit\r",
													"            tryCounter++;\r",
													"            pm.globals.set(\"tryCounter\", tryCounter);\r",
													"            postman.setNextRequest(pm.info.requestId);\r",
													"        }\r",
													"    } else {\r",
													"        // Try again if tryCounter < tryCounterLimit\r",
													"        tryCounter++;\r",
													"        pm.globals.set(\"tryCounter\", tryCounter);\r",
													"        postman.setNextRequest(pm.info.requestId);\r",
													"    }\r",
													"} else {\r",
													"    // Fail after 10 tries\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
													"\r",
													"    postman.setNextRequest();\r",
													"}\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true,
											"connection": true,
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{Oauth2ClientSecret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{Oauth2ClientId}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{ApiTestIntegrationScopeAdmin}}",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{ApiTestIntegrationUserAdmin}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{ApiTestIntegrationPassAdmin}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{IDP}}/connect/token",
											"host": [
												"{{IDP}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Dimensions",
							"item": [
								{
									"name": "PWA c-parameters/ Get all parameterIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // pm.environment.set(\"aliasFound\", null);\r",
													"\r",
													"    // // Search for Alias by id\r",
													"    // for (x in jsonData) {\r",
													"    //     if (jsonData[x].id == pm.environment.get(\"aliasId\")) {\r",
													"    //         pm.environment.set(\"aliasFound\", jsonData[x].id);\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // pm.test(\"Alias found?\", function () {\r",
													"\r",
													"    //     pm.expect(pm.environment.get(\"aliasFound\")).to.be.not.null;\r",
													"    // });\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find PROJECTs ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find FixedAsset ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CategoryType ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find Interim\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : parameterIds found\", function () {\r",
													"        pm.expect(pm.environment.get(\"parameterIdInterim\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdTransactionType\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdCustomer\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdSupplier\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdProject\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdDimension\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdLedger\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdCategoryType\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdFixedAsset\")).to.be.not.empty;\r",
													"        pm.expect(pm.environment.get(\"parameterIdVAT\")).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"    );\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA c-parameters/condensed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"///////////// Find PROJECT parameter Id /////////////\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(jsonDataLength);\r",
													"\r",
													"    var i = 0;\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // Find INTERIM ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Interim\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find TRANSACTIONTYPE ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"TransactionType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdTransactionType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CUSTOMER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Customer\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCustomer\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find SUPPLIER ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Supplier\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdSupplier\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find PROJECTs ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Project\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdProject\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    \r",
													"    // Find NS ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"Ns\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find FixedAsset ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Ledger\" && jsonData[x].ledgerType == \"FixedAsset\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdFixedAsset\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    // Find Dimension ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Dimension\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdDimension\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // Find CategoryType ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"CategoryType\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdCategoryType\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"    // Find VAT ID\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].parameterType == \"Vat\" && jsonData[x].status == \"Active\") {\r",
													"            pm.environment.set(\"parameterIdVAT\", jsonData[x].id);\r",
													"        }\r",
													"    }\r",
													"    console.log(\r",
													"        \"parameterIdInterim           \" + pm.environment.get(\"parameterIdInterim\") + \"\\n\"\r",
													"        + \"parameterIdTransactionType   \" + pm.environment.get(\"parameterIdTransactionType\") + \"\\n\"\r",
													"        + \"parameterIdCustomer          \" + pm.environment.get(\"parameterIdCustomer\") + \"\\n\"\r",
													"        + \"parameterIdSupplier          \" + pm.environment.get(\"parameterIdSupplier\") + \"\\n\"\r",
													"        + \"parameterIdProject           \" + pm.environment.get(\"parameterIdProject\") + \"\\n\"\r",
													"        + \"parameterIdDimension         \" + pm.environment.get(\"parameterIdDimension\") + \"\\n\"\r",
													"        + \"parameterIdLedger            \" + pm.environment.get(\"parameterIdLedger\") + \"\\n\"\r",
													"        + \"parameterIdCategoryType      \" + pm.environment.get(\"parameterIdCategoryType\") + \"\\n\"\r",
													"        + \"parameterIdFixedAsset        \" + pm.environment.get(\"parameterIdFixedAsset\") + \"\\n\"\r",
													"        + \"parameterIdVAT               \" + pm.environment.get(\"parameterIdVAT\")\r",
													"\r",
													"\r",
													"\r",
													"    );\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												"condensed"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												},
												{
													"key": "code",
													"value": "PROJECT",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/ - Get all active dimensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var dimensionsDeleteArray = [];\r",
													"    // Find active dimensions\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionsDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray);\r",
													"    console.log(\"dimensionsDeleteArray : \" + dimensionsDeleteArray)\r",
													"\r",
													"\r",
													"// When there are no more dimensions left to clean, go to finish\r",
													"    if (dimensionsDeleteArray.length == 0) {\r",
													"        postman.setNextRequest(\"INT /health Cleanup ---FINISH---\");\r",
													"      console.log(\"INT /health Cleanup ---FINISH---\"); \r",
													"    }\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
													"\r",
													"// var codeDeleteArrayLength = codeDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < codeDeleteArrayLength) {\r",
													"//     pm.environment.set(\"codeDelete\", codeDeleteArray[i]);\r",
													"//     console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(pm.info.requestId); //Return to this request\r",
													"\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												""
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /dimensions/parents - Active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    var codeDeleteArray = [];\r",
													"    // Find invoiceId if any\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].isActive == true) {\r",
													"            codeDeleteArray[x] = jsonData[x].dimensionCode;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
													"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/parents",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"parents"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/ID/values - Get all active dimension values",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"\r",
													"var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionsDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionsDelete\", encodeURIComponent(dimensionsDeleteArray[i]));\r",
													"    // console.log(\"dimensionsDelete \" + i + \" \" + pm.environment.get(\"dimensionsDelete\"));\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    var jsonDataLength = jsonData.length;\r",
													"\r",
													"    // console.log(\"jsonDataLength: \" + jsonDataLength);\r",
													"\r",
													"    var dimensionValuesDeleteArray = [];\r",
													"\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].status == \"Active\") {\r",
													"            dimensionValuesDeleteArray.push(jsonData[x].code);\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.globals.set(\"i\", 0);\r",
													"\r",
													"    console.log(\"dimensionValuesDeleteArray \" + dimensionValuesDeleteArray);\r",
													"    pm.environment.set(\"dimensionValuesDeleteArray\", dimensionValuesDeleteArray);\r",
													"\r",
													"    // if (dimensionValuesDeleteArray.length == 0) {\r",
													"    //     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\")\r",
													"    // }\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "c-dimensionValues - Delete value from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var dimensionValuesDeleteArray = pm.environment.get(\"dimensionValuesDeleteArray\");\r",
													"\r",
													"var dimensionValuesDeleteArrayLength = dimensionValuesDeleteArray.length;\r",
													"\r",
													"var i = pm.globals.get(\"i\");\r",
													"if (i < dimensionValuesDeleteArrayLength) {\r",
													"    pm.environment.set(\"dimensionValuesDelete\", encodeURIComponent(dimensionValuesDeleteArray[i]));\r",
													"    console.log(\"dimensionValuesDelete \" + i + \" \" + pm.environment.get(\"dimensionValuesDelete\"));\r",
													"    i++\r",
													"    pm.globals.set(\"i\", i);\r",
													"    postman.setNextRequest(pm.info.requestId); // Go to this request\r",
													"} else {\r",
													"    postman.setNextRequest(); // Go to next request\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}/values/{{dimensionValuesDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}",
												"values",
												"{{dimensionValuesDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "c-dimension - Delete dimension from array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
													"});\r",
													"// postman.setNextRequest(\"dimensions-ListAll\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var dimensionsDeleteArray = pm.environment.get(\"dimensionsDeleteArray\");\r",
													"// // console.log(\"dimensionsDeleteArray \" + dimensionsDeleteArray);\r",
													"\r",
													"// var dimensionsDeleteArrayLength = dimensionsDeleteArray.length;\r",
													"\r",
													"// var i = pm.globals.get(\"i\");\r",
													"// if (i < dimensionsDeleteArrayLength) {\r",
													"    \r",
													"//     pm.environment.set(\"dimensionsDeleteArray\", dimensionsDeleteArray[i]);\r",
													"//     console.log(\"dimensionDelete \" + i + \" \" + pm.environment.get(\"dimensionDelete\"));\r",
													"//     i++\r",
													"//     pm.globals.set(\"i\", i);\r",
													"//     postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													"\r",
													"// }\r",
													"\r",
													"    postman.setNextRequest(\"INT /dimensions/ - Get all active dimensions\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{dimensionsDelete}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{dimensionsDelete}}"
											]
										},
										"description": "Delete a dimension value"
									},
									"response": []
								},
								{
									"name": "INT /health Cleanup ---FINISH---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 204\", function () {\r",
													"      pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}../../../health",
											"host": [
												"{{INT}}",
												"",
												""
											],
											"path": [
												"..",
												"..",
												"health"
											],
											"query": [
												{
													"key": "skip",
													"value": "90",
													"disabled": true
												},
												{
													"key": "take",
													"value": "30",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"isActive\",\"=\",true]",
													"disabled": true
												}
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "PWA /parameters/DIMENSION/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    // pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdDimension}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdDimension}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "INT /dimensions/codeDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\"));\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"dimensions",
										"{{codeDelete}}"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-dimension - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength );\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"} else {\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"dimensions",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/CUSTOMER/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdCustomer}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdCustomer}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-customers/A - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 405]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"customers",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/TRANSACTIONTYPE/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    // pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdTransactionType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdTransactionType}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-transactionTypes/A - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactionTypes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"transactionTypes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/PROJECT/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdProject}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdProject}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-projects - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"projects",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/CATEGORYTYPE/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdCategoryType}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdCategoryType}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-categorytypes- Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/categorytypes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"categorytypes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/INTERIM/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdInterim}}/values/devextreme?take=30&filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdInterim}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30"
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-ledger - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/ledger/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"ledger",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/NS/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find coode\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            // codeDeleteArray[x] = jsonData[x].code;\r",
											"            codeDeleteArray.push(jsonData[x].code);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdLedger}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-accountingcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/FIXEDASSET/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdFixedAsset}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdFixedAsset}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-fixedassets - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"fixedassets",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/VAT/values - Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"    pm.environment.unset(\"cProjectCodeDelete\");\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(\"jsonDataLength: \" + jsonDataLength);\r",
											"\r",
											"\r",
											"    pm.globals.set(\"i\", 0);\r",
											"\r",
											"\r",
											"    var codeDeleteArray = [];\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].isActive == true) {\r",
											"            codeDeleteArray[x] = jsonData[x].code;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // console.log(\"codeDeleteArray \" + codeDeleteArray);\r",
											"    pm.environment.set(\"codeDeleteArray\", codeDeleteArray);\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVAT}}/values/devextreme?filter=[\"isActive\",\"=\",true]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{parameterIdVAT}}",
										"values",
										"devextreme"
									],
									"query": [
										{
											"key": "skip",
											"value": "90",
											"disabled": true
										},
										{
											"key": "take",
											"value": "30",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "[\"isActive\",\"=\",true]"
										}
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "c-vatcodes - Delete Array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);\r",
											"});\r",
											"// postman.setNextRequest(\"dimensions-ListAll\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var codeDeleteArray = pm.environment.get(\"codeDeleteArray\");\r",
											"\r",
											"var codeDeleteArrayLength = codeDeleteArray.length;\r",
											"\r",
											"var i = pm.globals.get(\"i\");\r",
											"if (i < codeDeleteArrayLength) {\r",
											"    pm.environment.set(\"codeDelete\", encodeURIComponent(codeDeleteArray[i]));\r",
											"    console.log(\"codeDelete \" + i + \" \" + pm.environment.get(\"codeDelete\") + \" / \" + codeDeleteArrayLength);\r",
											"    i++\r",
											"    pm.globals.set(\"i\", i);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{codeDelete}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{codeDelete}}"
									]
								},
								"description": "Delete a dimension value"
							},
							"response": []
						}
					]
				},
				{
					"name": "--- Skip to END ---",
					"item": [
						{
							"name": "--- Skip to END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to END ---');\r",
											"postman.setNextRequest(\"--- END ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "rel-All Operations",
					"item": [
						{
							"name": "AccountingCodes",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT code\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"MVA kode æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/vatcodes/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"{{cVatCode-R1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-Interim-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cGLCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{cGLCode-R1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/dimensions A",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cDimensionCode-A', 'cDimensionCode-A-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{cDimensionCode-A}}\",\n    \"status\": \"Active\",\n    \"analyzeLines\": true,\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-A}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-A}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions"
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "<uuid>",
															"description": "(Required) Organization id of the organization to which the dimension is related."
														},
														{
															"key": "clientId",
															"value": "<uuid>",
															"description": "(Required) Client id of the client to which the dimension is related."
														}
													]
												},
												"description": "Inserts and updates a dimension for a given client."
											},
											"response": []
										},
										{
											"name": "/dimensions/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cDimensionValueCode-R1', 'R1-DimVal-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cDimensionValueCode-S1', 'S1-DimVal-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cDimensionValueCode-S2', 'S2-DimVal-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-R1}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"{{cDimensionValueCode-R1}}\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"{{cDimensionValueCode-R1}} æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-S1}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"{{cDimensionValueCode-S1}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cDimensionValueCode-S1}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-S2}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"{{cDimensionValueCode-S2}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cDimensionValueCode-S2}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-R1}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/S1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-S1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-S1}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-S2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-S2}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										}
									]
								},
								{
									"name": "/accountingcodes A - REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cGLCode-A', 'Acc-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"REQ-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-R1}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/accountingcodes/A - REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/REQ-{{cGLCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"REQ-{{cGLCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/accountingcodes A - SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cGLCode-A', 'Acc-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"SUG-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-S1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cGLCode-S2}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S2}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-S1}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-S2}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Suggestion\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Suggestions for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Forslag for momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/accountingcodes/A - SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/SUG-{{cGLCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"SUG-{{cGLCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/accountingcodes A - ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cGLCode-A', 'Acc-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"ANY-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"AnyValue\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/accountingcodes/A - ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/ANY-{{cGLCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"ANY-{{cGLCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/accountingcodes A - NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cGLCode-A', 'Acc-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"NA-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"NotApplicable\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation NotApplicable\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation NotApplicable æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/accountingcodes/A - NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/NA-{{cGLCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"NA-{{cGLCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/accountingcodes A - REQ Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cGLCode-A', 'Acc-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"REQ-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-R1}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								}
							]
						},
						{
							"name": "FixedAssets",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-R1}}\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"{{cVatCode-R1}} æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-S1}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cVatCode-S1}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-S2}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cVatCode-S2}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-Interim-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Inactive\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cGLCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{cGLCode-R1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/transactionTypes R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cTransactionType-R1', 'R1-TT-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cTransactionType-S1', 'S1-TT-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cTransactionType-S2', 'S2-TT-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cTransactionType-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required TransactionType 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet TransactionType 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cTransactionType-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Suggested TransactionType 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Foreslått TransactionType 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cTransactionType-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Suggested TransactionType 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Foreslått TransactionType 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"transactiontypes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/suppliers A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cSupplierCode-A', 'S-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cSupplierCode-A}}\",\n        \"status\": \"Active\",\n        \"name\": \"name-{{cSupplierCode-A}}\",\n        \"address\": {\n            \"street\": \"street-{{cSupplierCode-A}}\",\n            \"city\": \"city-{{cSupplierCode-A}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-A}}\",\n            \"phone\": \"phone-{{cSupplierCode-A}}\",\n            \"email\": \"email-{{cSupplierCode-A}}@useful.no\",\n            \"country\": \"NO\"\n        },\n        \"OrganizationNumber\": \"OrganizationNumber-{{cSupplierCode-A}}\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"No relations\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Ingen relasjoner æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										}
									]
								},
								{
									"name": "/fixedassets A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cFixedAssetCode-A', 'FA-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cFixedAssetCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.empty;\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{cFixedAssetCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets",
												"{{cFixedAssetCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/fixedassets A -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cFixedAssetCode-A', 'REQ-FA-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cFixedAssetCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cTransactionType-R1}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets/A -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{cFixedAssetCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets",
												"{{cFixedAssetCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/fixedassets A -- SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cFixedAssetCode-A', 'SUG-FA-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cFixedAssetCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-S1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cGLCode-S2}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S2}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cTransactionType-S1}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cTransactionType-S2}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Suggestion\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Suggestions for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Forslag for momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets/A -- SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(6);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{cFixedAssetCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets",
												"{{cFixedAssetCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/fixedassets A -- ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cFixedAssetCode-A', 'FA-ANY-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cFixedAssetCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"TransactionType\",\n                \"operation\": \"AnyValue\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets/A -- ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{cFixedAssetCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets",
												"{{cFixedAssetCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/fixedassets A -- NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cFixedAssetCode-A', 'NA-FA-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cFixedAssetCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"TransactionType\",\n                \"operation\": \"NotApplicable\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation NotApplicable\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation NotApplicable æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets/A -- NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets/{{cFixedAssetCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets",
												"{{cFixedAssetCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Projects",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-R1}}\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"{{cVatCode-R1}} æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-S1}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cVatCode-S1}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cVatCode-S2}}\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"{{cVatCode-S2}} æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/categoryType R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cCategoryType-R1', 'R1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cCategoryType-S1', 'S1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cCategoryType-S2', 'S2-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cCategoryType-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required CategoryType 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet CategoryType 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cCategoryType-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Suggested CategoryType 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Foreslått CategoryType 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cCategoryType-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Suggested CategoryType 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Foreslått CategoryType 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/categorytypes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"categorytypes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/categoryType/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/categoryTypes/{{cCategoryType-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"categoryTypes",
														"{{cCategoryType-R1}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "/projects A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cProjectCode-A', 'P-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cProjectCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/projects/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/{{cProjectCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects",
												"{{cProjectCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/projects A - REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cProjectCode-A', 'P-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"REQ-{{cProjectCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cCategoryType-R1}}\",\n                \"type\": \"CategoryType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/projects/A--REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/REQ-{{cProjectCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects",
												"REQ-{{cProjectCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/projects A - SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cProjectCode-A', 'P-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"SUG-{{cProjectCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-S1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cGLCode-S2}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S2}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cCategoryType-S1}}\",\n                \"type\": \"CategoryType\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cCategoryType-S2}}\",\n                \"type\": \"CategoryType\",\n                \"operation\": \"Suggestion\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Suggestions for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Forslag for momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/projects/A--SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(6);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/SUG-{{cProjectCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects",
												"SUG-{{cProjectCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/projects A - ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cProjectCode-A', 'P-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"ANY-{{cProjectCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"CategoryType\",\n                \"operation\": \"AnyValue\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/projects/A--ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/ANY-{{cProjectCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects",
												"ANY-{{cProjectCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/projects A - NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cProjectCode-A', 'P-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"NA-{{cProjectCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"CategoryType\",\n                \"operation\": \"NotApplicable\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation NotApplicable\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation NotApplicable æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/projects/A--NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(3);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/projects/NA-{{cProjectCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"projects",
												"NA-{{cProjectCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Customers",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code R1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"MVA Kode R1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code S1\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA Kode S1 æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code S2\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA Kode S2 æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-Acc-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-Acc-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-Acc-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										}
									]
								},
								{
									"name": "/customers A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cCustomerCode-A', 'C-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cCustomerCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"No relations\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Ingen relasjoner æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/customers/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.empty;\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/{{cCustomerCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers",
												"{{cCustomerCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/customers A - REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cCustomerCode-A', 'C-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"REQ-{{cCustomerCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/customers/A--REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(2);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/REQ-{{cCustomerCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers",
												"REQ-{{cCustomerCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/customers A - SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cCustomerCode-A', 'C-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"SUG-{{cCustomerCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-S1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cGLCode-S2}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S2}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Suggestions for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Forslag for momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/customers/A--SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(4);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/SUG-{{cCustomerCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers",
												"SUG-{{cCustomerCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/customers A - ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cCustomerCode-A', \"C-\" + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"ANY-{{cCustomerCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"AnyValue\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation AnyValue\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation AnyValue æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/customers/A--ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(2);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/ANY-{{cCustomerCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers",
												"ANY-{{cCustomerCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/customers A - NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cCustomerCode-A', 'C-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"NA-{{cCustomerCode-A}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"NotApplicable\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Rel operation NotApplicable\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Rel operation NotApplicable æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/customers/A--NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"        pm.expect(jsonData.relations).to.be.not.empty;\r",
													"        pm.expect(jsonData.relations.length).to.eql(2);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/customers/NA-{{cCustomerCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"customers",
												"NA-{{cCustomerCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Suppliers",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code R1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"MVA Kode R1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code S1\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA Kode S1 æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"VAT Code S2\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"MVA Kode S2 æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										}
									]
								},
								{
									"name": "/suppliers A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cSupplierCode-A', 'S-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cSupplierCode-A}}\",\n        \"status\": \"Active\",\n        \"name\": \"name-{{cSupplierCode-A}}\",\n        \"address\": {\n            \"street\": \"street-{{cSupplierCode-A}}\",\n            \"city\": \"city-{{cSupplierCode-A}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-A}}\",\n            \"phone\": \"phone-{{cSupplierCode-A}}\",\n            \"email\": \"email-{{cSupplierCode-A}}@useful.no\",\n            \"country\": \"NO\"\n        },\n        \"OrganizationNumber\": \"OrganizationNumber-{{cSupplierCode-A}}\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"No relations\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Ingen relasjoner æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/suppliers/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : relations OK\", function () {\r",
													"    //     pm.expect(jsonData.relations).to.be.empty;\r",
													"    // });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers",
												"{{cSupplierCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								},
								{
									"name": "/suppliers A - REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('cSupplierCode-A', 'S-' + moment().format(\"YYMM\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"REQ-{{cSupplierCode-A}}\",\n        \"defaultAccountingCode\": \"REQ-{{cGLCode-A}}\",\n        \"status\": \"Active\",\n        \"name\": \"name-{{cSupplierCode-A}}\",\n        \"address\": {\n            \"street\": \"street-{{cSupplierCode-A}}\",\n            \"city\": \"city-{{cSupplierCode-A}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-A}}\",\n            \"phone\": \"phone-{{cSupplierCode-A}}\",\n            \"email\": \"email-{{cSupplierCode-A}}@useful.no\",\n            \"country\": \"NO\"\n        },\n        \"OrganizationNumber\": \"OrganizationNumber-{{cSupplierCode-A}}\",\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Required for vatcode and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd momskode og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/suppliers/A--REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : defaultAccountingCode OK\", function () {\r",
													"        pm.expect(jsonData.defaultAccountingCode).to.be.not.empty;\r",
													"\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/REQ-{{cSupplierCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers",
												"REQ-{{cSupplierCode-A}}"
											]
										},
										"description": "Gets a fixed asset object based on the ERP code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Dimensions",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "/vatcodes - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Required\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S1}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Suggestion\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"Forslag æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-S2}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Suggestion\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"Forslag æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-R1', 'R1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S1', 'S1-Interim-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('cGLCode-S2', 'S2-Interim-' + moment().format(\"YYMM\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{cGLCode-R1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Required interim 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet interim 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S1}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 1 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cGLCode-S2}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Interim suggestion 2\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim forslag 2 æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/dimensions A",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cDimensionCode-A', 'cDimensionCode-A-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{cDimensionCode-A}}\",\n    \"status\": \"Active\",\n    \"analyzeLines\": true,\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-A}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-A}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions"
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "<uuid>",
															"description": "(Required) Organization id of the organization to which the dimension is related."
														},
														{
															"key": "clientId",
															"value": "<uuid>",
															"description": "(Required) Client id of the client to which the dimension is related."
														}
													]
												},
												"description": "Inserts and updates a dimension for a given client."
											},
											"response": []
										},
										{
											"name": "PWA /dimensions/parents - Find settingValueId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().data;\r",
															"    var parameterSettingId;\r",
															"    // Find settingsVlaueId if any\r",
															"    for (x in jsonData) {\r",
															"        if (jsonData[x].isActive == true) {\r",
															"            parameterSettingId = jsonData[x].id;\r",
															"        }\r",
															"    }\r",
															"    console.log(parameterSettingId);\r",
															"    pm.environment.set(\"parameterSettingId\", parameterSettingId);\r",
															"\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/parents",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"parents"
													],
													"query": [
														{
															"key": "skip",
															"value": "90",
															"disabled": true
														},
														{
															"key": "take",
															"value": "30",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[\"isActive\",\"=\",true]",
															"disabled": true
														}
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "PWA parameters / Dimensions_A_ID / SettingValues",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cDimensionCode-A', 'cDimensionCode-A-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"key\": \"Ai_Enabled\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Ai_Threshold\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"AI_ShouldOverwrite\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Virtual_Dimension_Mapping\",\n        \"value\": \"\"\n    },\n    {\n        \"key\": \"Extractor_ExtractFromHeader\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_ExtractFromLines\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_OverrideLineMatch\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_AnalyseBy_Code\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_AnalyseBy_Aliases\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_AnalyseBy_Descriptions\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_MinimumChars\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"Extractor_MaximumChars\",\n        \"value\": 0\n    },\n    {\n        \"key\": \"Extractor_IgnoreWords\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_DoNotSplitOnDash\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_ShouldOverwrite\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_DoNotAddToExistingSuggestions\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_UseSingleExactCodeMatch\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_UseSingleExactAliasMatch\",\n        \"value\": true\n    },\n    {\n        \"key\": \"Extractor_AutoApplyLowestCode\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_AutoApplyHighestCode\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Extractor_AutoApplyDescriptionExactMatch\",\n        \"value\": null\n    },\n    {\n        \"key\": \"Priority_OnApply\",\n        \"value\": 1\n    }\n]"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterSettingId}}/settingvalues",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"parameters",
														"{{parameterSettingId}}",
														"settingvalues"
													]
												},
												"description": "Inserts and updates a dimension for a given client."
											},
											"response": []
										},
										{
											"name": "/dimensions/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values - R1,S1,S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cDimensionValueCode-R1', 'R1-DimVal-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cDimensionValueCode-S1', 'S1-DimVal-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cDimensionValueCode-S2', 'S2-DimVal-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-R1}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Required\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevd æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-S1}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Suggestion\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"Forslag æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    },\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionValueCode-S2}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Suggestion\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"Forslag æøå\",\n                \"languageCode\": \"0\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/R1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-R1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-R1}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/S1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-S1}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-S1}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										},
										{
											"name": "/dimensions/A/values/S2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.variables.set(\"skipNextTest\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionValueCode-S2}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionValueCode-S2}}"
													]
												},
												"description": "Gets a dimension value based on the dimension code and the dimension value code."
											},
											"response": []
										}
									]
								},
								{
									"name": "/dimensions B",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cDimensionCode-B', 'cDimensionCode-B-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{cDimensionCode-B}}\",\n    \"status\": \"Active\",\n    \"analyzeLines\": true,\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-B}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-B}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions"
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "<uuid>",
													"description": "(Required) Organization id of the organization to which the dimension is related."
												},
												{
													"key": "clientId",
													"value": "<uuid>",
													"description": "(Required) Client id of the client to which the dimension is related."
												}
											]
										},
										"description": "Inserts and updates a dimension for a given client."
									},
									"response": []
								},
								{
									"name": "/dimensions/B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions C",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cDimensionCode-C', 'cDimensionCode-C-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{cDimensionCode-C}}\",\n    \"status\": \"Active\",\n    \"analyzeLines\": true,\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-C}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-C}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions"
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "<uuid>",
													"description": "(Required) Organization id of the organization to which the dimension is related."
												},
												{
													"key": "clientId",
													"value": "<uuid>",
													"description": "(Required) Client id of the client to which the dimension is related."
												}
											]
										},
										"description": "Inserts and updates a dimension for a given client."
									},
									"response": []
								},
								{
									"name": "/dimensions/C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-C}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-C}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions/C/values/C -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cDimensionValueCode-C', 'DimVal-C-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-C}}\",\n        \"code\": \"REQ-{{cDimensionValueCode-C}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Required relation\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevet relasjon æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"relations\": []\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-C}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-C}}",
												"values"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/dimensions/C/values/C -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-C}}/values/REQ-{{cDimensionValueCode-C}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-C}}",
												"values",
												"REQ-{{cDimensionValueCode-C}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cDimensionValueCode-B', 'DimVal-B-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"code\": \"REQ-{{cDimensionValueCode-B}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Required relations\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Påkrevde relasjoner æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-R1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cVatCode-R1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-R1}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"REQ-{{cDimensionValueCode-C}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-C}}\",\n                \"operation\": \"Requirement\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- REQ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values/REQ-{{cDimensionValueCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"REQ-{{cDimensionValueCode-B}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cDimensionValueCode-B', 'DimVal-B-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"code\": \"SUG-{{cDimensionValueCode-B}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Suggested relations\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Forslag til relasjoner æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"relations\": [\n            {\n                \"code\": \"{{cGLCode-S1}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cGLCode-S2}}\",\n                \"type\": \"Interim\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S1}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cVatCode-S2}}\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-S1}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Suggestion\"\n            },\n            {\n                \"code\": \"{{cDimensionValueCode-S2}}\",\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"Suggestion\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- SUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values/SUG-{{cDimensionValueCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"SUG-{{cDimensionValueCode-B}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cDimensionValueCode-B', 'DimVal-B-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"code\": \"ANY-{{cDimensionValueCode-B}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"A code must be selected\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"En konto må velges æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"AnyValue\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"AnyValue\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- ANY",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values/ANY-{{cDimensionValueCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"ANY-{{cDimensionValueCode-B}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.environment.set('cDimensionValueCode-B', 'DimVal-B-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-B}}\",\n        \"code\": \"NA-{{cDimensionValueCode-B}}\",\n        \"status\": \"Active\",\n        \"analyzeLines\": true,\n        \"description\": [\n            {\n                \"description\": \"Codes are not selectable\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Ingen kontoer kan velges æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"relations\": [\n            {\n                \"code\": null,\n                \"type\": \"VatCode\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Interim\",\n                \"operation\": \"NotApplicable\"\n            },\n            {\n                \"code\": null,\n                \"type\": \"Dimension\",\n                \"typeCode\": \"{{cDimensionCode-A}}\",\n                \"operation\": \"NotApplicable\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/dimensions/B/values/B -- NA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.variables.set(\"skipNextTest\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-B}}/values/NA-{{cDimensionValueCode-B}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-B}}",
												"values",
												"NA-{{cDimensionValueCode-B}}"
											]
										},
										"description": "Gets a dimension value based on the dimension code and the dimension value code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Setup",
							"item": [
								{
									"name": "Start",
									"item": [
										{
											"name": "IDP /connect/token INT - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"    \r",
															"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        // console.log(pm.environment.get(\"TokenINT\"));\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"pm.environment.set(\"tryCounterLimit\", 10)\r",
															"\r",
															"pm.globals.set(\"retries\", 0);\r",
															"\r",
															"// var done = false;\r",
															"// if (pm.environment.get(\"ENV\").length < 5 ) {\r",
															"//     pm.environment.set(\"ENV\", pm.environment.get(\"ENV\") + \" / E2E-Invoice-Basic /\");\r",
															"//     done = true;\r",
															"// }\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ScopeIntegration}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{UserIntegration}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{PassIntegration}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "IDP /connect/token PWA - Try Init",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Init try\r",
															"var tryCounter = pm.globals.get(\"tryCounter\");\r",
															"// console.log(pm.response.json());\r",
															"\r",
															"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
															"\r",
															"    // If we get a token, pass test and go directly to target\r",
															"\r",
															"    if (pm.response.json().access_token != null) {\r",
															"\r",
															"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
															"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
															"        console.log(\"tryCounter init \" + tryCounter);\r",
															"        postman.setNextRequest();\r",
															"        return;\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"// Wait 5 secs before the next try\r",
															"(function myLoop(i) {\r",
															"    setTimeout(function () {\r",
															"        console.log('sleep ' + i);\r",
															"        if (--i) myLoop(i);\r",
															"    }, 1000)\r",
															"})(5);      "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"tryCounter\", 0);\r",
															"\r",
															"\r",
															"pm.globals.set(\"retries\", 0);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ScopeController}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{UserController}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{PassController}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Start",
									"item": [
										{
											"name": "IDP /connect/token {{UserIntegration}}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"Token\", pm.response.json().access_token);   pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {     pm.response.to.have.status(200); }); "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"accept": true,
													"accept-encoding": true,
													"connection": true,
													"user-agent": true
												}
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{Oauth2ClientSecret}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{Oauth2ClientId}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json",
														"disabled": true
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "{{ScopeIntegration}}",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{UserIntegration}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{PassIntegration}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{IDP}}/connect/token",
													"host": [
														"{{IDP}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "--- END ---",
					"item": [
						{
							"name": "--- END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"invoiceType : \" + pm.environment.get(\"invoiceType\"))\r",
											"console.log('/// END ///');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenINT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 20 seconds\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(20000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "9d36b1ac-142a-4116-9a21-e944dc63ee52",
			"key": "cTransactionTypeCode-R1",
			"value": ""
		},
		{
			"id": "f852ed59-d252-4533-940d-a1ee664cc1cf",
			"key": "cTransactionTypeCode-R2",
			"value": ""
		},
		{
			"id": "4763a444-7583-446d-9689-a8d22ff6c299",
			"key": "cTransactionTypeCode-S1",
			"value": ""
		},
		{
			"id": "bc713832-9885-43b2-a364-5002c9b3a217",
			"key": "cTransactionTypeCode-S2",
			"value": ""
		},
		{
			"id": "2adf645a-3a19-4320-be4a-ad907c118a74",
			"key": "cTransactionTypeCode-S3",
			"value": ""
		},
		{
			"id": "4f3cb7ed-aef0-462b-b1b2-8e6a6b7e108b",
			"key": "cFixedAssetCode-REQ-A",
			"value": ""
		},
		{
			"id": "dd9cb301-e859-440f-964e-8d4efde86b3f",
			"key": "cFixedAssetCode-REQ-B",
			"value": ""
		},
		{
			"id": "b8119ddc-f02a-4bf1-a3c9-51d30711eb71",
			"key": "cFixedAssetCode-SUG",
			"value": ""
		},
		{
			"id": "2ac3b72c-4c1f-4a3d-8497-324437940b8f",
			"key": "cFixedAssetCode-Blank",
			"value": ""
		},
		{
			"id": "e32f4b8a-bf8e-47ee-a862-5a4601081e59",
			"key": "cFixedAssetCode-Mix",
			"value": ""
		},
		{
			"id": "0515ffb5-3dc4-4e1c-b880-4f3082370c50",
			"key": "cVatCode-R1",
			"value": ""
		},
		{
			"id": "430cf68c-104a-4c3c-a6c9-94cdf9de1dfd",
			"key": "cVatCode-S1",
			"value": ""
		},
		{
			"id": "d5ad8834-ac15-4b68-b6b6-7f4a7fb9fabf",
			"key": "cVatCode-S2",
			"value": ""
		},
		{
			"id": "5cdb44b1-046f-4500-b8a1-d12f7183254a",
			"key": "cGLCode-R1",
			"value": ""
		},
		{
			"id": "c197808e-539b-4eed-86e1-1e63988188a3",
			"key": "cGLCode-S1",
			"value": ""
		},
		{
			"id": "5c2a36b3-c9f3-48cd-9856-c65c660b2c5d",
			"key": "cGLCode-S2",
			"value": ""
		},
		{
			"id": "1a03f4ee-cf9f-4e4c-97f5-6356d6652541",
			"key": "cDimensionCode-A",
			"value": ""
		}
	]
}