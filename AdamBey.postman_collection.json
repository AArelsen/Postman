{
	"info": {
		"_postman_id": "4b098e4c-59ed-4de3-827d-01def9302237",
		"name": "E2E-Invoice-Basic-Adam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "IDP /connect/token INT - Try Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Init try\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"\r",
									"    // If we get a token, pass test and go directly to target\r",
									"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
									"    if (pm.response.json().access_token != null) {\r",
									"\r",
									"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"        \r",
									"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"        console.log(\"tryCounter init \" + tryCounter);\r",
									"        postman.setNextRequest();\r",
									"        // console.log(pm.environment.get(\"TokenINT\"));\r",
									"        return;\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"tryCounter\", 0);\r",
									"pm.environment.set(\"tryCounterLimit\", 10)\r",
									"\r",
									"pm.globals.set(\"retries\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{Oauth2ClientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{Oauth2ClientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{ScopeIntegration}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{UserIntegration}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PassIntegration}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{IDP}}/connect/token",
							"host": [
								"{{IDP}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "IDP /connect/token PWA - Try Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Init try\r",
									"var tryCounter = pm.globals.get(\"tryCounter\");\r",
									"// console.log(pm.response.json());\r",
									"\r",
									"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
									"\r",
									"    // If we get a token, pass test and go directly to target\r",
									"\r",
									"    if (pm.response.json().access_token != null) {\r",
									"\r",
									"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
									"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
									"        console.log(\"tryCounter init \" + tryCounter);\r",
									"        postman.setNextRequest();\r",
									"        return;\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"tryCounter\", 0);\r",
									"\r",
									"\r",
									"pm.globals.set(\"retries\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{Oauth2ClientSecret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{Oauth2ClientId}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{ScopeController}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{UserController}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PassController}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{IDP}}/connect/token",
							"host": [
								"{{IDP}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "INT - Supplier A",
			"item": [
				{
					"name": "INT /suppliers FA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
									"pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
									"\r",
									"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
									"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-FA}}\",\n            \"city\": \"city-{{cSupplierCode-FA}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-FA}}\",\n            \"phone\": \"phone-{{cSupplierCode-FA}}\",\n            \"email\": \"email-{{cSupplierCode-FA}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-FA}}\",\n        \"name\": \"FixedAsset-{{cSupplierCode-FA}}\",\n        \"organizationNumber\": \"{{cSupplierCode-FA}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-FA}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-FA}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-FA}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-FA}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-FA}}\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"suppliers"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "<uuid>",
									"type": "string",
									"description": "(Required) Organization id of which this suppliers are related to."
								},
								{
									"key": "clientId",
									"value": "<uuid>",
									"type": "string",
									"description": "(Required) Client id of which this suppliers are related to."
								}
							]
						},
						"description": "Inserts and updates a set of suppliers for a client"
					},
					"response": []
				},
				{
					"name": "INT /suppliers/FA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-FA}}",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"suppliers",
								"{{cSupplierCode-FA}}"
							]
						},
						"description": "Gets a supplier for a given client"
					},
					"response": []
				},
				{
					"name": "/transactiontypes AI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"code\": \"TT-AI\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype AI\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype AI\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"transactiontypes"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "/fixedassets AI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"code\": \"FA-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"TT-AI\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed TT\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast TT æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"fixedassets"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "/transactiontypes Manual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									"pm.environment.set('TT_Manual', \"TT-M-\" + moment().format(\"YYMMDD-HHmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"code\": \"{{TT_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype 1\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"transactiontypes"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "/transactiontypes All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									"pm.environment.set('TT_Manual', \"TT-M-\" + moment().format(\"YYMMDD-HHmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"transactiontypes"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "/fixedassets Manual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									"pm.environment.set('FA_Manual', \"FA-M-\" + moment().format(\"YYMMDD-HHmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"code\": \"{{FA_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{TT_Manual}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed Asset\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Eiendel æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"fixedassets"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "/fixedassets AIl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"fixedassets"
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				}
			]
		},
		{
			"name": "Invoices",
			"item": [
				{
					"name": "INT /invoices - Cost Minimum - Init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require(\"moment\");\r",
									"\r",
									"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
									"\r",
									"pm.environment.set(\"invoiceCount\", 1);\r",
									"\r",
									"console.log(pm.environment.get(\"invoiceCount\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}"
							]
						},
						"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
					},
					"response": []
				},
				{
					"name": "INT /invoices - Cost Minimum - Repeat N",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require(\"moment\");\r",
									"var invoiceCount;\r",
									"\r",
									"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
									"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
									"\r",
									"invoiceCount++;\r",
									"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
									"\r",
									"console.log(pm.environment.get(\"invoiceNumber\"));\r",
									"\r",
									"\r",
									"// Invoice dates\r",
									"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
									"pm.environment.set(\"cInvoiceDate\", moment());\r",
									"pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
									"\r",
									"pm.environment.set(\"dateStart\", \"11.11.2020\");\r",
									"pm.environment.set(\"dateEnd\", \"12.02.2021\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
									"}\r",
									"\r",
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
									"console.log(pm.response.json());\r",
									"\r",
									"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"} else {\r",
									"    postman.setNextRequest(); // Just move on to the next request\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-FA}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"FixedAsset-{{cSupplierCode-FA}}\",\r\n        \"Code\": \"{{cSupplierCode-FA}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-FA}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-FA}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-FA}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Dimension Value:  {{cDimensionCodeValue-A}}\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{cInvoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices"
							]
						},
						"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
					},
					"response": []
				},
				{
					"name": "--- Sleep 5 sec---",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Wait 5 secs before the next try\r",
									"(function myLoop(i) {\r",
									"    setTimeout(function () {\r",
									"        console.log('sleep ' + i);\r",
									"        if (--i) myLoop(i);\r",
									"    }, 1000)\r",
									"})(5);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/health",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoices/ID/headers - Poll available state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"     pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
									"    pm.environment.set(\"sublierId\", pm.response.json().seller.id);\r",
									"     pm.environment.set(\"sublierName\", pm.response.json().seller.name);\r",
									"}\r",
									"console.log(\"SublierId is: \" + pm.environment.get(\"sublierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \"SublierName is : \" +  pm.environment.get(\"sublierName\"));\r",
									"\r",
									"\r",
									"function sleep(milisecond) {\r",
									"    var date = Date.now();\r",
									"    while ((date + milisecond) > Date.now());\r",
									"}\r",
									"\r",
									"var retries = pm.globals.get(\"retries\");\r",
									"\r",
									"\r",
									"if (retries < 15) { // Try every 20s for 5 minutes\r",
									"    if (pm.response.code == 200) {\r",
									"        var jsonData = pm.response.json();\r",
									"        var i = 0;\r",
									"        if (typeof jsonData == \"object\") {\r",
									"\r",
									"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
									"\r",
									"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
									"                    pm.expect(jsonData.type).to.eql(\"Invoice\");\r",
									"                    pm.expect(jsonData.documentType).to.eql(\"CostInvoice\");\r",
									"                    pm.expect(jsonData.invoicePurchaseSummary).to.be.null;\r",
									"                    pm.expect(jsonData.isPurchaseInvoice).to.be.false;\r",
									"                });\r",
									"                postman.setNextRequest();\r",
									"                pm.globals.set(\"retries\", 0);\r",
									"\r",
									"                console.log(jsonData);\r",
									"\r",
									"            } else {\r",
									"                retries++;\r",
									"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
									"                postman.setNextRequest(pm.info.requestId);\r",
									"                console.log(jsonData);\r",
									"                sleep(20000); // Wait 20s and then try again\r",
									"            }\r",
									"\r",
									"        } else {\r",
									"            retries++;\r",
									"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
									"            postman.setNextRequest(pm.info.requestId);\r",
									"            console.log(jsonData);\r",
									"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
									"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
									"            });\r",
									"            sleep(20000); // Wait 20s and then try again\r",
									"        }\r",
									"\r",
									"    } else {\r",
									"        retries++;\r",
									"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
									"        postman.setNextRequest(pm.info.requestId);\r",
									"        console.log(pm.response.json());\r",
									"        sleep(20000); // Wait 20s and then try again\r",
									"    }\r",
									"} else {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
									"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
									"    });\r",
									"    console.log(\"retries: \" + retries)\r",
									"    postman.setNextRequest(\"--- Skip to END ---\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"headers"
							]
						},
						"description": "Gets details for an invoice.\r\nTODO Get all details"
					},
					"response": []
				},
				{
					"name": "INT /invoices - seeInvoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice is found. \", function () {",
									"        pm.expect(jsonData.invoiceNumber).to.eql(pm.environment.get(\"invoiceNumber\"));",
									"        pm.expect(jsonData.supplierParty.name).to.eql(pm.environment.get(\"sublierName\"));",
									"        pm.expect(jsonData.invoiceSourceType).to.eql(\"Api\");",
									"        ",
									"    });",
									"",
									"var jsonDataAL = pm.response.json().invoiceLines;",
									"   console.log(jsonDataAL);",
									"",
									"   var jsonDataAL1;",
									"    ",
									"    var i;",
									"    for (i in jsonDataAL) {",
									"        if (jsonDataAL[i].lineNumber == 1) {",
									"        var jsonDataAL1 =jsonDataAL[i];",
									"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line is found. \", function () {",
									"        pm.expect(jsonDataAL1.lineNumber).to.eql(1);",
									"    });",
									"    }  ",
									"    if (jsonDataAL[i].lineNumber == 2) {",
									"        var jsonDataAL1 =jsonDataAL[i];",
									"        pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line is found. \", function () {",
									"        pm.expect(jsonDataAL1.lineNumber).to.eql(2);",
									"    });",
									"    }  ",
									"    }",
									"       console.log(\"lineNumber is \" + pm.environment.get(\"lineNumber\"));",
									"     ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}"
							]
						},
						"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeLine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"//     pm.environment.set(\"parameterId\", pm.response.json().invoiceLines[0].accountingParameters[0].parameterId);\r",
									"// }\r",
									"\r",
									" var jsonDataAL = pm.response.json().invoiceLines;\r",
									"   console.log(jsonDataAL);\r",
									"    var jsonDataAL1;\r",
									"    var i;\r",
									"\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].lineNumber == 1) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"cInvoiceLineId-1\", jsonDataAL1.invoiceLineId);\r",
									"    }  \r",
									"        if (jsonDataAL[i].lineNumber == 2) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"            pm.environment.set(\"cInvoiceLineId-2\", jsonDataAL1.invoiceLineId);\r",
									"    }\r",
									"    }\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixedassets seeAIlFixsedAsset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonDataAL = pm.response.json().data[0];\r",
									"   console.log(jsonDataAL);\r",
									"\r",
									"    var jsonDataAL1;\r",
									"\r",
									"    var i;\r",
									"\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].description == \"Fast TT æøå\" && jsonDataAL[i].code == \"FA-AI\") {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"            pm.environment.set(\"parameterId\", \"jsonDataAL1[i].parameterId\");\r",
									"            pm.environment.set(\"parameterValueId\", \"jsonDataAL1[i].parameterValueId\");\r",
									"    }\r",
									"    }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterId}}/values/devextreme?skip=0&take=30&requireTotalCount=true&_=1613733718218",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"parameters",
								"{{parameterId}}",
								"values",
								"devextreme"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "take",
									"value": "30"
								},
								{
									"key": "requireTotalCount",
									"value": "true"
								},
								{
									"key": "_",
									"value": "1613733718218"
								}
							]
						},
						"description": "Inserts and updates transaction types"
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - choiceAccountType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if (pm.response.code == 200) {",
									"//     pm.environment.set(\"parameterId\", pm.response.json().invoiceLines[0].accountingParameters[0].parameterId);",
									"//    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);",
									"// }",
									"// console.log(pm.environment.get(\"parameterId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": null,\n    \"quantity\": 1,\n    \"unitPrice\": 1,\n    \"netAmount\": 1,\n    \"vatRate\": 15,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-14T22:27:39.848Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 20,\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterId}}\",\n    \"accountingParameters\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-2}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-2}}"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - putAccountAndValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"",
									"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
									"   console.log(jsonDataAL);",
									"",
									"    var jsonDataAL1;",
									"",
									"    var i;",
									"",
									"    for (i in jsonDataAL) {",
									"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == \"FA-AI\") {",
									"            var jsonDataAL1 =jsonDataAL[i];",
									"        pm.environment.set(\"parameterId\", jsonDataAL1.parameterId);",
									"        pm.environment.set(\"cAccountTypeParameterId\", jsonDataAL1.accountTypeParameterId);",
									"        pm.environment.set(\"parameterValueId\", jsonDataAL1.parameterValueId);",
									"        pm.environment.set(\"parameterTypeId\", jsonDataAL1.parameterTypeId);",
									"        pm.environment.set(\"code\", jsonDataAL1.code);",
									"        pm.environment.set(\"description\", jsonDataAL1.description);",
									"    }",
									"    }",
									"    console.log(pm.environment.get(\"description\"));",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");",
									"",
									"// pm.environment.set(\"parameterValueId\", \"9276bcb4-3584-47ac-a010-54591ddddd40\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": null,\n    \"quantity\": 1,\n    \"unitPrice\": 1,\n    \"netAmount\": 1,\n    \"vatRate\": 15,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-14T22:27:39.848Z\",\n    \"startPeriodMonth\": 12,\n    \"startPeriodYear\": 21,\n    \"totalPeriod\": 4,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterId}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterId}}\",\n            \"parameterValueId\": \"{{parameterValueId}}\"\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-2}}?query={{cAccountingCode-FA}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-2}}"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-FA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeAccountTypeAndAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//\r",
									"    //  Find ALs\r",
									"    //\r",
									"    console.log( pm.environment.get(\"description\"));\r",
									"   const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;\r",
									"   console.log(jsonDataAL);\r",
									"\r",
									"    var jsonDataAL1;\r",
									"\r",
									"    var i;\r",
									"\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == \"FA-AI\") {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
									"        pm.expect(jsonDataAL1.description).to.eql(pm.environment.get(\"description\"));\r",
									"        pm.expect(jsonDataAL1.code).to.eql(pm.environment.get(\"code\"));\r",
									"});\r",
									"    }\r",
									"    }\r",
									"console.log(jsonDataAL1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     var jsonData = pm.response.json().invoiceLines[0].accountingParameters[0];\r",
									"//     console.log(jsonData);\r",
									"\r",
									"\r",
									"//     ///////// Check account type, account and transaksjon type /////////\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
									"//         //pm.expect(jsonData.lineNumber).to.eql(3);\r",
									"//         pm.expect(jsonData.parameterId).to.eql(pm.environment.get(\"parameterId\"));\r",
									"//         pm.expect(jsonData.parameterValueId).to.eql(pm.environment.get(\"parameterValueId\"));\r",
									"//         pm.expect(jsonData.parameterTypeId).to.eql(pm.environment.get(\"parameterTypeId\"));\r",
									"//         pm.expect(jsonData.code).to.eql(pm.environment.get(\"code\"));\r",
									"//         pm.expect(jsonData.description).to.eql(pm.environment.get(\"description\"));\r",
									"//     });\r",
									"// }\r",
									"\r",
									"    // //\r",
									"    // //  Find ALs\r",
									"    // //\r",
									"\r",
									"    // const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
									"\r",
									"    // var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
									"\r",
									"    // var i\r",
									"\r",
									"    // for (i in jsonDataAL) {\r",
									"    //     if (jsonDataAL[i].lineType == \"HeaderLine\") {\r",
									"    //         jsonDataALHeaderLine = pm.response.json().invoiceAccountingLines[i];\r",
									"    //         jsonDataALHeaderLineParams = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
									"    //     }\r",
									"    //     if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
									"    //         jsonDataAL1 = pm.response.json().invoiceAccountingLines[i];\r",
									"    //         jsonDataALP1 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
									"\r",
									"    //     }\r",
									"    //     if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
									"    //         jsonDataAL2 = pm.response.json().invoiceAccountingLines[i];\r",
									"    //         jsonDataALP2 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
									"    //     }\r",
									"    // }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-2}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "InvoiceLine",
			"item": [
				{
					"name": "INT clients/ID/accountingcodes makeAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// pm.environment.set(\"count\", 5);\r",
									"\r",
									"console.log(\"Account is creted!\");\r",
									"\r",
									"pm.environment.set(\"firstRequest\", pm.info.requestName);\r",
									"\r",
									"console.log(pm.environment.get(\"firstRequest\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.environment.set('cAccountingCode-FA', \"FA-\" + moment().format(\"YYMM\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TokenINT}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"code\":\"{{cAccountingCode-FA}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cAccountingCode-FA}}\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{cAccountingCode-FA}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
						},
						"url": {
							"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
							"host": [
								"{{INT}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"accountingcodes"
							],
							"variable": [
								{
									"key": "organizationId",
									"value": "<uuid>",
									"type": "string",
									"description": "(Required) Organization id of the organization to which the accounting codes are related."
								},
								{
									"key": "clientId",
									"value": "<uuid>",
									"type": "string",
									"description": "(Required) Client id of the client to which the accounting codes are related."
								}
							]
						},
						"description": "Inserts and updates accounting codes for a given client"
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - makeLIne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.environment.set(\"cInvoiceLineId-1\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
									"}\r",
									"\r",
									"var jsonDataAL = pm.response.json().invoiceLines;\r",
									"   console.log(jsonDataAL);\r",
									"\r",
									"   var jsonDataAL1;\r",
									"    \r",
									"    var i;\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].lineNumber == 1) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);\r",
									"             pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"        pm.expect(jsonDataAL1.lineNumber).to.eql(pm.variables.get(\"lineNumber\"));\r",
									"    });\r",
									"    }\r",
									"    }\r",
									"       console.log(\"lineNumber is : \" +pm.environment.get(\"lineNumber\"));\r",
									"       console.log(\"Line is creted.\");\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     var jsonData = pm.response.json().invoiceLines[0];\r",
									"\r",
									"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"//         pm.expect(jsonData.lineNumber).to.eql(pm.variables.get(\"lineNumber\"));\r",
									"//     });\r",
									"// }    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//==========//For create Lopp//==================\r",
									"// var currentCount = pm.environment.get(\"count\")\r",
									"// if (currentCount > 0){\r",
									"//  currentCount = currentCount -1 ;\r",
									"//  pm.environment.set(\"count\", currentCount);\r",
									"//     postman.setNextRequest(pm.info.requestId);\r",
									"// } else {\r",
									"//     postman.setNextRequest();\r",
									"// }"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeLine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"//     pm.environment.set(\"parameterId\", pm.response.json().invoiceLines[0].accountingParameters[1].parameterId);\r",
									"//    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
									"// }\r",
									"\r",
									"var jsonDataAL = pm.response.json().invoiceLines;\r",
									"   console.log(jsonDataAL);\r",
									"    var jsonDataAL1;\r",
									"    var i;\r",
									"\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].lineNumber == 1) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"cInvoiceLineId-1\", jsonDataAL1.invoiceLineId);\r",
									"    }  \r",
									"    }\r",
									"    console.log(pm.environment.get(\"cInvoiceLineId\"));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /values/condensed 1 Ledger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//////// Set Environment Variables /////////\r",
									"if (pm.response.code == 200) {\r",
									"    var jsonData = pm.response.json()[0];\r",
									"    pm.environment.set(\"parameterValueIdLedger\", jsonData.parameterValueId);\r",
									"     pm.environment.set(\"parameterIdLedger\", jsonData.parameterId);\r",
									"}\r",
									"\r",
									"console.log(\"Account is : \" + pm.environment.get(\"cAccountingCode-FA\"));\r",
									"\r",
									"\r",
									"// console.log(pm.environment.get(\"parameterValueIdLedger\"));\r",
									"// console.log(pm.environment.get(\"parameterIdLedger\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/condensed?query={{cAccountingCode-FA}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"parameters",
								"{{parameterIdLedger}}",
								"values",
								"condensed"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "Adam-18",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-FA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - putAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"",
									"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
									"   console.log(jsonDataAL);",
									"",
									"    var jsonDataAL1;",
									"",
									"    var i;",
									"",
									"    for (i in jsonDataAL) {",
									"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == \"FA-AI\") {",
									"            var jsonDataAL1 =jsonDataAL[i];",
									"        pm.environment.set(\"parameterId\", jsonDataAL1.parameterId);",
									"        pm.environment.set(\"cAccountTypeParameterId\", jsonDataAL1.accountTypeParameterId);",
									"        pm.environment.set(\"parameterValueId\", jsonDataAL1.parameterValueId);",
									"        pm.environment.set(\"parameterTypeId\", jsonDataAL1.parameterTypeId);",
									"        pm.environment.set(\"code\", jsonDataAL1.code);",
									"        pm.environment.set(\"description\", jsonDataAL1.description);",
									"    }",
									"    }",
									"    console.log(pm.environment.get(\"description\"));",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");",
									"",
									"// pm.environment.set(\"parameterValueId\", \"9276bcb4-3584-47ac-a010-54591ddddd40\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": null,\n    \"quantity\": 2,\n    \"unitPrice\": 2,\n    \"netAmount\": 2,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-17T14:08:28.595Z\",\n    \"startPeriodMonth\": 12,\n    \"startPeriodYear\": 22,\n    \"totalPeriod\": 4,\n    \"gtin\": null,\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-1}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-1}}"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeChanging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var jsonData = pm.response.json().invoiceLines[0];\r",
									"\r",
									"\r",
									"    ///////// Check periods applied /////////\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
									"        pm.expect(jsonData.startPeriodMonth).to.eql(12);\r",
									"        pm.expect(jsonData.totalPeriod).to.eql(4);\r",
									"        pm.expect(jsonData.startPeriodYear).to.eql(21);\r",
									"    });\r",
									"\r",
									"    ////////// Amounts are correct /////////\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
									"        pm.expect(jsonData.quantity).to.eql(2);\r",
									"        pm.expect(jsonData.unitPrice).to.eql(2);\r",
									"        pm.expect(jsonData.netAmount).to.eql(2);\r",
									"        pm.expect(jsonData.totalAmount).to.eql(2.25);\r",
									"    });\r",
									"\r",
									"}\r",
									"console.log(\"Espected datas are : quantity =2, unitPrice=2, netAmount=2, totalAmount=2.25.\");\r",
									"\r",
									"//Using lineNUmber for multiple runnig.\r",
									"// pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
									"\r",
									"// console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
									"\r",
									"console.log(pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-6}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-6}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - makeSplit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.environment.set(\"cInvoiceLineId-2\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
									"}\r",
									"console.log( pm.environment.get(\"cInvoiceLineId-2\"));\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.environment.set(\"cInvoiceLineId-3\", pm.response.json().invoiceLines[1].invoiceLineId);\r",
									"}\r",
									"console.log( pm.environment.get(\"cInvoiceLineId-3\"));\r",
									"\r",
									"var lineNumber = pm.collectionVariables.get(\"lineNumber\")\r",
									"\r",
									"console.log(\"lineNumber is : \" + lineNumber);\r",
									"\r",
									"var jsonDataAL = pm.response.json().invoiceLines;\r",
									"   console.log(jsonDataAL);\r",
									"\r",
									"   var jsonDataAL1;\r",
									"    \r",
									"    var i;\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].lineNumber == 2) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);\r",
									"             pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"            pm.expect(jsonDataAL1.lineNumber).to.eql(2);\r",
									"    });\r",
									"    }\r",
									"    if (jsonDataAL[i].lineNumber == 3) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);\r",
									"             pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"            pm.expect(jsonDataAL1.lineNumber).to.eql(3);\r",
									"    });\r",
									"    }\r",
									"    }\r",
									"    console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
									"\r",
									"    console.log(\"Line is split.\");      \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//   var jsonData = pm.response.json();\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"//         pm.expect(jsonData.invoiceLines[0].lineNumber).to.eql(lineNumber + 1);\r",
									"//     });\r",
									"// }\r",
									"\r",
									"// if (pm.response.code == 200) {\r",
									"\r",
									"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"//         pm.expect(jsonData.invoiceLines[1].lineNumber).to.eql(lineNumber + 2);\r",
									"//     });\r",
									"// }\r",
									"\r",
									"// pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[1].lineNumber);\r",
									"\r",
									"// console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
									"\r",
									"// console.log(\"Line is split.\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var lineNumber = pm.variables.get('lineNumber');",
									"",
									"// pm.variables.set(\"lineNumber\", parseInt(lineNumber));",
									"",
									"// console.log(pm.variables.get(lineNumber));",
									"",
									"//var lineNumber = pm.collectionVariables.get(\"lineNumber\")",
									"",
									"//console.log(\"lineNumber is : \" + lineNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-1}}/split/?rowCount=2",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-1}}",
								"split",
								""
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								},
								{
									"key": "rowCount",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - makeCopy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.environment.set(\"cInvoiceLineId-4\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
									"}\r",
									"\r",
									"var lineNumber=pm.variables.get(\"lineNumber\");\r",
									"console.log(\"lineNumber is : \" + lineNumber);\r",
									"\r",
									"var jsonDataAL = pm.response.json().invoiceLines;\r",
									"   console.log(jsonDataAL);\r",
									"\r",
									"   var jsonDataAL1;\r",
									"    \r",
									"    var i;\r",
									"    for (i in jsonDataAL) {\r",
									"        if (jsonDataAL[i].lineNumber == 4) {\r",
									"            var jsonDataAL1 =jsonDataAL[i];\r",
									"             pm.environment.set(\"lineNumber\", jsonDataAL1.lineNumber);\r",
									"             pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
									"            pm.expect(jsonDataAL1.lineNumber).to.eql(4);\r",
									"    });\r",
									"    }\r",
									"    }\r",
									"    console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
									"\r",
									"    console.log(\"Line is split.\");      "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId-3}}/copy",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"{{cInvoiceLineId-3}}",
								"copy"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - XLS_Exporter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : XLSX received\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"PK\u0003\u0004\u0014\u0000\u0000\b\b\u0000��RR\"); // Start of file\r",
									"        pm.expect(pm.response.text()).to.include(\"\u0000\f\u0000S\u0003\u0000\u0000K\u001f\u0000\u0000\u0000\u0000\"); // End of file\r",
									"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
									"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
									"    });\r",
									"}\r",
									"\r",
									"console.log(\"Invoice is exported.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"invoiceIds\": [\n        \"{{cInvoiceId}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/export/invoicelines?sort=%5B%5D&filter=%5B%5D",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"export",
								"invoicelines"
							],
							"query": [
								{
									"key": "sort",
									"value": "%5B%5D"
								},
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "%5B%5D"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 - makeGenerate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"console.log(\"It is genereted.\");\r",
									"\r",
									"\r",
									"// console.log(pm.environment.get(\"cInvoiceLineId-2\"));\r",
									"// console.log(pm.environment.get(\"cInvoiceLineId-3\"));\r",
									"// console.log( pm.environment.get(\"cInvoiceLineId-4\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"accountinglines",
								"generate"
							],
							"query": [
								{
									"key": "take",
									"value": "15",
									"disabled": true
								},
								{
									"key": "query",
									"value": "{{cAccountingCode-A}}",
									"disabled": true
								},
								{
									"key": "documentType",
									"value": "CostInvoice"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -makeGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 201) {\r",
									"    pm.environment.set(\"cMasterLineId\", pm.response.json().invoiceLines[0].parentInvoiceLineId);\r",
									"}\r",
									"\r",
									"console.log(\"Lines \" + pm.environment.get(\"cInvoiceLineId-2\") + \", \" + pm.environment.get(\"cInvoiceLineId-3\") + \", \" + pm.environment.get(\"cInvoiceLineId-4\") + \" are grouped under \" + pm.environment.get(\"cMasterLineId\") + \".\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"masterLineSourceLineId\": \"{{cInvoiceLineId-2}}\",\n    \"invoiceLineIds\": [\n        \"{{cInvoiceLineId-2}}\",\n        \"{{cInvoiceLineId-3}}\",\n        \"{{cInvoiceLineId-4}}\"\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/groups",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.environment.get('cMasterLineId'));\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"for (x in jsonData) {\r",
									"    if (jsonData[x].parentInvoiceLineId = pm.environment.get('cMasterLineId')) {\r",
									"        var groups =jsonData[x].parentInvoiceLineId\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Groups Found\", function () {\r",
									"    pm.expect(pm.environment.get('cMasterLineId')).to.eql(groups);\r",
									"});\r",
									"console.log(\"Groups is : \" + groups + \".\");\r",
									"\r",
									"\r",
									"console.log(\"Espected datas are : quantity =0, unitPrice=1, netAmount=0.50, totalAmount=0.50\");\r",
									"\r",
									"//console.log(pm.response.json());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -splitGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"console.log(\"Group \" + pm.environment.get(\"cMasterLineId\") + \" is split.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/groups/?masterInvoiceLineIds={{cMasterLineId}}",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"groups",
								""
							],
							"query": [
								{
									"key": "masterInvoiceLineIds",
									"value": "{{cMasterLineId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -seeLine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    pm.environment.set(\"parameterId\", pm.response.json().invoiceLines[0].accountingParameters[0].parameterId);\r",
									"}\r",
									"\r",
									"console.log(\"Espected datas are : quantity =0, unitPrice=1, netAmount=0.50, totalAmount=0.50.\");\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"\r",
									"    var jsonData = pm.response.json().invoiceLines[0];\r",
									"\r",
									"\r",
									"    ///////// Check periods applied /////////\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
									"        pm.expect(jsonData.startPeriodMonth).to.eql(11);\r",
									"        pm.expect(jsonData.totalPeriod).to.eql(3);\r",
									"        pm.expect(jsonData.startPeriodYear).to.eql(20);\r",
									"    });\r",
									"\r",
									"    ////////// Amounts are correct /////////\r",
									"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
									"        pm.expect(jsonData.quantity).to.eql(4);\r",
									"        pm.expect(jsonData.unitPrice).to.eql(25.25);\r",
									"        pm.expect(jsonData.netAmount).to.eql(50.50);\r",
									"        pm.expect(jsonData.totalAmount).to.eql(63.13);\r",
									"    });\r",
									"\r",
									"}\r",
									"\r",
									"console.log(pm.response.json());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -deleteLine-2,3-4,",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Lines \" + pm.environment.get(\"cInvoiceLineId-2\") + \", \" + pm.environment.get(\"cInvoiceLineId-3\") + \", \" + pm.environment.get(\"cInvoiceLineId-4\") + \" are deleted.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"invoiceLineIds\":\n[\n    \"{{cInvoiceLineId-1}}\",\n    \"{{cInvoiceLineId-2}}\",\n    \"{{cInvoiceLineId-4}}\",\n    \"{{cInvoiceLineId-5}}\",\n    \"{{cInvoiceLineId-6}}\"\n    ]\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/deletelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines",
								"deletelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "PWA /invoiceLines/ID 1 -checkDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"console.log(\"Line \" + pm.environment.get(\"cInvoiceLineId-2\") + \" is deleted.\");\r",
									"\r",
									"// //Run to and with ..... line\r",
									"// var lineNumber = pm.collectionVariables.get(\"lineNumber\")\r",
									"// if (lineNumber <3925){\r",
									"//      postman.setNextRequest(pm.environment.get(\"firstRequest\"));\r",
									"// } else {\r",
									"//     postman.setNextRequest();\r",
									"// }\r",
									"\r",
									"// console.log(\"Lines \" + pm.environment.get(\"cInvoiceLineId-2\") + \", \" + pm.environment.get(\"cInvoiceLineId-3\") + \", \" + pm.environment.get(\"cInvoiceLineId-4\") + \" are deleted.\");\r",
									"\r",
									"//pm.collectionVariables.unset(\"lineNumber\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
							"host": [
								"{{PWA}}"
							],
							"path": [
								"organizations",
								"{{organizationId}}",
								"clients",
								"{{datasetId}}",
								"invoices",
								"{{cInvoiceId}}",
								"invoicelines"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "lineNumber",
			"value": ""
		},
		{
			"key": "parameterId",
			"value": ""
		}
	]
}