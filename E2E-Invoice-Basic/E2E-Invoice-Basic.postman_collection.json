{
	"info": {
		"_postman_id": "1963e1cf-1ad7-40ca-8753-d8c75a268f76",
		"name": "E2E-Invoice-Basic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "REPORTING",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 10)\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"// var done = false;\r",
											"// if (pm.environment.get(\"ENV\").length < 5 ) {\r",
											"//     pm.environment.set(\"ENV\", pm.environment.get(\"ENV\") + \" / E2E-Invoice-Basic /\");\r",
											"//     done = true;\r",
											"// }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token INT  - Try N times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /currentuser - Integrator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"   pm.environment.set(\"userIdIntegration\", pm.response.json().id);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentuser",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentuser"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try N times",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Try N times\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"\r",
											"\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"    if (pm.response.code == 200) {\r",
											"        if (pm.response.json().access_token != null) {\r",
											"\r",
											"            // If we get a token, pass test and go directly to the next request\r",
											"\r",
											"            pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"            pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"            postman.setNextRequest();\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"            return;\r",
											"        } else {\r",
											"            // Try again if tryCounter < tryCounterLimit\r",
											"            tryCounter++;\r",
											"            pm.globals.set(\"tryCounter\", tryCounter);\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"        }\r",
											"    } else {\r",
											"        // Try again if tryCounter < tryCounterLimit\r",
											"        tryCounter++;\r",
											"        pm.globals.set(\"tryCounter\", tryCounter);\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"    }\r",
											"} else {\r",
											"    // Fail after 10 tries\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Token\", function () { pm.expect(pm.response.json().access_token).to.be.not.empty });\r",
											"\r",
											"    postman.setNextRequest();\r",
											"}\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /currentuser - Controller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200,204,403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204,403]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"   pm.environment.set(\"userIdController\", pm.response.json().id);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentuser",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentuser"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    //     var jsonData = pm.response.json();\r",
											"    // pm.expect(jsonData).property(\"\"\r",
											"    // )\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"\r",
											"        pm.expect(pm.response).to.have.header(\"Expires\", \"Thu, 01 Jan 1970 00:00:01 GMT\")\r",
											"        pm.expect(pm.response).to.have.header(\"Cache-Control\", \"no-cache\")\r",
											"        pm.expect(pm.response).to.have.header(\"X-XSS-Protection\", \"1; mode=block\")\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"// console.log(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://my.semine.no/",
									"protocol": "https",
									"host": [
										"my",
										"semine",
										"no"
									],
									"path": [
										""
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"}\r",
											"\r",
											"console.log(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										""
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "INT /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /organizations/ID/clients/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json()\r",
											"    pm.environment.set(\"erpId\", jsonData.erpId);\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /currentuser/organizations - take 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"\r",
											"if(pm.response.code == 200){\r",
											"   pm.environment.set(\"userId\", pm.response.json().id);\r",
											"}\r",
											"\r",
											"if (pm.response.code != 200) {\r",
											"    console.log(pm.response)\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/currentUser/organizations?filter=&take=10",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"currentUser",
										"organizations"
									],
									"query": [
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "take",
											"value": "10"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "Setup",
					"item": [
						{
							"name": "Client",
							"item": [
								{
									"name": "PWA /currencies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/currencies",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"currencies"
											]
										},
										"description": "Gets a supplier for a given client"
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonDataSettings = pm.response.json();\r",
													"\r",
													"    var i, j\r",
													"\r",
													"    for (i in jsonDataSettings) {\r",
													"        if (jsonDataSettings[i].groupKey == \"Accounting\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_ClosingDate\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"EnableVatHandling\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"DateExtractor\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Accounts_DisregardPeriodsWhenGeneratingAl\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"DateExtractor_MinimumThresholdAmount\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Periodization_UseCostAccountToVatCode\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"Reinvoicing\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Reinvoicing_Enable_Capture_Threshold\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"VoucherNumbers\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SeparateVoucherSeriesForForeignInvoices\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"VoucherNumbers_SetByErp\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"\r",
													"            }\r",
													"        }\r",
													"\r",
													"\r",
													"        if (jsonDataSettings[i].groupKey == \"Workflow\") {\r",
													"            for (j in jsonDataSettings[i].settingKeyValues) {\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_AllowPostWithoutApprove\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_MissingBuyerRefStepEnabled\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_PassthroughInvoicesWithoutWorkflow\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_WorkflowType\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"                if (jsonDataSettings[i].settingKeyValues[j].key == \"Workflow_ContractType\") {\r",
													"                    console.log(jsonDataSettings[i].settingKeyValues[j].value)\r",
													"                }\r",
													"\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/settings",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"settings"
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								}
							]
						},
						{
							"name": "Fixed Asset",
							"item": [
								{
									"name": "INT - Supplier FA",
									"item": [
										{
											"name": "INT /suppliers FA",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cSupplierCode-FA', 'FA-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cSupplierVATId-FA', 'FA-' + moment().format(\"YYMM\"));\r",
															"\r",
															"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
															"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    \r",
															"    pm.response.to.have.status(200);\r",
															"\r",
															"    if (pm.response.code != 200) {\r",
															"        console.log(pm.response)\r",
															"    }\r",
															"\r",
															"});\r",
															"\r",
															"if (pm.response.code != 200) {\r",
															"    console.log(pm.response)\r",
															"} "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-FA}}\",\n            \"city\": \"city-{{cSupplierCode-FA}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-FA}}\",\n            \"phone\": \"phone-{{cSupplierCode-FA}}\",\n            \"email\": \"email-{{cSupplierCode-FA}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-FA}}\",\n        \"name\": \"FixedAsset-{{cSupplierCode-FA}}\",\n        \"organizationNumber\": \"{{cSupplierCode-FA}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-FA}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-FA}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-FA}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-FA}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-FA}}\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "<uuid>",
															"description": "(Required) Organization id of which this suppliers are related to."
														},
														{
															"key": "clientId",
															"value": "<uuid>",
															"description": "(Required) Client id of which this suppliers are related to."
														}
													]
												},
												"description": "Inserts and updates a set of suppliers for a client"
											},
											"response": []
										},
										{
											"name": "INT /suppliers/FA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Various \", function () {\r",
															"\r",
															"        pm.expect(jsonData).to.have.property(\"code\", pm.environment.get(\"cSupplierCode-FA\"));\r",
															"        // pm.expect(jsonData).to.have.property(\"accountNumber\", \"BBAN-A2-\" + YYMM);\r",
															"        // pm.expect(jsonData).to.have.property(\"purchaseOrderNumber\", null);\r",
															"        // pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", \"-1\");\r",
															"        // pm.expect(jsonData).to.have.property(\"isDeleted\", false);\r",
															"        // pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
															"        // pm.expect(jsonData).to.have.property(\"description\", null);\r",
															"\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-FA}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers",
														"{{cSupplierCode-FA}}"
													]
												},
												"description": "Gets a supplier for a given client"
											},
											"response": []
										}
									]
								},
								{
									"name": "/transactiontypes AI",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"TT-AI\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype AI\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype AI\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"transactiontypes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets AI",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"FA-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"TT-AI\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed TT\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast TT æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/transactiontypes Manual",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('TT_Manual', \"TT-M-\" + moment().format(\"YYMMDD-HHmmss\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{TT_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [],\n        \"description\": [\n            {\n                \"description\": \"Transactiontype 1\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Transaksjonstype 1\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/transactiontypes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"transactiontypes"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								},
								{
									"name": "/fixedassets Manual",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
													"\r",
													"pm.environment.set('FA_Manual', \"FA-M-\" + moment().format(\"YYMMDD-HHmmss\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{FA_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"{{TT_Manual}}\",\n                \"type\": \"TransactionType\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed Asset\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Eiendel æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/fixedassets",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"fixedassets"
											]
										},
										"description": "Inserts and updates transaction types"
									},
									"response": []
								}
							]
						},
						{
							"name": "List parameters",
							"item": [
								{
									"name": "PWA /parameters/condensed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//////// Set Environment Variables /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json()\r",
													"    for (x in jsonData) {\r",
													"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
													"            pm.environment.set(\"parameterIdLedger\", jsonData[x].parameterId)\r",
													"        }\r",
													"        if (jsonData[x].type == \"Vat\" && jsonData[x].code == \"VAT\") {\r",
													"            pm.environment.set(\"parameterIdVat\", jsonData[x].parameterId)\r",
													"        }\r",
													"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
													"            pm.environment.set(\"parameterIdInterim\", jsonData[x].parameterId)\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												"condensed"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /parameters/condensed - Get dimensions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"\r",
													"//////// \r",
													"// Set predefined dimension names \r",
													"// Has to be created in the same pattern as in INT-Relations collection\r",
													"//////////\r",
													"\r",
													"pm.environment.set(\"cDimensionCode-A\", \"cDimensionCode-A-\" + moment().format(\"YYMM\"));\r",
													"pm.environment.set(\"cDimensionCode-B\", \"cDimensionCode-B-\" + moment().format(\"YYMM\"));\r",
													"pm.environment.set(\"cDimensionCode-C\", \"cDimensionCode-C-\" + moment().format(\"YYMM\"));\r",
													"\r",
													"//////// Find dimensions /////////\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json()\r",
													"\r",
													"    for (x in jsonData) {\r",
													"\r",
													"        // Dimension A\r",
													"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-A\")) {\r",
													"            pm.environment.set(\"parameterIdDimCode-A\", jsonData[x].parameterId)\r",
													"            console.log(jsonData[x].parameterId);\r",
													"        }\r",
													"\r",
													"        // Dimension B\r",
													"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-B\")) {\r",
													"            pm.environment.set(\"parameterIdDimCode-B\", jsonData[x].parameterId)\r",
													"            console.log(jsonData[x].parameterId);\r",
													"        }\r",
													"\r",
													"        // Dimension C\r",
													"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-C\")) {\r",
													"            pm.environment.set(\"parameterIdDimCode-C\", jsonData[x].parameterId)\r",
													"            console.log(jsonData[x].parameterId);\r",
													"        }\r",
													"    }\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												"condensed"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /parameters/LEDGER/groupedsettings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// console.log(jsonData);\r",
													"\r",
													"\r",
													"// Check if AI is enabled\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    var x, i, j;\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].groupKey == \"Ai_Settings\") {\r",
													"            for (j in jsonData[i].settingKeyValues) {\r",
													"\r",
													"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Enabled\") {\r",
													"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ai_Enabled true\", function () {\r",
													"                        pm.expect(jsonData[i].settingKeyValues[j].value).to.eql(true);\r",
													"                    });\r",
													"                }\r",
													"\r",
													"                if (jsonData[i].settingKeyValues[j].key == \"Ai_Threshold\") {\r",
													"                    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :Ai_Threshold 50.0\", function () {\r",
													"                        pm.expect(jsonData[i].settingKeyValues[j].value).to.eql(50.0);\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept": true,
											"accept-encoding": true,
											"connection": true
										}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/groupedsettings",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												"{{parameterIdLedger}}",
												"groupedsettings"
											]
										},
										"description": "Gets a supplier for a given client."
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - Ledger",
							"item": [
								{
									"name": "INT clients/ID/accountingcodes A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cAccountingCode-A', 'cAccCode-A-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{cAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{cAccountingCode-A}} - Konto kode\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{cAccountingCode-A}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT clients/ID/accountingcodes/A - Get active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cAccountingCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"accountingcodes",
												"{{cAccountingCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT organizations/ID/accountingcodes A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('oAccountingCode-A', 'oAccCode-A-' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"code\": \"{{oAccountingCode-A}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"{{oAccountingCode-A}} - Konto kode\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{oAccountingCode-A}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"accountingcodes"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT organizations/ID/accountingcodes/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/accountingcodes/{{oAccountingCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"accountingcodes",
												"{{oAccountingCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "INT - Dimension",
							"item": [
								{
									"name": "Dimension A",
									"item": [
										{
											"name": "INT /dimensions A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cDimensionCode-A', 'cDimCodeA' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{cDimensionCode-A}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-A}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-A}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT /dimensions/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/A/values/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
															"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
															"\r",
															"    pm.response.to.have.status(200);\r",
															"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
															"});\r",
															"\r",
															"console.log(pm.response.json());\r",
															"\r",
															"// Create some sort of stack trace for DevOps\r",
															"if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response.json())); }"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
															"pm.environment.set('cDimensionCodeValue-A', 'DimValueA' + moment().format(\"YYYYMMDD\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionCodeValue-A}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{cHHmmss}}-Alias-A\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values"
													]
												},
												"description": "Inserts and updates accounting codes for a given client"
											},
											"response": []
										},
										{
											"name": "INT /dimensions/A/values/A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionCodeValue-A}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values",
														"{{cDimensionCodeValue-A}}"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										},
										{
											"name": "INT /dimensions/A/values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"dimensions",
														"{{cDimensionCode-A}}",
														"values"
													]
												},
												"description": "Gets an accounting code based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "INT - Delivery Address",
							"item": [
								{
									"name": "/addresses - Delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set(\"code-Delivery\", \"code-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"externalCode-Delivery\", \"externalCode-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"name-Delivery\", \"name-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"addressType-Delivery\", \"Delivery\");\r",
													"pm.collectionVariables.set(\"address1-Delivery\", \"address1-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"address2-Delivery\", \"address2-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"zipCode-Delivery\", \"zipCode-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"city-Delivery\", \"city-Delivery-\" + moment().format(\"YYMM\"));\r",
													"pm.collectionVariables.set(\"country-Delivery\", \"NO\");\r",
													"pm.collectionVariables.set(\"status\", \"Active\");\r",
													"\r",
													"pm.collectionVariables.set(\"code-Delivery-Encoded\", encodeURIComponent(pm.collectionVariables.get(\"code-Delivery\")));\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
													"\r",
													"pm.test(apiName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n  {\r\n    \"code\": \"{{code-Delivery}}\",\r\n    \"externalCode\": \"{{externalCode-Delivery}}\",\r\n    \"name\": \"{{name-Delivery}}\",\r\n    \"addressType\": \"{{addressType-Delivery}}\",\r\n    \"address1\": \"{{address1-Delivery}}\",\r\n    \"address2\": \"{{address2-Delivery}}\",\r\n    \"zipCode\": \"{{zipCode-Delivery}}\",\r\n    \"city\": \"{{city-Delivery}}\",\r\n    \"country\": \"{{country-Delivery}}\",\r\n    \"status\": \"Active\"\r\n  }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/addresses",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"addresses"
											]
										}
									},
									"response": []
								},
								{
									"name": "/addresses/code  - Delivery",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let apiName = pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName;\r",
													"\r",
													"pm.test(apiName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    let address = pm.response.json();\r",
													"\r",
													"    pm.test(apiName + \"All address fields\", function () {\r",
													"        pm.expect(pm.collectionVariables.get('code-Delivery')).is.to.equal(address.code);\r",
													"        pm.expect(pm.collectionVariables.get('externalCode-Delivery')).is.to.equal(address.externalCode);\r",
													"        pm.expect(pm.collectionVariables.get('name-Delivery')).is.to.equal(address.name);\r",
													"        pm.expect(pm.collectionVariables.get('addressType-Delivery')).is.to.equal(address.addressType);\r",
													"        pm.expect(pm.collectionVariables.get('address1-Delivery')).is.to.equal(address.address1);\r",
													"        pm.expect(pm.collectionVariables.get('address2-Delivery')).is.to.equal(address.address2);\r",
													"        pm.expect(pm.collectionVariables.get('zipCode-Delivery')).is.to.equal(address.zipCode);\r",
													"\r",
													"        pm.expect(pm.collectionVariables.get('city-Delivery')).is.to.equal(address.city);\r",
													"        pm.expect(pm.collectionVariables.get('country-Delivery')).is.to.equal(address.country);\r",
													"        pm.expect(\"Active\").is.to.equal(address.status);\r",
													"    });\r",
													"    console.log(pm.response.json())\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/addresses/{{code-Delivery-Encoded}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"addresses",
												"{{code-Delivery-Encoded}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - Supplier A",
							"item": [
								{
									"name": "INT /suppliers A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cSupplierCode-A', 'A2-' +  moment().format(\"YYMM\"));\r",
													"pm.environment.set('cSupplierVATId-A', 'A2-' +  moment().format(\"YYMM\"));\r",
													"\r",
													"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
													"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-A}}\",\n            \"city\": \"city-{{cSupplierCode-A}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-A}}\",\n            \"phone\": \"phone-{{cSupplierCode-A}}\",\n            \"email\": \"email-{{cSupplierCode-A}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-A}}\",\n        \"name\": \"name-{{cSupplierCode-A}}\",\n        \"organizationNumber\": \"orgnr-{{cSupplierCode-A}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-A}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}-1\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}-1\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}-1\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}-1\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}\"\n            },\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-A}}-3\",\n                \"bankName\": \"bankName-{{cSupplierCode-A}}-3\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-A}}-3\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-A}}-3\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers"
											]
										},
										"description": "Inserts and updates a set of suppliers for a client"
									},
									"response": []
								},
								{
									"name": "INT /suppliers/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"suppliers",
												"{{cSupplierCode-A}}"
											]
										},
										"description": "Gets a supplier for a given client"
									},
									"response": []
								}
							]
						},
						{
							"name": "SETUP",
							"item": [
								{
									"name": "VAT",
									"item": [
										{
											"name": "/vatcodes - 25,15,10,0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.environment.set('cVatCode-R1', 'R1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-R2', 'R2-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S1', 'S1-VAT-' + moment().format(\"YYMM\"));\r",
															"pm.environment.set('cVatCode-S2', 'S2-VAT-' + moment().format(\"YYMM\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"VAT-25\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"25% VAT code\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"25% MVA kode æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 25\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-15\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"15% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"15% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 15\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-10\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"10% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"10% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 10\n            }\n        ]\n    },\n    {\n        \"code\": \"VAT-0\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"0% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"0% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 0\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-25",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-25",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-25"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-15",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-15",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-15"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-10",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-10"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/vatcodes/VAT-0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/VAT-0",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"vatcodes",
														"VAT-0"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								},
								{
									"name": "Ledger",
									"item": [
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"Interim-1\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Interim account\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim konto æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes Interim-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Interim-1",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Interim-1"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes 25, 15 AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"Ledger-25-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"VAT-25\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 25%\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 25% æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"Ledger-15-AI\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"Interim-1\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"VAT-15\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 15% and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 15% og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-25-AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Ledger-25-AI",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Ledger-25-AI"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-15-AI",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/Ledger-15-AI",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"Ledger-15-AI"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes 25, 15 Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));\r",
															"\r",
															"pm.environment.set('Ledger_15_Manual', \"Ledger-15-M-\" + moment().format(\"YYMMDD-HHmmss\"));\r",
															"pm.environment.set('Ledger_25_Manual', \"Ledger-25-M-\" + moment().format(\"YYMMDD-HHmmss\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"code\": \"{{Ledger_25_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"VAT-25\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 25%\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 25% æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    },\n    {\n        \"code\": \"{{Ledger_15_Manual}}\",\n        \"status\": \"Active\",\n        \"relations\": [\n            {\n                \"code\": \"Interim-1\",\n                \"type\": \"Interim\",\n                \"operation\": \"Requirement\"\n            },\n            {\n                \"code\": \"VAT-15\",\n                \"type\": \"VatCode\",\n                \"operation\": \"Requirement\"\n            }\n        ],\n        \"description\": [\n            {\n                \"description\": \"Fixed VAT 15% and interim\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Fast MVA 15% og interim æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes"
													]
												},
												"description": "Inserts and updates transaction types"
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-25-Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_25_Manual}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{Ledger_25_Manual}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										},
										{
											"name": "/accountingcodes/Ledger-15-Manual",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Ledger_15_Manual}}",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"accountingcodes",
														"{{Ledger_15_Manual}}"
													]
												},
												"description": "Gets a fixed asset object based on the ERP code."
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PWA - Supplier A",
					"item": [
						{
							"name": "PWA /suppliers/search - query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Get the supplier id based on erpVendorId (supplier code)\r",
											"var j = 0;\r",
											"while (j < jsonData.length) {\r",
											"    if (\r",
											"        jsonData[j].erpVendorId == pm.environment.get(\"cSupplierCode-A\")) {\r",
											"        pm.environment.set(\"cSupplierId-A\", jsonData[j].id);\r",
											"        pm.environment.set(\"cSupplierVATId-A\", jsonData[j].vatId);\r",
											"        console.log(jsonData[j].erpVendorId + \"  \" + jsonData[j].id);\r",
											"    }\r",
											"    j++;\r",
											"}\r",
											"  \r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/search?query={{cSupplierCode-A}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "{{cSupplierCode-A}}",
											"description": "Free text query to search for supplier"
										},
										{
											"key": "skip",
											"value": "1",
											"description": "Skip records",
											"disabled": true
										},
										{
											"key": "take",
											"value": "2",
											"description": "Take records",
											"disabled": true
										},
										{
											"key": "textSearch",
											"value": "{{cSupplierCode-A}}",
											"disabled": true
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /suppliers/A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/{{cSupplierId-A}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										"{{cSupplierId-A}}"
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						},
						{
							"name": "PWA /suppliers/ Take 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers/?take=2",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"suppliers",
										""
									],
									"query": [
										{
											"key": "take",
											"value": "2"
										}
									]
								},
								"description": "Gets a supplier for a given client."
							},
							"response": []
						}
					]
				},
				{
					"name": "--- Invoice Type ---",
					"item": [
						{
							"name": "---  Switch ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const invoiceType = pm.environment.get(\"invoiceType\");\r",
											"// console.log(invoiceType)\r",
											"switch (invoiceType) {\r",
											"\r",
											"    case \"ApiCostInvoice\":\r",
											"        console.log(invoiceType);\r",
											"        postman.setNextRequest(\"--- API Cost Invoice ---\");\r",
											"        break;\r",
											"\r",
											"    case \"UblCostInvoice\":\r",
											"        console.log(invoiceType);\r",
											"        postman.setNextRequest(\"--- UBL Cost Invoice ---\")\r",
											"        break;\r",
											"}\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmssS\"));\r",
											"\r",
											"// Invoice dates\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cInvoiceDate\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"pm.environment.set(\"dateStart\", \"05\" + moment().subtract(1, 'days').format(\".MM.YYYY\"));\r",
											"pm.environment.set(\"dateEnd\", \"05\" + moment().add(90, 'days').format(\".MM.YYYY\"));\r",
											"\r",
											"pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"console.log(pm.environment.get(\"dateEnd\"))\r",
											"// console.log(moment().subtract(0, 'days').format('M'))\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.09.2020\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.12.2020\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"20\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"9\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Cost Invoice",
					"item": [
						{
							"name": "--- API Cost Invoice ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// // Invoice dates\r",
											"// pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"// pm.environment.set(\"cInvoiceDate\", moment());\r",
											"// pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"\r",
											"// TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", \"01.04.2021\");\r",
											"// pm.environment.set(\"dateEnd\", \"01.06.2021\");\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", \"2020-09-01\");\r",
											"// pm.environment.set(\"IsoDateEnd\", \"2020-12-01\");\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", \"21\");\r",
											"// pm.environment.set(\"startPeriodMonth\", \"4\");\r",
											"\r",
											"\r",
											"// // TODO: Date Extractor fails\r",
											"\r",
											"// pm.environment.set(\"dateStart\", moment().subtract(1, 'days').format(\"DD.MM.YYYY\"));\r",
											"// pm.environment.set(\"dateEnd\", moment().add(30, 'days').format(\"DD.MM.YYYY\"));\r",
											"\r",
											"// pm.environment.set(\"IsoDateStart\", moment().subtract(1, 'days').format(\"YYYY-MM-DD\"));\r",
											"// pm.environment.set(\"IsoDateEnd\", moment().add(30, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											"// pm.environment.set(\"startPeriodYear\", moment().subtract(0, 'days').format(\"YY\"));\r",
											"// pm.environment.set(\"startPeriodMonth\", moment().subtract(0, 'days').format('M'));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// if (moment().subtract(90, 'days').format(\"DD\") < 15) {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(90, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(90, 'days').format('MM'));\r",
											"// } else {\r",
											"//     pm.environment.set(\"startPeriodYear\", moment().subtract(60, 'days').format(\"YY\"));\r",
											"//     pm.environment.set(\"startPeriodMonth\", moment().subtract(60, 'days').format('MM'));\r",
											"// }\r",
											"\r",
											"// console.log(pm.environment.get(\"startPeriodMonth\"))\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											"\r",
											"// function sleep(milisecond) {\r",
											"//     var date = Date.now();\r",
											"//     while ((date + milisecond) > Date.now());\r",
											"// }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 126.15,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25.15,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 101.00,\r\n        \"ReportingAmount\": 126.15,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{invoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-A}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Mobile-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Web-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": \"Mobile-CP-{{clientRegistrationNumber}}\",\r\n        \"Web\": \"Web-CP-{{clientRegistrationNumber}}\",\r\n        \"Street\": \"Street-CP-{{clientRegistrationNumber}}\",\r\n        \"Zip\": \"Zip-CP\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City-CP\",\r\n        \"BankAccountNumber\": \"BBAN-CP-{{clientRegistrationNumber}}\",\r\n        \"IbanAccountNumber\": \"IBAN-CP-{{clientRegistrationNumber}}\"\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n            \"Description\": \"Description  {{dateStart}}-{{dateEnd}}\",\r\n            \"Quantity\": 1.0,\r\n            \"UnitPrice\": 1.00,\r\n            \"TotalAmount\": 1.15,\r\n            \"NetAmount\": 1.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 15.0,\r\n            \"VatAmount\": 0.15,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        },\r\n        {\r\n            \"LineNumber\": 2,\r\n            \"InvoiceLineNumber\": \"2\",\r\n            \"ReferenceLineNumber\": \"{{invoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{invoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{invoiceNumber}}\",\r\n\r\n            \"Description\": \"DimValue:  {{cDimensionCodeValue-A}} CamelCaseAlias\",\r\n            \"Quantity\": 4.0,\r\n            \"UnitPrice\": 25.00,\r\n            \"TotalAmount\": 125.00,\r\n            \"NetAmount\": 100.0,\r\n            \"Discount\": 0.0,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 25.0,\r\n            // \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "---  sleep 5 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 15) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
											"                    pm.expect(jsonData.type).to.eql(\"Invoice\");\r",
											"                    pm.expect(jsonData.documentType).to.eql(\"CostInvoice\");\r",
											"                    pm.expect(jsonData.invoicePurchaseSummary).to.be.null;\r",
											"                    pm.expect(jsonData.isPurchaseInvoice).to.be.false;\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "--- Skip to PWA Start ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to PWA ---');\r",
											"postman.setNextRequest(\"--- PWA Start ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UBL Cost Invoice",
					"item": [
						{
							"name": "--- UBL Cost Invoice ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "UBL Cost Invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmssS\"));\r",
											"\r",
											"// Invoice dates UBL style\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cInvoiceDate\", moment().format(\"YYYY-MM-DD\"));\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days').format(\"YYYY-MM-DD\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Sleeping for 10 seconds before next request.\");\r",
											"setTimeout(function () {\r",
											"    console.log(\"Done.\");\r",
											"}, 0);\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // pm.test(\"senderOrganizationId OK\", function () {\r",
											"    //     pm.expect(jsonData.ehf.senderOrganizationId).to.eql(pm.environment.get(\"cSupplierVATId-A\"));\r",
											"    // });\r",
											"\r",
											"    pm.test(\"recipientOrganizationId OK\", function () {\r",
											"        pm.expect(jsonData.ehf.recipientOrganizationId).to.eql(pm.environment.get(\"clientRegistrationNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"cPackageId\", pm.response.json().packageId);\r",
											"\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"// postman.setNextRequest(\"INB-GW-invoice - UBL Cost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "KmsgQdmAy0XPEXAZCnp0AQI38kLBy4mLM1sP7Damv3z251BL3pafZCAJLLqROQpi",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Invoice xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\r\n    xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\"\r\n    xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\">\r\n    <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>\r\n    <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\r\n    <!-- ID has to be unique for every invoice from a given supplier in a client -->\r\n    <cbc:ID>{{invoiceNumber}}</cbc:ID>\r\n    <cbc:IssueDate>{{cIssueDate}}</cbc:IssueDate>\r\n    <cbc:DueDate>{{cDueDate}}</cbc:DueDate>\r\n    <!-- comment -->\r\n    <cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>\r\n    <cbc:DocumentCurrencyCode>NOK</cbc:DocumentCurrencyCode>\r\n    <!-- comment -->\r\n    <cbc:BuyerReference>Test Controller</cbc:BuyerReference>\r\n    <!-- comment -->\r\n    <cac:InvoicePeriod>\r\n        <cbc:StartDate>2020-08-12</cbc:StartDate>\r\n        <cbc:EndDate>2020-08-30</cbc:EndDate>\r\n    </cac:InvoicePeriod>\r\n\r\n\r\n    <cac:AccountingSupplierParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>name-{{cSupplierCode-A}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City</cbc:CityName>\r\n                <cbc:PostalZone>Zip-SP-9999</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>NO{{cSupplierCode-A}}MVA</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>Foretaksregisteret</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>TAX</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>RegistrationName-{{cSupplierCode-A}}</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n        </cac:Party>\r\n    </cac:AccountingSupplierParty>\r\n    \r\n\r\n    <cac:AccountingCustomerParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Name-CP-{{clientRegistrationNumber}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City ÆØÅ</cbc:CityName>\r\n                <cbc:PostalZone>4321</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Legal Buyer Name AS ÆØÅ</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n            <cac:Contact>\r\n                <cbc:Name>Test Controller</cbc:Name>\r\n                <cbc:Telephone>88008800</cbc:Telephone>\r\n                <cbc:ElectronicMail>testcontroller@useful.no</cbc:ElectronicMail>\r\n            </cac:Contact>\r\n        </cac:Party>\r\n    </cac:AccountingCustomerParty>\r\n\r\n\r\n    <cac:Delivery>\r\n        <cac:DeliveryParty>\r\n            <cac:PartyName>\r\n                <cbc:Name>{{name-Delivery}}</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:DeliveryLocation>\r\n            <cac:Address>\r\n            <cbc:StreetName>{{address1-Delivery}}</cbc:StreetName>\r\n                <cbc:CityName>{{city-Delivery}}</cbc:CityName>\r\n                <cbc:PostalZone>{{zipCode-Delivery}}</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>{{country-Delivery}}</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:Address>\r\n            </cac:DeliveryLocation>\r\n        </cac:DeliveryParty>\r\n    </cac:Delivery>\r\n\r\n\r\n    <cac:PaymentMeans>\r\n        <cbc:PaymentMeansCode>31</cbc:PaymentMeansCode>\r\n        <cbc:PaymentID>KidNumber-{{invoiceNumber}}</cbc:PaymentID>\r\n        <cac:PayeeFinancialAccount>\r\n            <cbc:ID >BBAN-{{cSupplierCode-A}}</cbc:ID>\r\n        </cac:PayeeFinancialAccount>\r\n    </cac:PaymentMeans>\r\n\r\n    <cac:PaymentTerms>\r\n        <cbc:Note>Payment within 10 days, 2% discount</cbc:Note>\r\n    </cac:PaymentTerms>\r\n    \r\n    <cac:TaxTotal>\r\n        <cbc:TaxAmount currencyID=\"NOK\">25.15</cbc:TaxAmount>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">100.00</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">25</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">1</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">0.15</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n    </cac:TaxTotal>\r\n\r\n    <cac:LegalMonetaryTotal>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">101.00</cbc:LineExtensionAmount>\r\n        <cbc:TaxExclusiveAmount currencyID=\"NOK\">101.00</cbc:TaxExclusiveAmount>\r\n        <cbc:TaxInclusiveAmount currencyID=\"NOK\">126.15</cbc:TaxInclusiveAmount>\r\n        <cbc:PayableAmount currencyID=\"NOK\">126.15</cbc:PayableAmount>\r\n    </cac:LegalMonetaryTotal>\r\n\r\n    <!-- Line 1 -->\r\n    <cac:InvoiceLine>\r\n        <cbc:ID>1</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2013-06-01</cbc:StartDate>\r\n            <cbc:EndDate>2013-06-30</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>1</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">1.00</cbc:LineExtensionAmount>\r\n        <cbc:AccountingCost>BookingCode001</cbc:AccountingCost>\r\n        <cac:Item>\r\n            <cbc:Name>Description  {{dateStart}}-{{dateEnd}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">1.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:InvoiceLine>\r\n\r\n    <!-- Line 2 -->\r\n    <cac:InvoiceLine>\r\n        <cbc:ID>2</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2020-12-01</cbc:StartDate>\r\n            <cbc:EndDate>2021-02-28</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>2</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">4</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">100.00</cbc:LineExtensionAmount>\r\n        <cac:Item>\r\n            <cbc:Name>Dimension Value:  {{cDimensionCodeValue-A}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">25.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:InvoiceLine>\r\n</Invoice>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{INB-GW}}/ubl",
									"host": [
										"{{INB-GW}}"
									],
									"path": [
										"ubl"
									]
								}
							},
							"response": []
						},
						{
							"name": "---  sleep 5 sec ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"\r",
											"if (retries < 15) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json().data[0];\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
											"                    pm.expect(jsonData.type).to.eql(\"Invoice\");\r",
											"                    pm.expect(jsonData.invoiceSubType).to.eql(\"CostInvoice\");\r",
											"                    pm.expect(jsonData.purchaseSummary.purchaseOrderNumber).to.be.null;\r",
											"                    pm.expect(jsonData.purchaseSummary.goodsReceivedNumber).to.be.null;\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([\"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries)\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=1&filter=%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "1"
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D"
										}
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "--- Skip to PWA Start ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to PWA ---');\r",
											"postman.setNextRequest(\"--- PWA Start ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UBL Credit Note",
					"item": [
						{
							"name": "--- UBL Credit Note ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "UBL CreditNote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceNumber\", \"UBL-\" + moment().format(\"YYYYMMDD-HHmmssS\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Sleeping for 10 seconds before next request.\");\r",
											"setTimeout(function () {\r",
											"    console.log(\"Done.\");\r",
											"}, 0);\r",
											"\r",
											"pm.globals.set(\"retries\", 0);\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(\"senderOrganizationId OK\", function () {\r",
											"        pm.expect(jsonData.ehf.senderOrganizationId).to.eql(pm.environment.get(\"cSupplierVATId-A\"));\r",
											"    });\r",
											"\r",
											"    pm.test(\"recipientOrganizationId OK\", function () {\r",
											"        pm.expect(jsonData.ehf.recipientOrganizationId).to.eql(pm.environment.get(\"clientRegistrationNumber\"));\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"cPackageId\", pm.response.json().packageId);\r",
											"\r",
											"    console.log(pm.response.json())\r",
											"}\r",
											"\r",
											"\r",
											"// postman.setNextRequest(\"INB-GW-invoice - UBL Cost\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "KmsgQdmAy0XPEXAZCnp0AQI38kLBy4mLM1sP7Damv3z251BL3pafZCAJLLqROQpi",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<CreditNote xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\r\n    xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\"\r\n    xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2\">\r\n    <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>\r\n    <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\r\n    <!-- ID has to be unique for every invoice from a given supplier in a client -->\r\n    <cbc:ID>{{invoiceNumber}}</cbc:ID>\r\n    <cbc:IssueDate>2019-01-15</cbc:IssueDate>\r\n    <cbc:DueDate>2019-01-15</cbc:DueDate>\r\n    <!-- comment -->\r\n    <cbc:CreditNoteTypeCode>381</cbc:CreditNoteTypeCode>\r\n    <cbc:DocumentCurrencyCode>NOK</cbc:DocumentCurrencyCode>\r\n    <!-- comment -->\r\n    <cbc:BuyerReference>Test Controller</cbc:BuyerReference>\r\n    <!-- comment -->\r\n    <cac:InvoicePeriod>\r\n        <cbc:StartDate>2020-08-12</cbc:StartDate>\r\n        <cbc:EndDate>2020-08-30</cbc:EndDate>\r\n    </cac:InvoicePeriod>\r\n\r\n    <cac:AccountingSupplierParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Heartbeat Test AS æøå</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>HEARTBEAT CITY ÆØÅ,</cbc:CityName>\r\n                <cbc:PostalZone>1234</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>NO{{cSupplierCode-A}}MVA</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyTaxScheme>\r\n                <cbc:CompanyID>Foretaksregisteret</cbc:CompanyID>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>TAX</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:PartyTaxScheme>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Heartbeat Test AS æøå</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{cSupplierCode-A}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n        </cac:Party>\r\n    </cac:AccountingSupplierParty>\r\n    \r\n    <cac:AccountingCustomerParty>\r\n        <cac:Party>\r\n            <cbc:EndpointID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:EndpointID>\r\n            <cac:PartyName>\r\n                <cbc:Name>Buyer Name AS ÆØÅ</cbc:Name>\r\n            </cac:PartyName>\r\n            <cac:PostalAddress>\r\n                <cbc:CityName>City ÆØÅ</cbc:CityName>\r\n                <cbc:PostalZone>4321</cbc:PostalZone>\r\n                <cac:Country>\r\n                    <cbc:IdentificationCode>NO</cbc:IdentificationCode>\r\n                </cac:Country>\r\n            </cac:PostalAddress>\r\n            <cac:PartyLegalEntity>\r\n                <cbc:RegistrationName>Legal Buyer Name AS ÆØÅ</cbc:RegistrationName>\r\n                <cbc:CompanyID schemeID=\"0192\">{{clientRegistrationNumber}}</cbc:CompanyID>\r\n            </cac:PartyLegalEntity>\r\n            <cac:Contact>\r\n                <cbc:Name>Test Controller</cbc:Name>\r\n                <cbc:Telephone>88008800</cbc:Telephone>\r\n                <cbc:ElectronicMail>testcontroller@useful.no</cbc:ElectronicMail>\r\n            </cac:Contact>\r\n        </cac:Party>\r\n    </cac:AccountingCustomerParty>\r\n\r\n    <cac:PaymentMeans>\r\n        <cbc:PaymentMeansCode>31</cbc:PaymentMeansCode>\r\n        <cbc:PaymentID>123</cbc:PaymentID>\r\n        <cac:PayeeFinancialAccount>\r\n            <cbc:ID >BBAN-{{cSupplierCode-A}}</cbc:ID>\r\n        </cac:PayeeFinancialAccount>\r\n    </cac:PaymentMeans>\r\n\r\n    <cac:PaymentTerms>\r\n        <cbc:Note>Payment within 10 days, 2% discount</cbc:Note>\r\n    </cac:PaymentTerms>\r\n    \r\n    <cac:TaxTotal>\r\n        <cbc:TaxAmount currencyID=\"NOK\">25.15</cbc:TaxAmount>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">100.00</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">25</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n        <cac:TaxSubtotal>\r\n            <cbc:TaxableAmount currencyID=\"NOK\">1</cbc:TaxableAmount>\r\n            <cbc:TaxAmount currencyID=\"NOK\">0.15</cbc:TaxAmount>\r\n            <cac:TaxCategory>\r\n                <cbc:ID>S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:TaxCategory>\r\n        </cac:TaxSubtotal>\r\n    </cac:TaxTotal>\r\n    <cac:LegalMonetaryTotal>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">101.00</cbc:LineExtensionAmount>\r\n        <cbc:TaxExclusiveAmount currencyID=\"NOK\">101.00</cbc:TaxExclusiveAmount>\r\n        <cbc:TaxInclusiveAmount currencyID=\"NOK\">126.15</cbc:TaxInclusiveAmount>\r\n        <cbc:PayableAmount currencyID=\"NOK\">126.15</cbc:PayableAmount>\r\n    </cac:LegalMonetaryTotal>\r\n    <!-- Line 1 -->\r\n    <cac:CreditNoteLine>\r\n        <cbc:ID>1</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2013-06-01</cbc:StartDate>\r\n            <cbc:EndDate>2013-06-30</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>1</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">1.00</cbc:LineExtensionAmount>\r\n        <cbc:AccountingCost>BookingCode001</cbc:AccountingCost>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2020-08-12</cbc:StartDate>\r\n            <cbc:EndDate>2020-08-30</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:Item>\r\n            <cbc:Name>Jan-Feb 2020 {{cDimensionCodeValue-A}}</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>15</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">1.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:CreditNoteLine>\r\n    <!-- Line 2 -->\r\n    <cac:CreditNoteLine>\r\n        <cbc:ID>2</cbc:ID>\r\n        <cac:InvoicePeriod>\r\n            <cbc:StartDate>2020-12-01</cbc:StartDate>\r\n            <cbc:EndDate>2021-02-28</cbc:EndDate>\r\n        </cac:InvoicePeriod>\r\n        <cac:OrderLineReference>\r\n            <cbc:LineID>2</cbc:LineID>\r\n        </cac:OrderLineReference>\r\n        <cbc:InvoicedQuantity unitCode=\"NAR\">1</cbc:InvoicedQuantity>\r\n        <cbc:LineExtensionAmount currencyID=\"NOK\">100.00</cbc:LineExtensionAmount>\r\n        <cac:Item>\r\n            <cbc:Name>Example Item 2</cbc:Name>\r\n            <cac:ClassifiedTaxCategory>\r\n                <cbc:ID >S</cbc:ID>\r\n                <cbc:Percent>25</cbc:Percent>\r\n                <cac:TaxScheme>\r\n                    <cbc:ID>VAT</cbc:ID>\r\n                </cac:TaxScheme>\r\n            </cac:ClassifiedTaxCategory>\r\n        </cac:Item>\r\n        <cac:Price>\r\n            <cbc:PriceAmount currencyID=\"NOK\">100.00</cbc:PriceAmount>\r\n        </cac:Price>\r\n    </cac:CreditNoteLine>\r\n</CreditNote>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{INB-GW}}/api/v1.0/ubl",
									"host": [
										"{{INB-GW}}"
									],
									"path": [
										"api",
										"v1.0",
										"ubl"
									]
								}
							},
							"response": []
						},
						{
							"name": "INB /statelog/cPackageId - UNSET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.environment.unset(\"cInvoiceId\");\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"    var jsonDataLength = jsonData.length;\r",
											"\r",
											"    console.log(jsonDataLength);\r",
											"\r",
											"    var i = 0;\r",
											"    var invoiceIdFound = null;\r",
											"\r",
											"\r",
											"    // Find invoiceId if any\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].invoiceId != null && jsonData[x].sourceApplication == \"Semine.LogicService.Api\" && jsonData[x].state == \"Done\") {\r",
											"            // console.log(jsonData[x].invoiceId);\r",
											"            var invoiceIdFound = jsonData[x].invoiceId;\r",
											"            // console.log(invoiceIdFound);\r",
											"            // return;\r",
											"        }\r",
											"    }\r",
											"\r",
											"    // If invoiceId found, move to next request. \r",
											"    // If invoiceId not found repeat this request 100 times before failing.\r",
											"    if (retries < 100) {\r",
											"        if (invoiceIdFound != null) {\r",
											"            console.log(invoiceIdFound);\r",
											"            pm.environment.set(\"cInvoiceId\", invoiceIdFound);\r",
											"            pm.globals.set(\"retries\", 0);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
											"                pm.expect(invoiceIdFound).to.be.not.null;\r",
											"            });\r",
											"        } else {\r",
											"            // Wait 5s and then try again\r",
											"            sleep(5000);\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries);\r",
											"            console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(\"INB /statelog/cPackageId - UNSET\");\r",
											"        }\r",
											"    } else {\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
											"            pm.expect(invoiceIdFound).to.be.not.null;\r",
											"        });\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INB}}/api/organizations/{{organizationId}}/inbound/statelog/{{cPackageId}}",
									"host": [
										"{{INB}}"
									],
									"path": [
										"api",
										"organizations",
										"{{organizationId}}",
										"inbound",
										"statelog",
										"{{cPackageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Skip to PWA Start ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to PWA ---');\r",
											"postman.setNextRequest(\"--- PWA Start ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PWA",
					"item": [
						{
							"name": "--- PWA Start ---",
							"item": [
								{
									"name": "--- PWA Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "27706 Invoice Grid",
							"item": [
								{
									"name": "PWA /invoices/ - Invoice grid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//////////// Invoice Grid ///////////\r",
													"\r",
													"// OK: Supplier matched\r",
													"// OK: Type is correct\r",
													"// OK: Workflow triggered\r",
													"// OK: Assigned column is populated\r",
													"// OK: Status in review if workflow triggered\r",
													"// OK: Amounts are correct \r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    if (pm.response.code == 200) {\r",
													"        pm.environment.set(\"cInvoiceId\", jsonData.id);\r",
													"    }\r",
													"\r",
													"    ///////// Supplier matched /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier matched\", function () {\r",
													"        pm.expect(jsonData.supplier).to.be.not.empty;\r",
													"        // pm.expect(jsonData.supplier.id).to.eql(pm.environment.get(\"cSupplierId-A\"));\r",
													"        pm.expect(jsonData.supplier.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.supplier.organizationNumber).to.eql(\"orgnr-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"    ////////// Type is correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Type is correct\", function () {\r",
													"        pm.expect(jsonData.type).to.eql(\"Invoice\");\r",
													"        pm.expect(jsonData.invoiceSubType).to.eql(\"CostInvoice\");\r",
													"        // pm.expect(jsonData.invoiceSourceType).to.eql(\"Ehf\");\r",
													"        // pm.expect(jsonData.sourceChannelType).to.eql(\"EhfApi\");\r",
													"        // pm.expect(jsonData.documentMimeType).to.eql(\"text/xml\");\r",
													"    });\r",
													"\r",
													"    ///////// Workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Workflow triggered\", function () {\r",
													"        pm.expect(jsonData.workflows).is.not.empty;\r",
													"        pm.expect(jsonData.workflows[0].id).is.not.null;\r",
													"        pm.expect(jsonData.workflows[0].state).to.eql(\"Active\");\r",
													"    });\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : InReview\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"InReview\");\r",
													"    });\r",
													"\r",
													"    ////////// Assigned column is populated /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Assigned column is populated\", function () {\r",
													"\r",
													"        pm.expect(jsonData.assigned.userIds).is.not.null;\r",
													"        pm.expect(jsonData.assigned.userNames).to.eql(\"Test Controller\");\r",
													"        pm.expect(jsonData.assigned.emails).to.eql(\"testcontroller@useful.no\");\r",
													"    });\r",
													"\r",
													"    ////////// Amounts are correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
													"        pm.expect(jsonData.netAmount).to.eql(101.0000);\r",
													"        pm.expect(jsonData.amount).to.eql(126.1500);\r",
													"        pm.expect(jsonData.vatAmount).to.eql(25.1500);\r",
													"    });\r",
													"\r",
													"    ////////// BuyerRef is correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Type is correct\", function () {\r",
													"        pm.expect(jsonData.buyerRef.userId).to.be.not.null;\r",
													"        pm.expect(jsonData.buyerRef.userName).to.eql(\"Test Controller\");\r",
													"        pm.expect(jsonData.buyerRef.email).to.eql(\"testcontroller@useful.no\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=1&filter=%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"invoices"
											],
											"query": [
												{
													"key": "skip",
													"value": "0",
													"disabled": true
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "%5B%22invoiceNumber%22%2C%22%3D%22%2C%22{{invoiceNumber}}%22%5D"
												}
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Attachment",
							"item": [
								{
									"name": "PWA /invoices/ID/- attachment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    for (x in jsonData) {\r",
													"        \r",
													"            pm.environment.set(\"attachmentId\", jsonData[x].attachmentId);\r",
													"        }\r",
													"}\r",
													" console.log(\"attachmentId is : \" +pm.environment.get(\"attachmentId\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "files",
												"value": "JVBERi0xLjUKJbXtrvsKNCAwIG9iago8PCAvTGVuZ3RoIDUgMCBSCiAgIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlCj4+CnN0cmVhbQp4nGVPu27DMAzc+RUc7cGMqAcpjS2QpVtRbUWHwLCTDgrQxv+PKo0tA60ICLgjeXdkNLUGrl/0TDEmVcaxwBeY39b3GQ8ng+cbPGdIlOrT8FhqyDohm1Qs2mApBmUnmAsc5sEMBhnzDO/d21Q+rxPmniV2023Bp561W5bT2A+uu5TpuvQf+QWO+W5NQaJYfSRwNpIyI6uQxoBlZ5Kj5AM69qRJ0RqtAWqkpCRuxyPaaMirwj4iUk2kSTS8mow7ExKJDZsEsg/VPEBzWYm6suXYmJZzlfh7yYgX+H/dDK/wA1/mVWAKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCiAgIDIyOAplbmRvYmoKMyAwIG9iago8PAogICAvRXh0R1N0YXRlIDw8CiAgICAgIC9hMCA8PCAvQ0EgMSAvY2EgMSA+PgogICA+PgogICAvRm9udCA8PAogICAgICAvZi0wLTAgNiAwIFIKICAgPj4KPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2UgJSAxCiAgIC9QYXJlbnQgMSAwIFIKICAgL01lZGlhQm94IFsgMCAwIDU5NS4yNzU1NzQgODQxLjg4OTc3MSBdCiAgIC9Db250ZW50cyA0IDAgUgogICAvR3JvdXAgPDwKICAgICAgL1R5cGUgL0dyb3VwCiAgICAgIC9TIC9UcmFuc3BhcmVuY3kKICAgICAgL0kgdHJ1ZQogICAgICAvQ1MgL0RldmljZVJHQgogICA+PgogICAvUmVzb3VyY2VzIDMgMCBSCj4+CmVuZG9iago3IDAgb2JqCjw8IC9MZW5ndGggOCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKICAgL0xlbmd0aDEgNTQyMAo+PgpzdHJlYW0KeJzlV3t4VNW1X/uss+edmTOTmTxI5pVkSIYQEhNCCEQzIigPpeGhBW6jA4SIVEwA5WGIBLzkgdhghaiIMSJQBYopUkggIGgMVkzrlYRbq14VYin3jpHaoL1jstN1hqC2t/b2u//063f3njN777X2Y/3Wa58DDAAMUAUInoVL55e/Z3xmO4D+LQBp3sKV93vgHmc+gCkNgInS8ruXLhu9cgmAmcaw7+5715RqnW8Gqb+f1ngWL5pfYvotO0f8LqKNWUyEqGe1FQAWE41TFi+9f3VgNb9E4ywaj723bOF8gMD7NF5M44Kl81eXyxWaZTTeRWNP+fJF5eO1v6eupR2ALwYJSkWDXMp3kbRaGBYwyV+B5ium4+skGTLbu0LXgdIV6gplRVu9Vp/X6i2VoX8FJvR/Ihq05j9+vlzjBwY1gxfknfwypMJDgYIok2Q2Si63S6eXtAbJ7XZNMBhdbtnBwPGcfWvcNqu8Dbb6HrNuTnMZjO4ELSQlxJsztPH2pDTl/fZQf6jHasunQkf39PWElN4vepUOa2x+1rRZc7SK+VPqDjVzkw5a/IwVH3b7M/3f82Mxc4xiyUkahz3GzVzMYZe9ScNTc10sJ3tM7ujhmWwUyx2dkpMdI09e8dZdu19etefB8/8uPhAXl3xWVRFa/tO2mu0V599ksVfu+Q3f9XremKqVCxe549PfPfzuR1mZb0+6ufah+9a64zJO7uvoGU7mhGWEe51cAXZIgPJACjiYvlpXyx0vMt5qYsfiWm0tps2JCQ5J59DBNMlmmZSo9If6Qu0EMIIu1KP0Uu3rJUJWwF/oLHc2Od92XnbyQihkhVKhozCBj9Rm6jL1Iw1lUMbKpDJHWYK+eBkjrN4IsDyHmSV7wKpATjZoI/i18rr+g6bOI0tOL1j49g9FnzjN/P3nmbZF2l27vdUs3TnvxOnRow+MGMnGMgOLZjeJD9qfOHSgkVwSjgJonYQpCeYFhmts+jgLaJxah6nG6cGWhLZ4RQtWi06nKbLqLEWJcbphNycTpuz+/v5QBFVmQUFPX0F7KNtqI5MForNSilLKU7akNFF9JeXDlMEUPcl+A0ke47AmW0cPV+317U6OI8KU/ZNObnjpROvyB+r3tC5f9eie1tbC5jUP7sO6tSuvnB/4gdT43I4TuwZqpMadT7/y/ECNHDxw94K15Nlkl1MEZI3GHvHp9IBZc0L+GbRJnOlkuFmn9BeEsknOnv5QVsCo6AP6In1QX67nrDg6J3J+8qkWKnLwqyaN/dKQTuQS0kk0jAnEox7QzDQ1ZmuLqc3AJB1Mj9LrjDfbVTX0hVQN9PS1hyLwDwUdv3JIhPevASxpWbt22/7W1gkvP3CqQ9qlQnq2UYVEUBaVfAZsMEznXuLdhGIqoZC2wXqZBTARAlyndPX099BZfaHsLDat2TB7znHQQYCE1YFu8ORYa97YuYFo0LtBYYrk1qo4y/XP6vXF6HV4SQqvRv5soPfMQC/v3hvu5ukqzrLBC3iacKbCxaE4njUUxrO+CWOoZnWyvdpRF9dqlVt9Ld/E8cwEnVmrsydNSlP62ylpfDuOQ4q40qtc6bX9eRxfC2NIpTAOLE00JBoTTaPI2UcaR5rG68cbxhvHm4we8LAUKc2QZhwRnWnPdIyISXOluf0evzcltdpQbaw2VUfZyPJMkjQGjRFNGIVmtKCC8TgMEzBRdupTM/2F/rv86/xV/i3+Jv9lf1wxUBj9RcLQJP/PhDGGjIWPTH9hXl3dgq2F7bu//PW81+4t7Zi/YfOifYF9T370y9JDcuGBtLTZswNTvOYRT9XtOJycfCI3d+6MaUU+S8q2DY37XapfMsgj5/ycN5IfjQ3Em7nOgi+ClbXpagxG0rIMOsVmVv2ooJ1+2armMkNXYyk/P+vgSw6mepJqPnvMeOYgUXOtybk5VraKVYiN01YcP969s6aGN4pX6wea6qZvf/YdKVjPbrgaE4qa78mXJLqbXg3cSOeCzGXJyrnMrAY0gFUCRIPWymWNStRb0aBTGRMAtdsYrtdzvU6rkVFioOcGo9LVHhsJ956ukG3IpvxTLf2uNbqrXeVqn4zsMalGnmBhFsmitegsMAdWQjlsBr2W6SQN6uUYFi/dweZIRaa72WJpNVsprcXl8irtal0Nq5WqTE9KT2GDHEuW0zMvy2HJ6MVkqU30Sj5R8YmU/07twF213dw8EI8HwulsnVgfwV5BeTqD/NoAPmgLpMa7jbF6M7wYq2k1Wz3V7qOJrcnkxrEmiMU4NZbdqLNPGk7x/FZXKFtVPuFs7+nrJy/uoHxtzbfmq/n6vixnlivLneXJ8mYlFaYGnAFXwB3wBLyBpCJnkavIXeQp8hYlFaWWp2501rhq3DWeGu/GpC2pTamXU13Xll5bdG1B0BV0Bz1Bb7mr3F3uKfdWuarcVZ4qb1wxWT/iquSc17M8Mj0lfvIBclBvbiS7aHMjmUU68eH+9WVPtba0FLbV7j8z8BWTfvJE8PDsRSfm/eGylFNasWDFu4f8tw6s31s6/9TO4ydt6x4ZNWpvamq/6qN0p+FF0lU8FAYSKNZrZXN1VK1BjfVYUtIwrS0KJtsnDVP6e7JD10K7Tw1tyqaWBCWhKmFLQlMCZ9+6jK/dUknqLeWlaLo4/Zmilzs6Xi56Zvptu4sHxDmWwTS375Rz96enX+jsvJCevjclhS4JM7OxccnwdQ6mnB4No/88Bz/x13Nw6FoOPhi8GjffzsDW/yUDa+wDjWoKjpyMoL7RmUCWplProkhCMMM6GGSz2Hy2mj3Efix1SO97hnuyPOM8+71Jg4PquxY0sZksSPzKIX408fO/5n93YXTG+2w728EaqTYN1Q6qb7A3iK/5m6v/nmL4O+YwunW+qxhB1YcaWWqJAnmIjsC/nqMD/f9Zvv8XheVCC5yhegr2wg62h0alRF5GlCbpIGyEB4jyGjvD6qQMou2By3CWZtbAGdwrA5sKOUQFeJdL0MdmwyHaI5/ZWT7laJCny4fkmXKLfFHuhDx5hdwpB+UVLAd38jv4Hnry8XXJBr8AN7SwD2EFHMVLmINt8kTZDB9iJ+6FT+gU1a5noB52QQXJYmdlsE6qkGYS5TTvhO1Uy4jfSV56lqQ7yh6GbngSZWkyNLJuwnUGvoCHcba0jlwjRyol+U/TXp20fjuskIF3MwMIKZ1oJD2dtSDy78QM3h2plynKKmA27NK0aOzaZDpF1dge9hoLaR6HJjiLP8Bl+B7bKCfLL8iTof6qBjAI9bT3dnWNppStIexqrVB3l1bJQbYXLslB7QLa+3UVEZ15SJpJiEqhjZ5VGoUwjWcbsY4kVblO6NROlTNpPe2grSTUAGWYC0uoVwEH4CBkYAPU004RvJo8/gWt3CF/TJjr2aPSF9CJE8EPpXIv6Zo+F6AB4IhWwyO36UiP0iz5ppQ0B2bM8bwx15sx8i+GHkXraYai5qg1npbBwaI5cgKf28wTm9Gna5Z9yR9/F/PjjJHTiuZ4mgcmTRzadVJwItFmzaGuOiIy0SdNjPDUQ5u5j35Tgs2ehYs9m5RNyeM2KYvGZUAkA0p3trR1Bd++y1JwBdy6iA+ffTW9/1r75bn+W81z9fTtCSqTXXVy0tdS4aTvV/HlufAM89wh+jfFTB5ayu1QI4dgmfYMHJXy4RS3UfsIZfwLg2E5nXSdDHl8DSjyRaiQS2GZyh9aP5EOKSDh6P1Gom9kTKFnx9VHphzF76Xnd5Q0e0gsmqN7Qf2ujkhhxtmQDospk6lvR0+pUssOKYZauUWqCgx+JTBsx//24R+z8csG/MKMVwT2CfyDDz834+8b8LIPP9t0I/9MYG8DftqAoTD+Vxj/U+Clcfi7CXhR4G+z8ZOeWfyTBuyhiT2z8ML5TH4hjOcz8WOBHwn8MBv/w44fNOD7At+z4W8q8d1j+GuB52j6uUrs7rqFd1di1y149p0EflbgOwn4bwLfFvgrgb8U2NmAb51x8bcEnnHhm9n4C4EdG628IxFfj8F2ga8JfFXgKYEnBb4i8ITA4wLbBB4TeNSKrdU+3iqw5cgx3iLwyOFifuQYHqmSD//cxw8XBwbxcED+uQ8PCXy5AQ8K/JnAZoEvCTxQgj814/59Pr6/BPfttfF9PtxrwxdJ6BfD+ILAnwjcI3C3DXcJfH6nmT+fjTvN+FwJNtGUpgZ8VmDjMyZ6U8VnTLjj6Xi+owSf3q7wp+Nxu4JPGfBJgU80RPEnBDZE4TZatK0Btz5u5lvT8HEz/jiMj205xh8TuKW+mG85hluq5Pof+Xh9MdYH5B/58FGBmx8ZxTcLfGQUbiKYm27Eulojr7NjrRFriFBTgtWkqWofbrTivwp8eIOVPyxwgxXXC6wSuE5gYPChykr+kMDKSlxbghWzHbzChw8KXCNwtRlXmXClAR8QeH8YV4RxeRiXhbFcYJnA+wTe68UfClxincCXzMJ7BC6uxLtpUCpwkcASgQsFLhA4fxwGw3inCYsF/ovAeQLnzjHwuWGcY8Dvx8Tz72fjHQJvp5Nvn4CzHTiLKXxWHM6044yp0XyGwCIjfk/g9NsUPl3gbQreKnAacaYJnDpF4VOjcYozik9RcHIU3iLw5gac1IATBd4kZfCbwjjhGN44DQMCCwXecL2N32DH6wss/HobFoyP4gWBQQuOj8JxAvMFjs2z87FhzBuj8Dw7jsk18jEK5hpxtAtzojD7OiPPFnidEbMyjTwrCjONOCpDz0cpmKHHkdmYPsLH00twhN/GR/jQb8O0VB9PuxFTfTjcZ+TDLegzYorAZIFJFvQSTq8NPSXoDqOLILhK0BmFiaTBRIEJYRw2AeNpEC8wrgRjSVOxAmNoUUw8OgTaBUYLtNEEm0ArYbVOQKUSLSVoFhhliuFRAk002xSDRoEGBfUCdTRNJ1BrR00JysSUyQMcSFQUlKUVLmUgUxAEshZWsvFRlv7PUOAfLcDfLM4/AQ3AOe8KZW5kc3RyZWFtCmVuZG9iago4IDAgb2JqCiAgIDM3MjUKZW5kb2JqCjkgMCBvYmoKPDwgL0xlbmd0aCAxMCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnicXZHPboMwDMbveQofu0NFoLS0EkKauguH/dHYHiAkhkYaIQrhwNvPSapO2oH4F9vfJ+Nk1/alNdpD9uFm2aGHQRvlcJlXJxF6HLVheQFKS3+/xVNOwrKMxN22eJxaM8ysriH7pOLi3Qa7ZzX3+MQAIHt3Cp02I+y+r11Kdau1Pzih8cBZ04DCgexehX0TE0IWxftWUV37bU+yv46vzSIU8Z6nkeSscLFCohNmRFZz3kA9DA1Do/7V8kOS9IO8Ccfq44FaOafA6tMxMgVilVgFviS+BMbESFzwyBTIp0w+JXGVPKvgWaV8FfJlHpkC+SQ+RU79pzjDOfE5Dn+fMvxG2PdjP3J1jlYTHyXuJGxDG3y8m51tUMXvF28Fi6EKZW5kc3RyZWFtCmVuZG9iagoxMCAwIG9iagogICAyODYKZW5kb2JqCjExIDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvcgogICAvRm9udE5hbWUgL0FOWkhOSitEZWphVnVTYW5zCiAgIC9Gb250RmFtaWx5IChEZWphVnUgU2FucykKICAgL0ZsYWdzIDMyCiAgIC9Gb250QkJveCBbIC0xMDIwIC00NjIgMTc5MyAxMjMyIF0KICAgL0l0YWxpY0FuZ2xlIDAKICAgL0FzY2VudCA5MjgKICAgL0Rlc2NlbnQgLTIzNQogICAvQ2FwSGVpZ2h0IDEyMzIKICAgL1N0ZW1WIDgwCiAgIC9TdGVtSCA4MAogICAvRm9udEZpbGUyIDcgMCBSCj4+CmVuZG9iago2IDAgb2JqCjw8IC9UeXBlIC9Gb250CiAgIC9TdWJ0eXBlIC9UcnVlVHlwZQogICAvQmFzZUZvbnQgL0FOWkhOSitEZWphVnVTYW5zCiAgIC9GaXJzdENoYXIgMzIKICAgL0xhc3RDaGFyIDExNgogICAvRm9udERlc2NyaXB0b3IgMTEgMCBSCiAgIC9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCiAgIC9XaWR0aHMgWyAzMTcgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDY4NCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgNjM0IDYxMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2MTIgMCA1NDkgMCA2MTUgMCAwIDYzMyAyNzcgMCAwIDAgOTc0IDYzMyAwIDAgMCAwIDUyMCAzOTIgXQogICAgL1RvVW5pY29kZSA5IDAgUgo+PgplbmRvYmoKMSAwIG9iago8PCAvVHlwZSAvUGFnZXMKICAgL0tpZHMgWyAyIDAgUiBdCiAgIC9Db3VudCAxCj4+CmVuZG9iagoxMiAwIG9iago8PCAvUHJvZHVjZXIgKGNhaXJvIDEuMTYuMCAoaHR0cHM6Ly9jYWlyb2dyYXBoaWNzLm9yZykpCiAgIC9DcmVhdG9yIDxGRUZGMDA0OTAwNkUwMDZCMDA3MzAwNjMwMDYxMDA3MDAwNjUwMDIwMDAzMTAwMkUwMDMwMDAyMDAwMjgwMDY4MDA3NDAwNzQwMDcwMDA3MzAwM0EwMDJGMDAyRjAwNjkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyRTAwNkYwMDcyMDA2NzAwMjk+CiAgIC9DcmVhdGlvbkRhdGUgKEQ6MjAyMDEyMDIxODQ4NDYrMDEnMDApCj4+CmVuZG9iagoxMyAwIG9iago8PCAvVHlwZSAvQ2F0YWxvZwogICAvUGFnZXMgMSAwIFIKPj4KZW5kb2JqCnhyZWYKMCAxNAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDU1OTIgMDAwMDAgbiAKMDAwMDAwMDQ1MSAwMDAwMCBuIAowMDAwMDAwMzQyIDAwMDAwIG4gCjAwMDAwMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDMyMCAwMDAwMCBuIAowMDAwMDA1MTgzIDAwMDAwIG4gCjAwMDAwMDA2ODMgMDAwMDAgbiAKMDAwMDAwNDUwMiAwMDAwMCBuIAowMDAwMDA0NTI1IDAwMDAwIG4gCjAwMDAwMDQ4ODkgMDAwMDAgbiAKMDAwMDAwNDkxMiAwMDAwMCBuIAowMDAwMDA1NjU3IDAwMDAwIG4gCjAwMDAwMDU5MzMgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSAxNAogICAvUm9vdCAxMyAwIFIKICAgL0luZm8gMTIgMCBSCj4+CnN0YXJ0eHJlZgo1OTg2CiUlRU9GCg==",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"contentType": "application/pdf",
													"type": "file",
													"src": "/Users/duygueren/Desktop/postman/AttachmentForPostAndDelete_(1).pdf"
												},
												{
													"key": "files",
													"value": "JVBERi0xLjUKJcK1w63CrsO7CjQgMCBvYmoKPDwgL0xlbmd0aCA1IDAgUgogICAvRmlsdGVyIC9G\nbGF0ZURlY29kZQo+PgpzdHJlYW0KeMKcZU/Cu27DgzAMw5zDuRUcw63DgcKMwqgHKcKNLcKQwqVb\nUW1FwofDgMKwwpMOCsOQw4bDv8KPKsKNLQPCrQgIwrgjeXdkNMK1BsKuX8O0TDEmVcOGwrHDgBfC\nmMOfw5bDtxkPJ8KDw6cbPGdIwpTDqsOTw7BYasOIOiHCm1Qsw5pgKQZlJ8KYCxzDpsOBDAYZw7MM\nw6/DncObVD7CrxPDpsKeJXbDk23DgcKnwp7CtVvClsOTw5gPwq7Cu8KUw6nCusO0H8O5BcKOw7lu\nTUHColh9JHA2wpIyI8KrwpDDhsKAZWfCksKjw6QDOsO2wqRJw5Eawq0BasKkwqQkbsOHI8OaaMOI\nwqvDgj4iUk3CpEk0wrzCmsKMOxMSwokNwpsEwrIPw5U8QHNZwonCusKyw6XDmMKYwpZzwpXDuHvD\nicKIF8O4f8OdDMKvw7ADX8OmVWAKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCiAgIDIyOAplbmRv\nYmoKMyAwIG9iago8PAogICAvRXh0R1N0YXRlIDw8CiAgICAgIC9hMCA8PCAvQ0EgMSAvY2EgMSA+\nPgogICA+PgogICAvRm9udCA8PAogICAgICAvZi0wLTAgNiAwIFIKICAgPj4KPj4KZW5kb2JqCjIg\nMCBvYmoKPDwgL1R5cGUgL1BhZ2UgJSAxCiAgIC9QYXJlbnQgMSAwIFIKICAgL01lZGlhQm94IFsg\nMCAwIDU5NS4yNzU1NzQgODQxLjg4OTc3MSBdCiAgIC9Db250ZW50cyA0IDAgUgogICAvR3JvdXAg\nPDwKICAgICAgL1R5cGUgL0dyb3VwCiAgICAgIC9TIC9UcmFuc3BhcmVuY3kKICAgICAgL0kgdHJ1\nZQogICAgICAvQ1MgL0RldmljZVJHQgogICA+PgogICAvUmVzb3VyY2VzIDMgMCBSCj4+CmVuZG9i\nago3IDAgb2JqCjw8IC9MZW5ndGggOCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKICAgL0xl\nbmd0aDEgNTQyMAo+PgpzdHJlYW0KeMKcw6VXe3hUw5XCtV/Du8KswrPDp8KdwpkzwpPCmTxIw6bC\nlWRIwoYQEhNCCEQzIigPwqXDocKhBW7CowPChMKIVEwAw6VhwogEwrzDpMKBw5hgwoXCqMKIMSJQ\nBcKKKVJIICBoDFZMw6vClcKEW8KrXhViKcO3wo7CkcOawqDCvWPCssOTdcKGwqDCtsK3w7bDtsK7\nw7/DtMOrd8O3wp4ze8OvwrXDtmPDvcOWa8KfAwwADFAFCMKewoVLw6fCl8K/Z3xmO8KAw74tAGnD\nnsOCwpXDt3vDoB5nPsKAKQ3CgMKJw5LDssK7wpcuG8K9cgnCgMKZw4bCsMOvw657w5fClGrCnW8G\nwqnCv8Kfw5Z4Fi/Cml9iw7otO0fDvC7CosKNWUzChMKoZ8K1FQAWE8KNUxYvwr1/dWA1wr9Ew6Ms\nGsKPwr3Ct2zDoXzCgMOAw7s0XkzDo8KCwqXDs1fCl8OLFcKaZTTDnkVjT8O5w7JFw6XDo8K1wr/C\np8KuwqUdwoAvBglKRcKDXMOKd8KRwrRaGBYww4lfwoHDpivCpsOjw6skGTLDm8K7QsOXwoHDkhXD\nqgplRVvCvVbCn8OXw6otwpXCoX8FJsO0fyIawrTDpj9+wr5cw6MHBjXCgxfDpMKdw7wywqTDgkPC\ngcKCKMKTZDZKLsK3S8KnwpfCtAbDicOtdk0wGF1uw5nDgcOAw7HCnH1rw5w2wqvCvA3CtsO6HsKz\nbk5zGcKMw64ELSQlw4TCmzPCtMOxw7bCpDTDpcO9w7ZQf8Kow4dqw4vCp0JHw7fDtMO1woTClMOe\nL3rClQ5rbH7DlsK0WXPCtMKKw7lTw6oONXPCkw5aw7zCjBUfdsO7M8O9w5/Ds2Mxc8KMYsOJSRrC\nhz3DhsONXMOMYcKXwr1Jw4NTc10sJ3tMw67DqMOhwplsFMOLHcKdwpLCkx0jT17DscOWXcK7X17C\ntcOnw4HDs8O/Lj4QF8KXfFZVEVrDvsOTwrbCmsOtFcOnw59kwrFXw67DuQ3Dn8O1esOewpjCqsKV\nCxfCucOjw5PDnz3DvMOuR1nCmW9PwrrCucO2wqHDu8OWwrrDozJOw67Dq8OoGU7DpsKEZcKEe8Kd\nXAF2SMKAw7JACjjCmMK+WlfDix0vMsOeamLDh8OiWm0twqbDjcKJCQ5Jw6fDkMOBNMOJZsKZwpTC\nqMO0wofDukLDrQQwwoIuw5TCo8O0UsOtw6slQlbDgF/DqCx3NjnDn3ZedsOyQihkwoVSwqHCozDC\ngcKPw5Rmw6oyw7UjDWVQw4bDisKkMkdZwoLCvngZI8Ksw54IwrA8wofCmSV7w4DCqkBONmgjw7jC\ntcOywrrDvsKDwqbDjiNLTi9Yw7jDtg9Fwp84w43DvMO9w6fCmcK2RcOaXcK7wr3DlSzDnTnDr8OE\nw6nDkcKjD8KMGMOJw4YyA8KLZjfCiQ/DmsKfOHTCoMKRXBLCjgJowp3ChCkJw6YFwoZrbMO6OAto\nwpxawofCqcOGw6nDgcKWwoTCtnhFC1bCi07CpynCssOqLEXCiXHCumE3JxPCpsOsw77DvsO+UARV\nZkFBT19BeyjDm2ojwpMFwqLCs1LCilLDilPCtsKkNFF9JcOlw4PClMOBFD3DiX4DSR7Do8KwJltH\nD1fDrcO1w61Owo4jw4LClMO9wpNObnjDqUTDq8OyB8Oqw7fCtC5fw7XDqMKew5bDlsOCw6Y1D8Ou\nw4PCusK1K8Kvwpwfw7jCgcOUw7jDnMKOE8K7BmrCpMOGwp1Pwr/DssO8QMKNHDxww7fCgsK1w6TD\nmWTCl1MEZMKNw4Yew7HDqcO0woBZc0LDvhnCtEnCnMOpZMK4WcKnw7QXwoTCsknDjsKew75QVsOA\nwqjDqAPDuiJ9UF/CrsOnwqw4OidyfsOywqkWKnLDsMKrJsKNw73DksKQTsOkEsOSSTTCjAnDhMKj\nHsOQw4w0NWZrwovCqcONw4AkHUzCj8OSw6vCjDfDm1U1w7TChVQNw7TDtMK1wociw7APBR3Cv3JI\nwoTDt8KvASxpWcK7dsObw77DlsOWCS8/cMKqQ8OawqVCesK2UcKFRFAWwpV8BmwwTMOnXsOiw53C\nhGIqwqHCkMK2w4F6wpkFMBECXMKndMO1w7TDt8OQWX3CocOsLDbCrcOZMHvDjnHDkEHCgMKEw5XC\ngW7DsMOkWGvDnsOYwrnCgWjDkMK7QWHCisOkw5bCqjjDi8O1w4/DqsO1w4XDqHV4SQrCr0bDvmzC\noMO3w4xAL8Ovw54bw67DpsOpKsOOwrLDgQt4wppwwqbDgsOFwqE4wp41FMOGwrPCvgljwqhmdcKy\nwr3DmlEXw5dqwpVbfS3Dn8OEw7HDjATCnVnCq8KzJ01KU8O6w5spaXw7wo5DworCuMOSwqtcw6nC\ntcO9eRxfC2NIwqUwDixNNCQaE03Co8OIw5lHGkfCmsOGw6vDhxvDhhvDh8Kbwowew7DCsBQpw43C\nkGYcEcKdacOPdMKMwohJc8KlwrnDvR7CvzclwrXDmlBtwqw2VUfDmcOIw7JMwpI0BsKNEU0YwoVm\nwrTCoMKCw7E4DBMwUXbDqlMzw73ChcO+wrvDvMOrw7xVw74tw74mw79lf1wxUBjDvUXDgsOQJMO/\nw4/ChDHChsKMwoXCj0x/YV5dw53CgsKtwoXDrcK7wr/DvMO1wrzDl8OuLcOtwpjCv2HDs8KifcKB\nfU9+w7TDi8OSQ3LDocKBwrTCtMOZwrMDU8K8w6YRT8OVw604wpzCnHwiN3fDrsKMaUU+S8OKwrYN\nwo3Du13Cql8yw4gjw6fDvMKcN8KSH8KNDcOEwpvCucOOwoIvwoLClcK1w6lqDEbDksKyDDrDhWZW\nw73CqMKgwp1+w5nCqsOmMkNXYyk/P8Orw6BLDsKmesKSaj57w4x4w6YgUXPCrcOJwrk5VsK2wopV\nwojCjcOTVhw/w57CvcKzwqbChjfCilfDqwfCmsOqwqZvf8O2HSlYw49uwrgaE8KKwprDr8OJwpck\nwrrCm14Nw5xIw6fCgsOMZcOJw4rCucOMwqwGNMKAVQJEwoPDlsOKZcKNSsOUW8ORwqBTGRMAwrXD\nmxjCrsOXc8K9TsKrwpFRYsKgw6cGwqPDksOVHhsJw7fCnsKuwpBtw4jCpsO8Uy3DvcKuNcK6wqtd\nw6Vqwp/CjMOsMcKpRsKeYGEWw4nCosK1w6gsMAdWQjlsBsK9wpbDqSQNw6rDpRgWL8Odw4HDpkhF\nwqbCu8OZYmk1WynCrcOFw6XDsirDrWpdDcKrwpXCqkxPSk9hwoMcS8KWw5MzL8OLYcOJw6jDhWTC\nqU3DtEo+UcOxwonClMO/TsOtw4BdwrXDncOcPBDCjwfDgsOpbMKdWB/DgV5BeTrCg8O8w5oAPmgL\nwqTDhsK7wo3CsXozwrwYwqtpNVs9w5XDrsKjwonCrcOJw6TDhsKxJsKIw4U4NcKWw53CqMKzTxpO\nw7HDvFZXKFtVPsOhbMOvw6nDqycvw67CoHxtw43Ct8OmwqvDucO6wr4sZ8KWK8OLwp3DpcOJw7Jm\nJRXCpgbCnAFXw4Adw7AEwrzCgcKkImfCkcKrw4hdw6Qpw7IWJRXCpcKWwqdudMOWwrhqw5w1wp4a\nw6/DhsKkLcKpTcKpwpdTXcOXwpZeW3RtQcOQFXQHPUFvwrnCq8OcXcOuKcO3VsK5wqrDnFXCnipv\nXDFZP8OiwqrDpMKcw5fCszwyPSV+w7IBclBvbiTCu2hzI8KZRTrDscOhw77DtWVPwrXCtsK0FMK2\nw5XDrj8zw7AVwpN+w7JEw7DDsMOsRSfDpsO9w6HCssKUU1rCsWDDhcK7wofDvMK3DsKsw59bOsO/\nw5TDjsOjJ23Dqx4ZNWpvamrCv8OqwqN0wqfDoUXDklU8FAYSKMOWa2VzdVTCrUHCjcO1WFLDkjDC\nrS0KJsObJw1Tw7p7wrJDw5dCwrtPDW3DisKmwpYEJcKhKmFLQlMCZ8OfwrrCjMKvw51SScOqLcOl\nwqVowro4w73CmcKiwpc7Ol4uembDum3Cu8KLB8OEOcKWw4E0wrfDr8KUc8O3wqfCp1/DqMOswrzC\nkMKewr43JcKFLgkzwrPCsXHDicOwdQ7CpsKcHg3Co8O/PAc/w7HDl3Nww6haDj4YwrwaN8Ofw47D\ngMOWw78lA2vDrAPCjWoKwo7CnMKMwqDCvsORwplAwpbCplPDq8KiSEIww4M6GGTCs8OYfMK2wpo9\nw4R+LHVIw697woZ7wrI8w6M8w7vCvUnCg8KDw6rCuxY0wrHCmSxIw7zDiiF+NMOxw7PCv8Omf3dh\ndMOGw7tsO8Obw4Eawqk2DcOVDsKqb8KwN8KIwq/DucKbwqvDv8KeYsO4O8OmMMK6dcK+wqsYQcOV\nwocaWWrCiQJ5wojCjsOAwr/CnsKjA8O9w79Zwr7DvxfChcOlQgvCnMKhegrDtsOCDsK2wodGwqVE\nXkbClCbDqSBswoQHwojDsho7w4PDqsKkDMKiw63CgcOLcMKWZsOWw4AZw5wrA8KbCjlEBXjCl0vD\nkMOHZsODIcOaI8Kfw5lZPsOlaMKQwqfDi8KHw6TCmXLCi3xRw67ChDx5woXDnCkHw6UVLAd3w7I7\nw7geesOyw7F1w4kGwr8AN8K0wrAPYQUcw4VLwpjCg23DskTDmQwfYifDrsKFT8OoFMOVwq5nwqAe\ndkEFw4liZ2XCsE7CqsKQZhLDpTTDr8KEw61Uw4vCiMOfSV56wpbCpDvDih7Chm54EmVpMjTCsm7D\ngnUGwr7CgMKHccK2wrTCjlwjRyolw7lPw5Newp3CtH47wqzCkMKBdzMDCCnCnWgkPcKdwrUgw7LD\nr8OEDMOeHcKpwpcpw4oqYDbDrMOSwrRow6zDmmQ6RcOVw5gew7YaC2kewocmOMKLP8OAZcO4HsOb\nKCfDiy/DiMKTwqHDvsKqBjAIw7XCtMO3dnXCjcKmwpTCrSHDrGrCrVB3wpdWw4lBwrYXLsOJQcOt\nAsOaw7t1FRHCnXlIwppJwohKwqHCjcKeVRrChTDCjWcbwrHCjiRVwrlOw6jDlE7ClTNpPcOtwqDC\nrSTDlABlwpgLS8KoVwEHw6AgZGADw5TDk04RwrzCmjzDvgXCrcOcIX9MwpjDq8OZwqPDkhfDkMKJ\nE8OBD8Klci/DqcKaPhfCoAHDoMKIVsODI8K3w6lIwo/DkizDucKmwpQ0B2bDjMOxwrwxw5fCmzHD\nsi/Chh5Fw6tpwobCosOmwqg1wp7ClsOBw4HCojlyAsKfw5vDjBPCm8ORwqdrwpZ9w4kffxfDs8Oj\nwozCkcOTworDpnjCmgcmTRzDmnVScCLDkWbDjcKhwq46IjLDkSdNwozDsMOUQ8KbwrnCj35TwoLD\njcKewoXCiz3Cm8KUTcOJw6M2KcKLw4ZlQCQDSnfCtsK0dQXDn8K+w4tScAXDnMK6wogPwp99NcK9\nw79aw7vDpcK5w75bw41zw7XDtMOtCSrCk111csOSw5dSw6HCpMOvV8Oxw6XCucOwDMOzw5whw7o3\nw4VMHlrDisOtUCPCh2DCmcO2DBzClcOyw6EUwrdRw7sIZcO8C8KDYTnCnXTCnQx5fA0ow7JFwqjC\nkEthwpnDih9aP8KRDikgw6HDqMO9RsKib2RMwqFnw4fDlUfCphzDhcOvwqXDp3fClDR7SCzCmsKj\ne0HDvcKuwo5IYcOGw5nCkA7CiynCk8Kpb0dPwqlSw4sOKcKGWsK5RcKqCgx+JTBsw4fDv8O2w6Ef\nwrPDscOLBsO8w4LCjFcEw7YJw7zCgw8/N8Ojw68bw7DCsg8/w5t0I8O/TGBvA37DmsKAwqEww75X\nGMO/U8OgwqVxw7jCuwl4UcOgb8Kzw7HCk8KeWcO8wpMGw6zCocKJPcKzw7DDgsO5TH4hwozDpzPD\nsWPCgR8Jw7wwG8O/w4PCjh80w6DDuwLDn8Kzw6FvKsOxw51jw7hrwoHDp2jDusK5SsOsw67CusKF\nd1diw5cteMO2wp0EflbDoDsJw7hvAsOfFsO4K8KBwr8Uw5jDmcKAb8KdccOxwrcEwp5xw6HCm8OZ\nw7gLwoEdG8KtwrwjEV/Cj8OBdsKBwq8JfFXDoCnCgScFwr4iw7DChMOAw6MCw5sEHhN4w5TCisKt\nw5U+w54qwrDDpcOIMcOeIsOww4jDoWJ+w6QYHsKpwpIPw7/DnMOHDxcHBsOxcEDDvsK5Dw8JfMK5\nAQ8Kw7zCmcOAZsKBLwk8UMKCPzXDo8O+fT7CvsK/BMO3w63CtcOxfT7DnGvDgxdJw6gXw4PDuMKC\nw4DCnwjDnCNwwrcNdwl8fsKnwpk/wp/CjTvDjcO4XAk2w5HClMKmBnxWYMOjMyZ6U8OFZ0zCuMOj\nw6l4wr7CowTCn8Oewq7DsMKnw6NxwrvCgk8Zw7BJwoFPNETDsScENkTDoTZawrTCrQHCtz5uw6Zb\nw5PDsHEzw744wozCj205w4YfE8K4wqXCvsKYbznChlvCqsOkw7ofw7l4fTHDlgfDpB/DucOwUcKB\nwpsfGcOFNwt8ZBRuIsKYwptuw4TCulojwq/Cs2PCrRFrwohQU8KCw5XCpMKpah9uwrTDosK/Cnx4\nwoPClT8scMKDFcOXC8KsEsK4TmBgw7DCocOKSsO+wpDDgMOKSlxbwoIVwrMdwrzDgsKHDwpcI3DC\ntRlXwplwwqUBHxB4fxhXwoRxeRjCl8KFwrFcYMKZw4DDuwTDnsOrw4UfClxiwp3DgMKXw4zDgnsE\nLsKuw4TCu2lQKnDCkcOAEsKBCwUuEDh/HAbDg3jCpwnCiwXDvsKLw4B5AsOnw44xw7DCuWHCnGPD\ngMOvw4fDhMOzw69nw6MdAm/Cp8KTb8KfwoDCsx04wospfFYcw47CtMOjwozCqcORfMKGw4AiI35P\nw6DDtMObFD5dw6BtCsOeKnAaccKmCcKcOkXDoVPCo3HCijPCik9RcHIUw54iw7DDpgbCnMOUwoAT\nBcOeJGXDsMKbw4I4w6EYw544DQMCCwXDnnDCvcKNw59gw4fDqwssw7x6GxbCjMKPw6IFwoFBC8KO\nwo/DgnECw7MFwo7DjcKzw7PCsWHDjBvCo8OwPDvCjsOJNcOyMQrDphpxwrQLc8KiMMO7OiPDjxZ4\nwp0RwrMywo08Kwozwo04KkPDj0cpwpjCocOHwpHDmcKYPsOCw4fDk0twwoTDn8OGR8O4w5Bvw4PC\ntFQfT8K7EVN9OMOcZ8Okw4Mtw6gzYsKKw4BkwoFJFsO0Ek7Crw09JcOoDsKjwosgwrhKw5AZwoXC\nicKkw4FEwoEJYRw2AcOjaRAvMMKuBGNJU8KxAmNoUUw8OgTDmgVGC8K0w5EEwptAK2HCtU5AwqUS\nLSVoFhhlworDoVECTTTDmxTCg0bCgQYFw7UCdTRNJ1BrR00Jw4rDhMKUw4kDHEhUFMKUwqUVLmUg\nUxAEwrIWVsKyw7FRwpbDvsOPUMOgHy3DgMOfLMOOPwENw4A5w68KZW5kc3RyZWFtCmVuZG9iago4\nIDAgb2JqCiAgIDM3MjUKZW5kb2JqCjkgMCBvYmoKPDwgL0xlbmd0aCAxMCAwIFIKICAgL0ZpbHRl\nciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnjCnF3CkcOPbsKDMAzDhsOveQofwrtDRcKgwrTCtBJC\nwprCugvCh8O9w5HDmB4gJMKGRhohCsOhw4DDm8OPScKqTsOawoHDuBfDm8OfJ8OjZMOXw7bCpTXD\nmkPDtsOhZsOZwqHCh0Ebw6VwwplXJxF6HMK1YXkBSkt/wr/DhVNOw4LCssKMw4TDncK2eMKcWjPD\njMKswq4hw7vCpMOiw6LDnQbCu2c1w7fDuMOEACB7dwrCnTYjw6zCvsKvXUp1wqvCtT84wqHDscOA\nWcOTwoDDgsKBw6xewoV9ExNCFsOFw7tWUV3Du21PwrLCv8KOwq/DjSIUw7HCnsKnwpHDpMKscMKx\nQsKiE2ZEVnPDnkA9DA1DwqPDvsOVw7JDwpLDtMKDwrwJw4fDqsOjwoFaOcKnw4DDqsOTMTIFYsKV\nWAXCviTCvgTDhsOESFzDsMOIFMOIwqdMPiVxwpU8wqvDoFnCpXwVw7JlHsKZAsO5JD5FTsO9wqc4\nw4M5w7E5Dn/CnzLDvEbDmMO3Yz9ydcKOVhMfJcOuJGxDG3zCvMKbwp1tUMOFw68XbwXCi8KhCmVu\nZHN0cmVhbQplbmRvYmoKMTAgMCBvYmoKICAgMjg2CmVuZG9iagoxMSAwIG9iago8PCAvVHlwZSAv\nRm9udERlc2NyaXB0b3IKICAgL0ZvbnROYW1lIC9BTlpITkorRGVqYVZ1U2FucwogICAvRm9udEZh\nbWlseSAoRGVqYVZ1IFNhbnMpCiAgIC9GbGFncyAzMgogICAvRm9udEJCb3ggWyAtMTAyMCAtNDYy\nIDE3OTMgMTIzMiBdCiAgIC9JdGFsaWNBbmdsZSAwCiAgIC9Bc2NlbnQgOTI4CiAgIC9EZXNjZW50\nIC0yMzUKICAgL0NhcEhlaWdodCAxMjMyCiAgIC9TdGVtViA4MAogICAvU3RlbUggODAKICAgL0Zv\nbnRGaWxlMiA3IDAgUgo+PgplbmRvYmoKNiAwIG9iago8PCAvVHlwZSAvRm9udAogICAvU3VidHlw\nZSAvVHJ1ZVR5cGUKICAgL0Jhc2VGb250IC9BTlpITkorRGVqYVZ1U2FucwogICAvRmlyc3RDaGFy\nIDMyCiAgIC9MYXN0Q2hhciAxMTYKICAgL0ZvbnREZXNjcmlwdG9yIDExIDAgUgogICAvRW5jb2Rp\nbmcgL1dpbkFuc2lFbmNvZGluZwogICAvV2lkdGhzIFsgMzE3IDAgMCAwIDAgMCAwIDAgMCAwIDAg\nMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2ODQgMCAwIDAgMCAw\nIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDYzNCA2MTAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAg\nNjEyIDAgNTQ5IDAgNjE1IDAgMCA2MzMgMjc3IDAgMCAwIDk3NCA2MzMgMCAwIDAgMCA1MjAgMzky\nIF0KICAgIC9Ub1VuaWNvZGUgOSAwIFIKPj4KZW5kb2JqCjEgMCBvYmoKPDwgL1R5cGUgL1BhZ2Vz\nCiAgIC9LaWRzIFsgMiAwIFIgXQogICAvQ291bnQgMQo+PgplbmRvYmoKMTIgMCBvYmoKPDwgL1By\nb2R1Y2VyIChjYWlybyAxLjE2LjAgKGh0dHBzOi8vY2Fpcm9ncmFwaGljcy5vcmcpKQogICAvQ3Jl\nYXRvciA8RkVGRjAwNDkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyMDAwMzEwMDJFMDAz\nMDAwMjAwMDI4MDA2ODAwNzQwMDc0MDA3MDAwNzMwMDNBMDAyRjAwMkYwMDY5MDA2RTAwNkIwMDcz\nMDA2MzAwNjEwMDcwMDA2NTAwMkUwMDZGMDA3MjAwNjcwMDI5PgogICAvQ3JlYXRpb25EYXRlIChE\nOjIwMjAxMjAyMTg0ODQ2KzAxJzAwKQo+PgplbmRvYmoKMTMgMCBvYmoKPDwgL1R5cGUgL0NhdGFs\nb2cKICAgL1BhZ2VzIDEgMCBSCj4+CmVuZG9iagp4cmVmCjAgMTQKMDAwMDAwMDAwMCA2NTUzNSBm\nIAowMDAwMDA1NTkyIDAwMDAwIG4gCjAwMDAwMDA0NTEgMDAwMDAgbiAKMDAwMDAwMDM0MiAwMDAw\nMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDAzMjAgMDAwMDAgbiAKMDAwMDAwNTE4MyAw\nMDAwMCBuIAowMDAwMDAwNjgzIDAwMDAwIG4gCjAwMDAwMDQ1MDIgMDAwMDAgbiAKMDAwMDAwNDUy\nNSAwMDAwMCBuIAowMDAwMDA0ODg5IDAwMDAwIG4gCjAwMDAwMDQ5MTIgMDAwMDAgbiAKMDAwMDAw\nNTY1NyAwMDAwMCBuIAowMDAwMDA1OTMzIDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgMTQKICAg\nL1Jvb3QgMTMgMCBSCiAgIC9JbmZvIDEyIDAgUgo+PgpzdGFydHhyZWYKNTk4NgolJUVPRgo=",
													"contentType": "application/pdf",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found.\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"%PDF-1.5\"); // Start of file\r",
													"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "27707 Invoice Header",
							"item": [
								{
									"name": "PWA /invoices/ID/headers - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"      ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : InReview\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"status\").eql(\"InReview\");\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : InReview\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"InReview\");\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Root fields\", function () {\r",
													"        pm.expect(jsonData.type).to.eql(\"Invoice\");\r",
													"        pm.expect(jsonData.documentType).to.eql(\"CostInvoice\");\r",
													"        pm.expect(jsonData.serialNumber).to.be.not.empty;\r",
													"        pm.expect(jsonData.voucherNumber).to.be.null;\r",
													"        pm.expect(jsonData.voucherDescription).to.be.oneOf([null, '']);\r",
													"        pm.expect(jsonData.doNotPay).to.be.false;\r",
													"        pm.expect(jsonData.flag).to.be.null;\r",
													"\r",
													"        pm.expect(jsonData.sellerNsAccountingParameter).to.be.null;\r",
													"\r",
													"        pm.expect(jsonData.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonData.exchangeRate).to.eql(1);\r",
													"        pm.expect(jsonData.exchangeRateNumberOfUnits).to.eql(0);\r",
													"        pm.expect(jsonData.reportingAmount).to.eql(126.15);\r",
													"        pm.expect(jsonData.invoiceNumber).to.eql(pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData.invoiceDate).to.be.not.empty;\r",
													"        pm.expect(jsonData.dueDate).to.be.not.empty;\r",
													"        pm.expect(jsonData.kidNumber).to.eql(\"KidNumber-\" + pm.environment.get(\"invoiceNumber\"));\r",
													"       \r",
													"        // pm.expect(jsonData.status).to.eql(\"InReview\");\r",
													"        pm.expect(jsonData).to.have.property(\"showReInvoicingCheckBox\", true);\r",
													"        pm.expect(jsonData).to.have.property(\"reInvoicingEnabled\", true);\r",
													"        pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
													"\r",
													"        // BUG: Subsidiary address for UBL\r",
													"        // pm.expect(jsonData.subsidiaryAddress).to.include(\"externalCode-Delivery\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"        pm.expect(jsonData.buyerRef.name).eql(\"Test Controller\");\r",
													"        pm.expect(jsonData.buyerRef.isValidated).is.true;\r",
													"        pm.expect(jsonData.buyerRef.id).eql(pm.environment.get(\"userIdController\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    ///////// Client OK /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Client OK\", function () {\r",
													"        pm.expect(jsonData.client).to.be.not.empty;\r",
													"        pm.expect(jsonData.client.id).to.be.not.empty;\r",
													"        pm.expect(jsonData.client.name).to.be.not.empty;\r",
													"        pm.expect(jsonData.client.erpId).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    ///////// Supplier matched /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Supplier matched\", function () {\r",
													"        pm.expect(jsonData.seller).to.be.not.empty;\r",
													"        // pm.expect(jsonData.seller.id).to.eql(pm.environment.get(\"cSupplierId-A\"));\r",
													"        pm.expect(jsonData.seller.erpVendorId).to.eql(pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller.vatId).to.eql(\"orgnr-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"        pm.expect(jsonData.seller.bankAccount).to.eql(\"BBAN-\" + pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    ////////// Amounts are correct /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
													"        pm.expect(jsonData.netAmount).to.eql(101.0000);\r",
													"        pm.expect(jsonData.totalAmount).to.eql(126.1500);\r",
													"\r",
													"        if(pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\"){\r",
													"            pm.expect(jsonData.vatAmount).to.eql(25.15);\r",
													"            pm.expect(jsonData.vatAmountHigh).to.eql(25);\r",
													"            pm.expect(jsonData.vatAmountMid).to.eql(0.15);\r",
													"        }\r",
													"\r",
													"        pm.expect(jsonData.vatAmountLow).to.eql(0);\r",
													"        pm.expect(jsonData.totalAmount).to.eql(126.15);\r",
													"\r",
													"        pm.expect(jsonData.exchangeRate).to.eql(1.000000);\r",
													"        pm.expect(jsonData.reportingAmount).to.eql(126.1500000);\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/workflows",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Workflow present\", function () {\r",
													"        pm.expect(jsonData.workflowState).to.eql(\"Active\");\r",
													"        pm.expect(jsonData.steps).to.be.not.empty;\r",
													"        pm.expect(jsonData.steps[0].allowedActions).to.be.not.empty;\r",
													"        pm.expect(jsonData.invoiceLines).to.be.empty;\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/workflows",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"workflows"
											],
											"query": [
												{
													"key": "take",
													"value": "0",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Activities present\", function () {\r",
													"        pm.expect(jsonData.activityId).to.be.not.empty;\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments 1 OK\", function () {\r",
													"        pm.expect(jsonData[0]).to.be.not.empty;\r",
													"        pm.expect(jsonData[0].attachmentId).to.be.not.empty;\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"            pm.expect(jsonData[0].fileName).to.eql(pm.environment.get(\"invoiceNumber\") + \".pdf\");\r",
													"            pm.expect(jsonData[0].isInvoicePdf).to.eql(true);\r",
													"            pm.expect(jsonData[0].mimeType).to.eql(\"application/pdf\");\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"            pm.expect(jsonData[0].fileName).to.eql(pm.environment.get(\"cInvoiceId\") + \"_ubl.xml\");\r",
													"            pm.expect(jsonData[0].isInvoicePdf).to.eql(false);\r",
													"            pm.expect(jsonData[0].mimeType).to.eql(\"text/xml\");\r",
													"        }\r",
													"\r",
													"        // pm.expect(jsonData[0].fileSize).to.not.eql(0);\r",
													"        pm.expect(jsonData[0].isInitialInvoiceDocument).to.eql(true);\r",
													"\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments 2 OK\", function () {\r",
													"        pm.expect(jsonData[1]).to.be.not.empty;\r",
													"        pm.expect(jsonData[1].attachmentId).to.be.not.empty;\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"            pm.expect(jsonData[1].fileName).to.eql(pm.environment.get(\"invoiceNumber\") + \"-2.pdf\");\r",
													"            pm.expect(jsonData[1].isInvoicePdf).to.eql(false);\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"            pm.expect(jsonData[1].fileName).to.eql(pm.environment.get(\"cInvoiceId\") + \"_ubl.pdf\");\r",
													"            pm.expect(jsonData[1].isInvoicePdf).to.eql(true);\r",
													"        }\r",
													"        // pm.expect(jsonData[1].fileSize).to.not.eql(0);\r",
													"        pm.expect(jsonData[1].mimeType).to.eql(\"application/pdf\");\r",
													"        pm.expect(jsonData[1].isInitialInvoiceDocument).to.eql(true);\r",
													"    });\r",
													"\r",
													"    pm.environment.set(\"attachmentId-1\", jsonData[0].attachmentId);\r",
													"    pm.environment.set(\"attachmentId-2\", jsonData[1].attachmentId);\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments/ 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment 1 OK\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment 1 OK\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"<?xml version=\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"</Invoice>\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId-1}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/attachments/ 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment 1 OK\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment 1 OK\", function () {\r",
													"            pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"            pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"            pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"            pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/attachments/{{attachmentId-2}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"attachments",
												"{{attachmentId-2}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PO - Toggle",
							"item": [
								{
									"name": "PWA /invoices/ID/purchaseType - 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 1 304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/invoicelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/dropdown 200, 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,204])\r",
													"})\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response)\r",
													"} \r",
													"//  pm.response.json().on('done', function (err, summary) {\r",
													"//     console.log(summary);\r",
													"// });\r",
													"  \r",
													"//  console.log(summary.collection.name)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/settings/gridviews/GridView_PurchaseOrderRelations/currentuser/organizations/{{organizationId}}/clients/{{datasetId}}/dropdown",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"settings",
												"gridviews",
												"GridView_PurchaseOrderRelations",
												"currentuser",
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dropdown"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/dropdown 200, 204 - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204])\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response)\r",
													"} \r",
													"// console.log(pm)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/settings/gridviews/GridView_PurchaseOrderRelations/currentuser/organizations/{{organizationId}}/clients/{{datasetId}}/dropdown",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"settings",
												"gridviews",
												"GridView_PurchaseOrderRelations",
												"currentuser",
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dropdown"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/purchaseorderrelations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/purchaseorderrelations",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"purchaseorderrelations"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/purchaseType - 2 304",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(304);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoicePurchaseType\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/PurchaseType",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"PurchaseType"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/purchaseorderrelations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/purchaseorderrelations",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"purchaseorderrelations"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /clients/ID/invoicelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SetAsModifiedByApprover",
							"item": [
								{
									"name": "PWA /invoices/ID/setasmodifiedbyapprover Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/setasmodifiedbyapprover",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"setasmodifiedbyapprover"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/ seeActivityForSetasmodifiedbyapprover",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json().data[0];\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ModifiedByApprover is found. \", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"activityOperationType\", \"ModifiedByApprover\");\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Images",
							"item": [
								{
									"name": "PWA /invoices/ID/images",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image array not empty\", function () {\r",
													"        pm.expect(jsonData[0]).to.be.not.empty;\r",
													"        pm.expect(pm.response.text()).to.include(\"images\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body > 1000 bytes\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Original",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body > 1000 bytes\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(40000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Original",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Original"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Medium Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body > 1000 bytes\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(10000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Medium",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Medium"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Small",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body > 1000 bytes\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(5000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Small",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Small"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/images/0 Tiny",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200, 400, 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Image body > 1000 bytes\", function () {\r",
													"\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/images/0?imageSize=Tiny",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"images",
												"0"
											],
											"query": [
												{
													"key": "imageSize",
													"value": "Tiny"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Lines",
							"item": [
								{
									"name": "List",
									"item": [
										{
											"name": "PWA /invoices/ID/invoiceLines - List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 10 seconds\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceLines\", function () {\r",
															"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
															"        pm.expect(jsonData.invoiceLines).to.be.not.empty;\r",
															"        pm.expect(jsonData.invoiceAmounts).to.be.not.empty;\r",
															"\r",
															"    });\r",
															"\r",
															"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
															"        pm.environment.set(\"InvoiceLineId-1\", jsonData.invoiceLines[0].invoiceLineId);\r",
															"        pm.environment.set(\"InvoiceLineId-2\", jsonData.invoiceLines[1].invoiceLineId);\r",
															"        pm.environment.set(\"cAccountTypeParameterId\", jsonData.invoiceLines[0].accountTypeParameterId);\r",
															"    }\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"// console.log(jsonData);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 1",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 1 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdLedger\", jsonData.parameterValueId)\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Apply Ledger Manual 50% of the time\r",
																	"var rnd = Math.random();\r",
																	"// console.log(rnd)\r",
																	"\r",
																	"if (rnd > 0.0) {\r",
																	"    pm.environment.set(\"Ledger-15\", \"Ledger-15-AI\");\r",
																	"} else {\r",
																	"    pm.environment.set(\"Ledger-15\", pm.environment.get(\"Ledger_15_Manual\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/condensed?query={{Ledger-15}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "15 Acc-2101",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{Ledger-15}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdVat\", jsonData.parameterValueId)\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVat}}/values/condensed?query=VAT-15",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "VAT-15"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 1 - Interim",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdInterim\", jsonData.parameterValueId)\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdInterim}}/values/condensed?take=5&query=Interim-1",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdInterim}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5"
																},
																{
																	"key": "query",
																	"value": "Interim-1"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
															"        // pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", JSON.parse(pm.environment.get(\"startPeriodMonth\")));\r",
															"\r",
															"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3)\r",
															"    });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
															"        pm.expect(jsonData.quantity).to.eql(1);\r",
															"        pm.expect(jsonData.unitPrice).to.eql(1);\r",
															"        pm.expect(jsonData.netAmount).to.eql(1);\r",
															"        pm.expect(jsonData.totalAmount).to.eql(1.15);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions not empty\", function () {\r",
															"        pm.expect(jsonData.accountingParameters).to.be.not.empty;\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL1\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 1,\r\n    \"netAmount\": 1,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": {{startPeriodMonth}},\r\n    \"startPeriodYear\": {{startPeriodYear}},\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdInterim}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 1 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var x;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-15\", function () {\r",
															"                pm.expect(jsonData[i].code).to.eql(\"VAT-15\");\r",
															"                // pm.expect(jsonData[i].relationType).to.eql(\"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-1}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-1}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Line 2",
									"item": [
										{
											"name": "Find Codes",
											"item": [
												{
													"name": "PWA /values/condensed 2 - VAT",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdVat-2\", jsonData.parameterValueId)\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdVat}}/values/condensed?query=VAT-25",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdVat}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "VAT-25"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "PWA /values/condensed 2 - Ledger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"//////// Set Environment Variables /////////\r",
																	"if (pm.response.code == 200) {\r",
																	"    const jsonData = pm.response.json()[0]\r",
																	"    pm.environment.set(\"parameterValueIdLedger-2\", jsonData.parameterValueId)\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Apply Ledger Manual 50% of the time\r",
																	"var rnd = Math.random();\r",
																	"// console.log(rnd)\r",
																	"\r",
																	"if (rnd > 1) {\r",
																	"    pm.environment.set(\"Ledger-25\", \"Ledger-25-AI\");\r",
																	"} else {\r",
																	"    pm.environment.set(\"Ledger-25\", pm.environment.get(\"Ledger_25_Manual\"));\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{parameterIdLedger}}/values/condensed?query={{Ledger-25}}",
															"host": [
																"{{PWA}}"
															],
															"path": [
																"organizations",
																"{{organizationId}}",
																"clients",
																"{{datasetId}}",
																"parameters",
																"{{parameterIdLedger}}",
																"values",
																"condensed"
															],
															"query": [
																{
																	"key": "take",
																	"value": "5",
																	"disabled": true
																},
																{
																	"key": "query",
																	"value": "{{Ledger-25}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Basic",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    pm.environment.set(\"cInvoiceLineId\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
															"    pm.environment.set(\"cAccountTypeParameterId\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
															"}\r",
															"\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    var jsonData = pm.response.json().invoiceLines[0];\r",
															"\r",
															"    ///////// Check periods applied /////////\r",
															"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
															"    //     pm.expect(jsonData.startPeriodYear.toString()).to.eql(pm.environment.get(\"startPeriodYear\"));\r",
															"    //     pm.expect(jsonData.startPeriodMonth.toString()).to.eql(pm.environment.get(\"startPeriodMonth\"));\r",
															"    //     pm.expect(jsonData.totalPeriod).to.eql(3);\r",
															"    // });\r",
															"\r",
															"    ////////// Amounts are correct /////////\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
															"        pm.expect(jsonData.quantity).to.eql(4);\r",
															"        pm.expect(jsonData.unitPrice).to.eql(25);\r",
															"        pm.expect(jsonData.netAmount).to.eql(100);\r",
															"        pm.expect(jsonData.totalAmount).to.eql(125);\r",
															"    });\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Suggestions not empty\", function () {\r",
															"        pm.expect(jsonData.accountingParameters).to.be.not.empty;\r",
															"    });\r",
															"\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Apply Parameters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"text\": \"IL2\",\r\n    \"quantity\": 4.0000,\r\n    \"unitPrice\": 25.0000,\r\n    \"netAmount\": 100.00,\r\n    \"vatRate\": 25.0000,\r\n    \"discount\": 0.0000,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    // \"startPeriodMonth\": {{startPeriodMonth}},\r\n    // \"startPeriodYear\": {{startPeriodYear}},\r\n    // \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger-2}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{parameterIdVat}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdVat-2}}\"\r\n        }\r\n        // ,\r\n        // {\r\n        //     \"parameterId\": \"{{parameterIdInterim}}\",\r\n        //     \"parameterValueId\": \"{{parameterValueIdInterim}}\"\r\n        // }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoiceLines/ID 2 - Check VAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"const YYMM = moment().format(\"YYMM\");\r",
															"\r",
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"///////// Check if correct VAT has been applied\r",
															"if (pm.response.code == 200) {\r",
															"\r",
															"    const jsonData = pm.response.json().invoiceLines[0].accountingParameters;\r",
															"    var x;\r",
															"\r",
															"    for (i in jsonData) {\r",
															"        if (jsonData[i].parameterId == pm.environment.get(\"parameterIdVat\")) {\r",
															"\r",
															"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-25\" , function () {\r",
															"                pm.expect(jsonData[i].code).to.eql(\"VAT-25\");\r",
															"                // pm.expect(jsonData[i].relationType).to.eql(\"Fixed\");\r",
															"            });\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"// console.log(pm.response.json());\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{InvoiceLineId-2}}",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{InvoiceLineId-2}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Comments",
									"item": [
										{
											"name": "PWA /invoiceLines/ID 1 -postLineComment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
															"//     console.log(response.json());",
															"// });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"if (pm.response.code == 200) {",
															"const jsonData = pm.response.json();",
															"console.log(jsonData);",
															"",
															"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId\")) {",
															"            var jsonDataAL=jsonData;",
															"        pm.environment.set(\"commentId\", jsonDataAL.commentId);",
															"        pm.environment.set(\"comment\", jsonDataAL.comment);",
															"    }",
															"    }",
															"    console.log(\"CommentId_ is: \" +pm.environment.get(\"commentId\"));",
															"    console.log(\"Comment is: \" +pm.environment.get(\"comment\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenPWA}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"@Test Integration﻿ It is for line-B.\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationId}}\"\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{cInvoiceLineId}}/comments",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"invoicelines",
														"{{cInvoiceLineId}}",
														"comments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "--- Skip to AL Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// console.log('--- Skipping to PWA ---');\r",
													"postman.setNextRequest(\"--- AL Start ---\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Lines - Periods",
							"item": [
								{
									"name": "PWA /accountinglines/generate - Check codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Enumerate accounting lines\r",
													"    // //\r",
													"\r",
													"    // const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    // var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    // for (i in jsonDataAL) {\r",
													"    //     if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
													"    //         jsonDataALHeaderLine = pm.response.json().accountingLines[i];\r",
													"    //     }\r",
													"    //     if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"    //         jsonDataAL1 = pm.response.json().accountingLines[i];\r",
													"    //         jsonDataALP1 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"\r",
													"    //     }\r",
													"    //     if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"    //         jsonDataAL2 = pm.response.json().accountingLines[i];\r",
													"    //         jsonDataALP2 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // //\r",
													"    // //  HEADERLINE\r",
													"    // //\r",
													"\r",
													"    // ////////// VAT Amount //////////\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine vatAmounts\", function () {\r",
													"    //     pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    // });\r",
													"\r",
													"\r",
													"    // ////////// AL 1 Fields //////////\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.id).to.eql();\r",
													"    //     // pm.expect(jsonDataALHeaderLine.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataALHeaderLine.description).to.eql(\"Semine Inngående Faktura\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.lineItemType).to.eql(\"HeaderLine\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataALHeaderLine.netAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.totalAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"    //     pm.expect(jsonDataALHeaderLine.exchangeRate).to.eql(1.000000);\r",
													"    //     pm.expect(jsonDataALHeaderLine.lineNumber).to.eql(1);\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingNetAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingAmount).to.eql(126.15);\r",
													"    //     pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"\r",
													"    //     // pm.expect(jsonDataALHeaderLine.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.kidNumber).to.eql(1);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.dueDate).to.eql(1);\r",
													"    //     // pm.expect(jsonDataALHeaderLine.invoiceNumber).to.eql(1);\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // const jsonDataALP0 = pm.response.json().accountingLines[1].accountingLineParameters;\r",
													"\r",
													"\r",
													"    // var x;\r",
													"    // // AL 1 Parameters\r",
													"    // for (i in jsonDataALP1) {\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Credit\") {\r",
													"    //         //console.log(jsonDataALP0[i])\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 VAT-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"VAT-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    // //\r",
													"    // //  AL 2\r",
													"    // //\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataAL1.id).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL1.description).to.eql(\"IL1\");\r",
													"    //     pm.expect(jsonDataAL1.lineItemType).to.eql(\"AccountingLine\");\r",
													"    //     pm.expect(jsonDataAL1.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataAL1.netAmount).to.eql(1.00);\r",
													"    //     pm.expect(jsonDataAL1.totalAmount).to.eql(1.15);\r",
													"    //     pm.expect(jsonDataAL1.vatAmount).to.eql(0.15);\r",
													"    //     pm.expect(jsonDataAL1.exchangeRate).to.eql(1.000000);\r",
													"    //     // pm.expect(jsonDataAL1.lineNumber).to.eql(2);\r",
													"    //     // pm.expect(jsonDataAL1.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL1.reportingNetAmount).to.eql(1.0);\r",
													"    //     pm.expect(jsonDataAL1.reportingAmount).to.eql(1.15);\r",
													"    //     pm.expect(jsonDataAL1.reportingVatAmount).to.eql(0.15);\r",
													"    //     // pm.expect(jsonDataAL1.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataAL1.kidNumber).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.dueDate).to.eql();\r",
													"    //     // pm.expect(jsonDataAL1.invoiceNumber).to.eql();\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // var x;\r",
													"\r",
													"    // for (i in jsonDataALP1) {\r",
													"\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Vat\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"VAT-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }else{}\r",
													"\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ledger-15\", function () {\r",
													"    //             pm.expect(jsonDataALP1[i].code).to.eql(\"Ledger-15\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"\r",
													"\r",
													"    // //\r",
													"    // //  AL 3  \r",
													"    // //\r",
													"\r",
													"\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 3 Correct\", function () {\r",
													"\r",
													"    //     // pm.expect(jsonDataAL2.id).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.postingDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL2.description).to.eql(\"IL2\");\r",
													"    //     pm.expect(jsonDataAL2.lineItemType).to.eql(\"AccountingLine\");\r",
													"    //     pm.expect(jsonDataAL2.currency).to.eql(\"NOK\");\r",
													"    //     pm.expect(jsonDataAL2.netAmount).to.eql(100.00);\r",
													"    //     pm.expect(jsonDataAL2.totalAmount).to.eql(125);\r",
													"    //     pm.expect(jsonDataAL2.vatAmount).to.eql(25);\r",
													"    //     pm.expect(jsonDataAL2.exchangeRate).to.eql(1.000000);\r",
													"    //     // pm.expect(jsonDataAL2.lineNumber).to.eql(3);\r",
													"    //     // pm.expect(jsonDataAL2.issueDate).to.eql();\r",
													"    //     pm.expect(jsonDataAL2.reportingNetAmount).to.eql(100.0);\r",
													"    //     pm.expect(jsonDataAL2.reportingAmount).to.eql(125);\r",
													"    //     pm.expect(jsonDataAL2.reportingVatAmount).to.eql(25);\r",
													"    //     // pm.expect(jsonDataAL2.voucherTypeId).to.eql(null);\r",
													"    //     // pm.expect(jsonDataAL2.kidNumber).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.dueDate).to.eql();\r",
													"    //     // pm.expect(jsonDataAL2.invoiceNumber).to.eql();\r",
													"\r",
													"    // });\r",
													"\r",
													"\r",
													"    // var x;\r",
													"    // for (i in jsonDataALP2) {\r",
													"\r",
													"    //     if (jsonDataALP2[i].parameterTypeCode == \"Vat\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : VAT-25\", function () {\r",
													"    //             pm.expect(jsonDataALP2[i].code).to.eql(\"VAT-25\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"\r",
													"    //     if (jsonDataALP2[i].parameterTypeCode == \"Ledger\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"    //         pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Ledger-25\", function () {\r",
													"    //             pm.expect(jsonDataALP2[i].code).to.eql(\"Ledger-25\");\r",
													"    //             // pm.expect(jsonDataALP1[i].relationType).to.eql(\"Fixed\");\r",
													"    //         });\r",
													"    //     }\r",
													"\r",
													"    // }\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											],
											"query": [
												{
													"key": "documentType",
													"value": "CostInvoice"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/accountingLines - Period Allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 3) {\r",
													"            jsonDataALPeriod_1 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_1_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"            for(i in jsonDataALPeriod_1_LineParams) {\r",
													"                // if(jsonDataALPeriod_1_LineParams.)\r",
													"            }\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 4) {\r",
													"            jsonDataALPeriod_2 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_2_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"PeriodizedLine\" && jsonDataAL[i].lineNumber == 5) {\r",
													"            jsonDataALPeriod_3 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALPeriod_3_LineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Found period lines?\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_1_LineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_2_LineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_3).to.be.not.empty;\r",
													"        pm.expect(jsonDataALPeriod_3_LineParams).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  PERIOD 1\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period 1 vatAmounts\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1.vatAmount).to.eql(0);\r",
													"        pm.expect(jsonDataALPeriod_1.reportingVatAmount).to.eql(0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    // var testObject = null;\r",
													"    // for (i in jsonDataALHeaderLineParams) {\r",
													"    //     if (jsonDataALHeaderLineParams[i].parameterTypeCode == \"Ledger\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"    //         testObject = jsonDataALHeaderLineParams[i].code\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    //jsonDataALPeriod_1 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period 1\", function () {\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"currency\",\"NOK\");\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"exchangeRate\", 1.0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingNetAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_1).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    //jsonDataALPeriod_2 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period 2\", function () {\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"currency\",\"NOK\");\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"netAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"totalAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"exchangeRate\", 1.0);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingNetAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingAmount\", 0.33);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_2).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"    //jsonDataALPeriod_3 Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period 3\", function () {\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"description\", \"IL1\");\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"lineItemType\",\"PeriodizedLine\");\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"currency\",\"NOK\");\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"netAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"totalAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"vatAmount\", 0.0);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"exchangeRate\", 1.0);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingNetAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingAmount\", 0.34);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"reportingVatAmount\", 0);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"voucherTypeId\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"kidNumber\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"dueDate\", null);\r",
													"        pm.expect(jsonDataALPeriod_3).to.have.property(\"invoiceNumber\", null);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountingLines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountingLines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "--- AL Start ---",
							"item": [
								{
									"name": "--- AL Start ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Accounting Lines",
							"item": [
								{
									"name": "PWA /accountinglines/generate - Check codes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate?documentType=CostInvoice",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											],
											"query": [
												{
													"key": "documentType",
													"value": "CostInvoice"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/accountingLines - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const moment = require(\"moment\");\r",
													"\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().accountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().accountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"\r",
													"        }\r",
													"        if (jsonDataAL[i].lineItemType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().accountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().accountingLines[i].accountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Found AL objects?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine vatAmounts\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"        pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].parameterTypeCode == \"Ledger\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i].code\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Header Line Params\", function () {\r",
													"        pm.expect(testObject).to.eql(pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Header Line Fields\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine.description).to.eql(\"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine.lineItemType).to.eql(\"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataALHeaderLine.netAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.totalAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"        pm.expect(jsonDataALHeaderLine.exchangeRate).to.eql(1.000000);\r",
													"        pm.expect(jsonDataALHeaderLine.lineNumber).to.eql(1);\r",
													"        pm.expect(jsonDataALHeaderLine.reportingNetAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.reportingAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Fields\", function () {\r",
													"        pm.expect(jsonDataAL1.description).to.eql(\"IL1\");\r",
													"        pm.expect(jsonDataAL1.lineItemType).to.eql(\"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataAL1.netAmount).to.eql(1.00);\r",
													"        pm.expect(jsonDataAL1.totalAmount).to.eql(1.15);\r",
													"        pm.expect(jsonDataAL1.vatAmount).to.eql(0.15);\r",
													"        pm.expect(jsonDataAL1.exchangeRate).to.eql(1.000000);\r",
													"        pm.expect(jsonDataAL1.reportingNetAmount).to.eql(1.0);\r",
													"        pm.expect(jsonDataAL1.reportingAmount).to.eql(1.15);\r",
													"        pm.expect(jsonDataAL1.reportingVatAmount).to.eql(0.15);\r",
													"    });\r",
													"\r",
													"    // TODO: Fix test of periodized lines\r",
													"    // AL 1 Ledger\r",
													"    // var testObject = null;\r",
													"    // for (i in jsonDataALP1) {           \r",
													"    //      console.log(jsonDataALP1[i])\r",
													"    //     if (jsonDataALP1[i].parameterTypeCode == \"Ledger\" && jsonDataALP1[i].payableType == \"Debit\" && jsonDataALP1[i].code == pm.environment.get(\"Ledger-15\")) {\r",
													"    //         i = i;\r",
													"    //         testObject = jsonDataALP1[i].code;\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Ledger-15\", function () {\r",
													"    //     pm.expect(testObject).to.eql(pm.environment.get(\"Ledger-15\"));\r",
													"    // });\r",
													"\r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].parameterTypeCode == \"Vat\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 VAT-15\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-15\"]);\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Fields\", function () {\r",
													"        pm.expect(jsonDataAL2.description).to.eql(\"IL2\");\r",
													"        pm.expect(jsonDataAL2.lineItemType).to.eql(\"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataAL2.netAmount).to.eql(100.00);\r",
													"        pm.expect(jsonDataAL2.totalAmount).to.eql(125);\r",
													"        pm.expect(jsonDataAL2.vatAmount).to.eql(25);\r",
													"        pm.expect(jsonDataAL2.exchangeRate).to.eql(1.000000);\r",
													"        pm.expect(jsonDataAL2.reportingNetAmount).to.eql(100.0);\r",
													"        pm.expect(jsonDataAL2.reportingAmount).to.eql(125);\r",
													"        pm.expect(jsonDataAL2.reportingVatAmount).to.eql(25);\r",
													"    });\r",
													"\r",
													"    // TODO: Fix test of periodized lines\r",
													"    // // AL 2 Ledger\r",
													"    // var testObject = null;\r",
													"    // for (i in jsonDataALP2) {\r",
													"    //     if (jsonDataALP2[i].parameterTypeCode == \"Ledger\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"    //         testObject = jsonDataALP2[i].code;\r",
													"    //     }\r",
													"    // }\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Ledger-25\", function () {\r",
													"    //     // pm.expect(testObject).to.be.oneOf([\"Ledger-25\", \"Ledger-25-AI\"]);\r",
													"    //     pm.expect(testObject).to.be.oneOf([pm.environment.get(\"Ledger-25\")]);\r",
													"    // });\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].parameterTypeCode == \"Vat\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 VAT-25\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-25\", \"bla\"]);\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountingLines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountingLines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"}\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData.actionExecutedSuccessfully).to.eql(true);\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													"\r",
													"console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"setTimeout(function () {\r",
													"    console.log(\"Done.\");\r",
													"}, 5000);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Approve\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : Approved\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"Approved\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - GenerateAndPost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData.actionExecutedSuccessfully).to.eql(true);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"GenerateAndPost\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Posting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : Posting\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"Posting\");\r",
													"    });\r",
													"\r",
													"}else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "Download Spreadsheet",
							"item": [
								{
									"name": "PWA /export/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(\"openxmlformat\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\");\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(8000);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// // Get some base64 encoded binary data from the server. Imagine we got this:\r",
													"// var b64Data     = 'H4sIAAAAAAAAAwXB2w0AEBAEwFbWl2Y0IW4jQmziPNo3k6TuGK0Tj/ESVRs6yzkuHRnGIqPB92qzhg8yp62UMAAAAA==';\r",
													"\r",
													"// // Decode base64 (convert ascii to binary)\r",
													"// var strData     = atob(b64Data);\r",
													"\r",
													"// // Convert binary string to character-number array\r",
													"// var charData    = strData.split('').map(function(x){return x.charCodeAt(0);});\r",
													"\r",
													"// // Turn number array into byte-array\r",
													"// var binData     = new Uint8Array(charData);\r",
													"// console.log(binData)\r",
													"\r",
													"// // Pako magic\r",
													"// var data        = pako.inflate(binData);\r",
													"\r",
													"// // Convert gunzipped byteArray back to ascii string:\r",
													"// var strData     = String.fromCharCode.apply(null, new Uint8Array(data));\r",
													"\r",
													"// // Output to console\r",
													"// alert(strData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceIds\": [\r\n        \"{{cInvoiceId}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/export/invoicelines?filter=%5B%5D&sort=%5B%5D",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"export",
												"invoicelines"
											],
											"query": [
												{
													"key": "filter",
													"value": "%5B%5D"
												},
												{
													"key": "sort",
													"value": "%5B%5D"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /export/accountingLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    pm.test(\"openxmlformat\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\");\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(8000);\r",
													"    });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceIds\": [\r\n        \"{{cInvoiceId}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/export/accountinglines?filter=%5B%5D&sort=%5B%5D&exportHeader=false",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"export",
												"accountinglines"
											],
											"query": [
												{
													"key": "filter",
													"value": "%5B%5D"
												},
												{
													"key": "sort",
													"value": "%5B%5D"
												},
												{
													"key": "exportHeader",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Posting Error, Retry",
							"item": [
								{
									"name": "INT /invoices/ID/status - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"//         pm.expect(jsonData.buyerReference).eql(\"Test Controller\");\r",
													" \r",
													"\r",
													"//     });\r",
													"\r",
													"// }\r",
													"\r",
													"\r",
													"if (pm.response.code != 200) {\r",
													"    console.log(pm.response)\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"PostingError\",\r\n    \"message\": \"200 chars ÆØÅ 0002 000000003 000000004 000000005 000000006 000000007 000000008 000000009 000000010 000000011 000000012 000000013 000000014 000000015 000000016 000000017 000000018 000000019 000000020 \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/status",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities PostingError\", function () {\r",
													"        pm.expect(jsonData.details).property(\"newValue\",\"PostingError\");\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - postingError",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : postingError message in comment\", function () {\r",
													"        pm.expect(jsonData.comment).to.eql(\"200 chars ÆØÅ 0002 000000003 000000004 000000005 000000006 000000007 000000008 000000009 000000010 000000011 000000012 000000013 000000014 000000015 000000016 000000017 000000018 000000019 000000020\");\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Restart comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData.actionExecutedSuccessfully).to.eql(true);\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"ReStart\",\r\n    \"comment\": \"Restart with comment and user mention\",\r\n    \"mentionedUserIds\": [\r\n        \"{{userIdController}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - Restart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"InvoiceRestarted\") {\r",
													"            jsonDataActivity = jsonData[i];\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities invoiceRestarted\", function () {\r",
													"\r",
													"        pm.expect(jsonDataActivity).property(\"activityOperationType\", \"InvoiceRestarted\");\r",
													"        pm.expect(jsonDataActivity.createdBy).property(\"userName\", \"Test Controller\");\r",
													"        pm.expect(jsonDataActivity.createdBy).property(\"email\", \"testcontroller@useful.no\");\r",
													"        pm.expect(jsonDataActivity.details).property(\"comment\", \"Restart with comment and user mention\");\r",
													"\r",
													"        // pm.expect(jsonData.details.newValue).to.eql(null);\r",
													"        // pm.expect(jsonData.activityOperationType).to.eql(\"InvoiceRestarted\");\r",
													"        // pm.expect(jsonData.createdBy.userName).to.eql(\"Test Controller\");\r",
													"        // pm.expect(jsonData.createdBy.email).to.eql(\"testcontroller@useful.no\");\r",
													"        // pm.expect(jsonData.details.comment).to.eql(\"Restart with comment and user mention\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - Restart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Restart message in comment\", function () {\r",
													"        pm.expect(jsonData.comment).to.eql(\"Restart with comment and user mention\");\r",
													"        pm.expect(jsonData.commentType).to.eql(\"Invoice\");\r",
													"\r",
													"        pm.expect(jsonData.createdBy.email).to.eql(\"testcontroller@useful.no\");\r",
													"        pm.expect(jsonData.createdBy.userName).to.eql(\"Test Controller\");\r",
													"\r",
													"        pm.expect(jsonData.taggedUsers[0].email).to.eql(\"testcontroller@useful.no\");\r",
													"        pm.expect(jsonData.taggedUsers[0].userName).to.eql(\"Test Controller\");\r",
													"\r",
													"        pm.expect(jsonData.commentStyle).to.eql(\"Default\");\r",
													"\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData.actionExecutedSuccessfully).to.eql(true);\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}\r",
													"\r",
													"console.log(\"Sleeping for 5 seconds before next request.\");\r",
													"setTimeout(function () {\r",
													"    console.log(\"Done.\");\r",
													"}, 5000);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Approve\",\r\n    \"comment\": \"Approve with comment and user mention\",\r\n    \"mentionedUserIds\": [\r\n        \"{{userIdController}}\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    ///////// Status in approved if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities invoice Approved\", function () {\r",
													"        pm.expect(jsonData.details).property(\"newValue\", \"Approved\");\r",
													"        pm.expect(jsonData).property(\"activityOperationType\",\"StatusChanged\");\r",
													"    });\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"Approved\") {\r",
													"            jsonDataActivity = jsonData[i];\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    ///////// Status in approved if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities invoice Approved\", function () {\r",
													"\r",
													"        pm.expect(jsonDataActivity.createdBy).property(\"userName\", \"Test Controller\");\r",
													"        pm.expect(jsonDataActivity.createdBy).property(\"email\", \"testcontroller@useful.no\");\r",
													"        pm.expect(jsonDataActivity.details).property(\"comment\", \"Approve with comment and user mention\");\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/comments - Approve",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Restart message in comment\", function () {\r",
													"        pm.expect(jsonData.comment).to.eql(\"Approve with comment and user mention\");\r",
													"        pm.expect(jsonData.action).to.eql(\"Approve\");\r",
													"        pm.expect(jsonData.commentType).to.eql(\"Invoice\");\r",
													"\r",
													"        pm.expect(jsonData.createdBy.email).to.eql(\"testcontroller@useful.no\");\r",
													"        pm.expect(jsonData.createdBy.userName).to.eql(\"Test Controller\");\r",
													"\r",
													"        pm.expect(jsonData.taggedUsers[0].email).to.eql(\"testcontroller@useful.no\");\r",
													"        pm.expect(jsonData.taggedUsers[0].userName).to.eql(\"Test Controller\");\r",
													"\r",
													"        pm.expect(jsonData.commentStyle).to.eql(\"Default\");\r",
													"\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/comments",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"comments"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : Approved\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"Approved\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/actions  - Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 3 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"    ////////// VAT Amount //////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : actionExecutedSuccessfully\", function () {\r",
													"        pm.expect(jsonData.actionExecutedSuccessfully).to.eql(true);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionType\": \"Post\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/headers - Posting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 2 seconds\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    ///////// Status in review if workflow triggered /////////\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Status : Posting\", function () {\r",
													"        pm.expect(jsonData.status).to.eql(\"Posting\");\r",
													"    });\r",
													"\r",
													"} else {\r",
													"    console.log(pm.response);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"headers"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								},
								{
									"name": "---  sleep 5 sec ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Wait 5 secs before the next try\r",
													"(function myLoop(i) {\r",
													"    setTimeout(function () {\r",
													"        console.log('sleep ' + i);\r",
													"        if (--i) myLoop(i);\r",
													"    }, 1000)\r",
													"})(5);      "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - posted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json().data;\r",
													"\r",
													"    // console.log(jsonData)\r",
													"\r",
													"    for (i in jsonData) {\r",
													"        if (jsonData[i].activityOperationType == \"PostedSuccessfully\") {\r",
													"\r",
													"            var jsonDataActivity = jsonData[i];\r",
													"\r",
													"\r",
													"            ///////// Status in approved if workflow triggered /////////\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities invoice posted\", function () {\r",
													"\r",
													"                pm.expect(jsonDataActivity.createdBy).property(\"userName\", \"Test Integration\");\r",
													"                pm.expect(jsonDataActivity.createdBy).property(\"email\", \"testintegration@useful.no\");\r",
													"                pm.expect(jsonDataActivity.details).property(\"comment\", null);\r",
													"\r",
													"            });\r",
													"\r",
													"            console.log(jsonDataActivity);\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "INT - GET Invoices",
							"item": [
								{
									"name": "INT /invoices/ID/ubl",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:BuyerReference\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"<cbc:BuyerReference>Test Controller</cbc:BuyerReference>\");\r",
													"    });\r",
													"\r",
													"//TODO: Test XML object instead\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:StartDate, cbc:EndDate\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:StartDate>{{IsoDateStart}}</cbc:StartDate>\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:EndDate>{{IsoDateEnd}}</cbc:EndDate>\");\r",
													"    // });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost IL1\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Konto=Ledger-15\");\r",
													"        pm.expect(pm.response.text()).to.include(\"MVAkode=VAT-15\");\r",
													"        pm.expect(pm.response.text()).to.include(\"Interim=Interim-1\");\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost IL2\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Konto=Ledger-25\");\r",
													"        pm.expect(pm.response.text()).to.include(\"MVAkode=VAT-25\");\r",
													"    });\r",
													"}\r",
													"// console.log(pm.response);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/ubl",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"ubl"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID/ubl createAccountingLines=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:BuyerReference\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:BuyerReference>Test Controller</cbc:BuyerReference>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Supplier Line\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;Supplier-=\" + pm.environment.get(\"cSupplierCode-A\") + \";netamount=126.15;totalamount=126.15;vatamount=0.00</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Line 1\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;VATCode+=VAT-15;Account+=Ledger-15\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"netamount=1.00;totalamount=1.15;vatamount=0.15</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - Line 2\", function () {\r",
													"    //     pm.expect(pm.response.text()).to.include(\"<cbc:AccountingCost>NS4102;VATCode+=VAT-25;Account+=Ledger-25\");\r",
													"    //     pm.expect(pm.response.text()).to.include(\"netamount=100.00;totalamount=125.00;vatamount=25.00</cbc:AccountingCost>\");\r",
													"    // });\r",
													"\r",
													"\r",
													"    // TODO: For in loop to find lines regardless of order\r",
													"\r",
													"    var jsonObject = xml2Json(pm.response.text().replace(/cbc:|cac:/g, \"\"));\r",
													"    // console.log(jsonObject.Invoice.InvoiceLine[0].AccountingCost)\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - HeaderLine\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[0].AccountingCost).to.include(\"NS4102;Supplier-=A2-2102;netamount=126.15;totalamount=126.15;vatamount=0.00\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - IL1\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[1].AccountingCost).to.include(\"S4102;VATCode+=VAT-15;Account+=Ledger-15-AI;netamount=1.00;totalamount=1.15;vatamount=0.15\");\r",
													"    // });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : cbc:AccountingCost - IL2\", function () {\r",
													"    //     pm.expect(jsonObject.Invoice.InvoiceLine[2].AccountingCost).to.include(\"NS4102;VATCode+=VAT-25;Account+=Ledger-25-M-210215-232804;netamount=100.00;totalamount=125.00;vatamount=25.00\");\r",
													"    // });\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/ubl?createAccountingLines=true",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"ubl"
											],
											"query": [
												{
													"key": "createAccountingLines",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - Root",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Root \", function () {\r",
													"        // pm.expect(jsonData.supplierIsApproved).eql(true);s\r",
													"        // pm.expect(jsonData.invoiceDate).eql(0);\r",
													"        // pm.expect(jsonData.dueDate).eql(126.15);\r",
													"        pm.expect(jsonData).to.have.property(\"supplierIsApproved\").eql(true);\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceCurrency\").eql(\"NOK\");\r",
													"        pm.expect(jsonData).to.have.property(\"customerReference\", \"\")\r",
													"        pm.expect(jsonData).to.have.property(\"purchaserName\", \"Test Controller\");\r",
													"        pm.expect(jsonData).to.have.property(\"kidNumber\", \"KidNumber-\" + pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData).to.have.property(\"paymentTerms\", '');\r",
													"        pm.expect(jsonData).to.have.property(\"buyerReference\", \"Test Controller\");\r",
													"        pm.expect(jsonData).to.have.property(\"buyerContactPerson\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"project\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"carPlateNumber\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"doNotPay\", false);\r",
													"        pm.expect(jsonData).to.have.property(\"supplierNsAccount\", null);\r",
													"\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Root ApiCostInvoice\", function () {\r",
													"                pm.expect(jsonData.invoiceSourceType).include(\"Api\");\r",
													"                pm.expect(jsonData.voucherNumber).to.be.not.empty;\r",
													"                pm.expect(jsonData).to.have.property(\"department\", \"department\");\r",
													"                pm.expect(jsonData).to.have.property(\"orderReference\", \"orderReference\");\r",
													"                pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", \"-1\");\r",
													"                pm.expect(jsonData).to.have.property(\"description\", null);\r",
													"            });\r",
													"\r",
													"        }\r",
													"\r",
													"        if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Root UblCostInvoice\", function () {\r",
													"                pm.expect(jsonData.invoiceSourceType).include(\"Ehf\");\r",
													"                pm.expect(jsonData).to.have.property(\"capturedPurchaseOrderNumber\", null);\r",
													"                pm.expect(jsonData).to.have.property(\"description\", '');\r",
													"                // pm.expect(jsonData.voucherNumber).to.be.not.empty;\r",
													"                // pm.expect(jsonData).to.have.property(\"department\", \"department\");\r",
													"                // pm.expect(jsonData).to.have.property(\"orderReference\", \"orderReference\");\r",
													"            });\r",
													"\r",
													"        }\r",
													"\r",
													"\r",
													"\r",
													"    });\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Arrays \", function () {\r",
													"        pm.expect(jsonData, \"invoiceAmount\").to.have.property(\"invoiceAmount\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"supplierParty\").to.have.property(\"supplierParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"customerParty\").to.have.property(\"customerParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"deliveryParty\").to.have.property(\"deliveryParty\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"buyer\").to.have.property(\"buyer\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"attachments\").to.have.property(\"attachments\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"taxDetails\").to.have.property(\"taxDetails\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"invoiceAccountingLines\").to.have.property(\"invoiceAccountingLines\").that.is.not.empty;\r",
													"        pm.expect(jsonData, \"supplier\").to.have.property(\"supplier\").that.is.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Various \", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"flag\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"accountNumber\", \"BBAN-A2-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"purchaseOrderNumber\", null);\r",
													"        \r",
													"        pm.expect(jsonData).to.have.property(\"isDeleted\", false);\r",
													"        pm.expect(jsonData).to.have.property(\"reinvoiceAddressCode\", \"externalCode-Delivery-\" + YYMM);\r",
													"        \r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ERP \", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceId\", pm.environment.get(\"cInvoiceId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"organizationId\", pm.environment.get(\"organizationId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"datasetId\", pm.environment.get(\"datasetId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"clientId\", pm.environment.get(\"datasetId\"));\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : ERP Essential\", function () {\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"externalClientId\", pm.environment.get(\"erpId\"));\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));\r",
													"        pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceType\", \"Debit\");\r",
													"        pm.expect(jsonData).to.have.property(\"invoiceStatus\", \"Posting\");\r",
													"        pm.expect(jsonData).to.have.property(\"semineUrl\").include(\"/external/invoice/\" + pm.environment.get(\"cInvoiceId\"));\r",
													"\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - invoiceAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"    const jsonDataInvoiceAmount = jsonData.invoiceAmount;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceAmount\", function () {\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionRate,                   JSON.stringify(jsonDataInvoiceAmount)).eql(1);\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionDate,                   JSON.stringify(jsonDataInvoiceAmount)).include(\"2021\");\r",
													"        pm.expect(jsonDataInvoiceAmount.conversionNumberOfUnits,          JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.totalAmount,                      JSON.stringify(jsonDataInvoiceAmount)).eql(126.15);\r",
													"        pm.expect(jsonDataInvoiceAmount.balanceAmount,                    JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.vatAmount,                        JSON.stringify(jsonDataInvoiceAmount)).eql(25.15);\r",
													"        pm.expect(jsonDataInvoiceAmount.accountingLineTotalAmount,        JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.accountingLineRemainingTotal,     JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"        pm.expect(jsonDataInvoiceAmount.netAmount,                        JSON.stringify(jsonDataInvoiceAmount)).eql(101);\r",
													"        pm.expect(jsonDataInvoiceAmount.reportingAmount,                  JSON.stringify(jsonDataInvoiceAmount)).eql(126.15);\r",
													"        pm.expect(jsonDataInvoiceAmount.roundingAmount,                   JSON.stringify(jsonDataInvoiceAmount)).eql(0);\r",
													"\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - supplierParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().supplierParty;\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierParty \", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"name-A2-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"vatNumber\", \"A2-\" + YYMM)\r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumber\", \"A2-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"zip\", \"Zip-SP-9999\");\r",
													"        pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"        pm.expect(jsonData).to.have.property(\"city\", \"City\");\r",
													"\r",
													"        pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierParty ApiCostInvoice \", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"            pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-SP-A2\");\r",
													"\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierParty UblCostInvoice\", function () {\r",
													"            // pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"            // pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-A2-\" + YYMM);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - customerParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().customerParty;\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplierParty \", function () {\r",
													"    //     pm.expect(jsonData).to.have.property(\"name\", \"name-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"vatNumber\", \"A2-\" + YYMM)\r",
													"    //     pm.expect(jsonData).to.have.property(\"organizationNumber\", \"A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", \"ZZZZ\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"    //     pm.expect(jsonData).to.have.property(\"street\", \"Street-SP-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"zip\", \"Zip-SP-9999\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"city\", \"City\");\r",
													"    //     pm.expect(jsonData).to.have.property(\"bankAccountNumber\", \"BBAN-SP-A2-\" + YYMM);\r",
													"    //     pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    // });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - deliveryParty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().deliveryParty;\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : deliveryParty ApiCostInvoice\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"street\", \"address1-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"zip\", \"zipCode-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"country\", \"NO\");\r",
													"            pm.expect(jsonData).to.have.property(\"city\", \"city-Delivery-\" + YYMM);\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumber\", '');\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : deliveryParty UblCostInvoice\", function () {\r",
													"            pm.expect(jsonData).to.have.property(\"street\", '');\r",
													"            pm.expect(jsonData).to.have.property(\"zip\", null);\r",
													"            pm.expect(jsonData).to.have.property(\"country\", null);\r",
													"            pm.expect(jsonData).to.have.property(\"city\", '');\r",
													"            pm.expect(jsonData).to.have.property(\"organizationNumber\", \"NA\");\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : deliveryParty \", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"name-Delivery-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"vatNumber\", null)\r",
													"        \r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumberAuthority\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"phone\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"mobile\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"web\", null);\r",
													"\r",
													"        \r",
													"        \r",
													"        \r",
													"        pm.expect(jsonData).to.have.property(\"bankAccountNumber\", null);\r",
													"        pm.expect(jsonData).to.have.property(\"ibanAccountNumber\", null);\r",
													"    });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - buyer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().buyer;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyer \", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"email\", \"testcontroller@useful.no\");\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"Test Controller\");\r",
													"    });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - taxDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    /// API ///\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        const jsonData0 = pm.response.json().taxDetails[0];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : taxDetails[0] ApiCostInvoice\", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData0).to.have.property(\"taxRate\", 15.0000);\r",
													"            pm.expect(jsonData0).to.have.property(\"taxAmount\", 0.15);\r",
													"            pm.expect(jsonData0).to.have.property(\"taxCategory\", \"taxCategory\");\r",
													"            pm.expect(jsonData0).to.have.property(\"taxExemptionReason\", \"taxExemptionReason\");\r",
													"            pm.expect(jsonData0).to.have.property(\"taxType\", \"Mid\");\r",
													"        });\r",
													"\r",
													"        const jsonData1 = pm.response.json().taxDetails[1];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : taxDetails[1] ApiCostInvoice\", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData1).to.have.property(\"taxRate\", 25.0000);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxAmount\", 25.00);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxCategory\", \"taxCategory\");\r",
													"            pm.expect(jsonData1).to.have.property(\"taxExemptionReason\", \"taxExemptionReason\");\r",
													"            pm.expect(jsonData1).to.have.property(\"taxType\", \"High\");\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        const jsonData1 = pm.response.json().taxDetails[0];\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : taxDetails[1] UblCostInvoice\", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"currency\", 0)\r",
													"            pm.expect(jsonData1).to.have.property(\"taxRate\", 25.0000);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxAmount\", 25.15);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxCategory\", null);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxExemptionReason\", null);\r",
													"            pm.expect(jsonData1).to.have.property(\"taxType\", \"High\");\r",
													"        });\r",
													"\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - supplier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData = pm.response.json().supplier;\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : supplier\", function () {\r",
													"        pm.expect(jsonData).to.have.property(\"code\", \"A2-\" + YYMM)\r",
													"        pm.expect(jsonData).to.have.property(\"name\", \"name-A2-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"organizationNumber\", \"orgnr-A2-\" + YYMM);\r",
													"        pm.expect(jsonData).to.have.property(\"bankAccount\", \"BBAN-A2-\" + YYMM);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"    // \"supplier\": {\r",
													"    //     \"code\": \"A2-2102\",\r",
													"    //     \"name\": \"name-A2-2102\",\r",
													"    //     \"organizationNumber\": \"orgnr-A2-2102\",\r",
													"    //     \"bankAccount\": \"BBAN-A2-2102\"\r",
													"    // },"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"const YYMM = moment().format(\"YYMM\");\r",
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    const jsonData0 = pm.response.json().attachments[0];\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : attachment-0 \", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData0).to.have.property(\"isInvoicePdf\", true);\r",
													"            pm.expect(jsonData0).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \".pdf\");\r",
													"            pm.expect(jsonData0).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : attachment-0 \", function () {\r",
													"            pm.expect(jsonData0).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData0).to.have.property(\"isInvoicePdf\", false); \r",
													"            pm.expect(jsonData0).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.xml\");\r",
													"            pm.expect(jsonData0).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    const jsonData1 = pm.response.json().attachments[1];\r",
													"\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"ApiCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : attachment-1 \", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData1).to.have.property(\"isInvoicePdf\", false);\r",
													"            pm.expect(jsonData1).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \"-2.pdf\");\r",
													"            pm.expect(jsonData1).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"    if (pm.environment.get(\"invoiceType\") == \"UblCostInvoice\") {\r",
													"\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : attachment-1 \", function () {\r",
													"            pm.expect(jsonData1).to.have.property(\"id\").to.be.not.empty;\r",
													"            pm.expect(jsonData1).to.have.property(\"isInvoicePdf\", true);\r",
													"            pm.expect(jsonData1).to.have.property(\"fileName\", pm.environment.get(\"cInvoiceId\") + \"_ubl.pdf\");\r",
													"            pm.expect(jsonData1).to.have.property(\"pageCount\", 1);\r",
													"        });\r",
													"\r",
													"    }\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID - AL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"console.log(jsonData)\r",
													"\r",
													"    //\r",
													"    //  Find ALs\r",
													"    //\r",
													"\r",
													"    const jsonDataAL = pm.response.json().invoiceAccountingLines;\r",
													"\r",
													"    var jsonDataALHeaderLine, jsonDataAL1, jsonDataAL2, jsonDataALP1, jsonDataALP2\r",
													"\r",
													"    var i\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].lineType == \"HeaderLine\") {\r",
													"            jsonDataALHeaderLine = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALHeaderLineParams = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL1\") {\r",
													"            jsonDataAL1 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP1 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"        if (jsonDataAL[i].lineType == \"AccountingLine\" && jsonDataAL[i].description == \"IL2\") {\r",
													"            jsonDataAL2 = pm.response.json().invoiceAccountingLines[i];\r",
													"            jsonDataALP2 = pm.response.json().invoiceAccountingLines[i].invoiceAccountingLineParameters;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    // All line objecs found?\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Found AL objects?\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine).to.be.not.empty;\r",
													"        pm.expect(jsonDataALHeaderLineParams).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL1).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP1).to.be.not.empty;\r",
													"        pm.expect(jsonDataAL2).to.be.not.empty;\r",
													"        pm.expect(jsonDataALP2).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  HEADERLINE\r",
													"    //\r",
													"\r",
													"    // VAT Amount\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : HeaderLine vatAmounts\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"        // pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    });\r",
													"\r",
													"    // HeaderLine Parameters\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALHeaderLineParams) {\r",
													"        if (jsonDataALHeaderLineParams[i].type == \"Supplier\" && jsonDataALHeaderLineParams[i].payableType == \"Credit\") {\r",
													"            testObject = jsonDataALHeaderLineParams[i].code\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Header Line Params\", function () {\r",
													"        pm.expect(testObject).to.eql(pm.environment.get(\"cSupplierCode-A\"));\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"    //HeaderLine Fields\r",
													"    console.log(jsonDataALHeaderLine)\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Header Line Fields\", function () {\r",
													"        pm.expect(jsonDataALHeaderLine.description).to.eql(\"Semine Inngående Faktura\");\r",
													"        pm.expect(jsonDataALHeaderLine.lineType).to.eql(\"HeaderLine\");\r",
													"        pm.expect(jsonDataALHeaderLine.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataALHeaderLine.netAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.totalAmount).to.eql(126.15);\r",
													"        pm.expect(jsonDataALHeaderLine.vatAmount).to.eql(0);\r",
													"        pm.expect(jsonDataALHeaderLine.exchangeRate).to.eql(1);\r",
													"        pm.expect(jsonDataALHeaderLine.numberOfUnits).to.eql(0);\r",
													"        // pm.expect(jsonDataALHeaderLine.lineNumber).to.eql(1);\r",
													"        // pm.expect(jsonDataALHeaderLine.reportingNetAmount).to.eql(126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine.reportingAmount).to.eql(126.15);\r",
													"        // pm.expect(jsonDataALHeaderLine.reportingVatAmount).to.eql(0);\r",
													"    });\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 1\r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Fields\", function () {\r",
													"        pm.expect(jsonDataAL1.description).to.eql(\"IL1\");\r",
													"        pm.expect(jsonDataAL1.lineType).to.eql(\"AccountingLine\");\r",
													"        pm.expect(jsonDataAL1.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataAL1.netAmount).to.eql(1.00);\r",
													"        pm.expect(jsonDataAL1.totalAmount).to.eql(1.15);\r",
													"        pm.expect(jsonDataAL1.vatAmount).to.eql(0.15);\r",
													"        pm.expect(jsonDataAL1.exchangeRate).to.eql(1);\r",
													"        pm.expect(jsonDataAL1.debitLedgerType).to.eql(\"AccountingCode\");\r",
													"        pm.expect(jsonDataAL1.creditLedgerType).to.eql(null);\r",
													"        pm.expect(jsonDataAL1.voucherTypeCode).to.eql(\"\");\r",
													"        // pm.expect(jsonDataAL1.reportingNetAmount).to.eql(1.0);\r",
													"        // pm.expect(jsonDataAL1.reportingAmount).to.eql(1.15);\r",
													"        // pm.expect(jsonDataAL1.reportingVatAmount).to.eql(0.15);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"AccountingCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 Ledger-15\", function () {\r",
													"        pm.expect(testObject).to.eql(\"Interim-1\");\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 1 VAT\r",
													"    testObject = null;\r",
													"    for (i in jsonDataALP1) {\r",
													"        if (jsonDataALP1[i].type == \"VatCode\" && jsonDataALP1[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP1[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 1 VAT-15\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-15\"]);\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"    //\r",
													"    //  AL 2  \r",
													"    //\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Fields\", function () {\r",
													"        pm.expect(jsonDataAL2.description).to.eql(\"IL2\");\r",
													"        pm.expect(jsonDataAL2.lineType).to.eql(\"AccountingLine\");\r",
													"        pm.expect(jsonDataAL2.currency).to.eql(\"NOK\");\r",
													"        pm.expect(jsonDataAL2.netAmount).to.eql(100.00);\r",
													"        pm.expect(jsonDataAL2.totalAmount).to.eql(125);\r",
													"        pm.expect(jsonDataAL2.vatAmount).to.eql(25);\r",
													"        pm.expect(jsonDataAL2.exchangeRate).to.eql(1.000000);\r",
													"        pm.expect(jsonDataAL2.debitLedgerType).to.eql(\"AccountingCode\");\r",
													"        pm.expect(jsonDataAL2.creditLedgerType).to.eql(null);\r",
													"        pm.expect(jsonDataAL2.voucherTypeCode).to.eql(\"\");\r",
													"        // pm.expect(jsonDataAL2.reportingNetAmount).to.eql(100.0);\r",
													"        // pm.expect(jsonDataAL2.reportingAmount).to.eql(125);\r",
													"        // pm.expect(jsonDataAL2.reportingVatAmount).to.eql(25);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 Ledger\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"AccountingCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 Ledger-25\", function () {\r",
													"        // pm.expect(testObject).to.be.oneOf([\"Ledger-25\", \"Ledger-25-AI\"]);\r",
													"        pm.expect(testObject).to.be.oneOf([pm.environment.get(\"Ledger-25\")]);\r",
													"    });\r",
													"\r",
													"\r",
													"    // AL 2 VAT\r",
													"    var testObject = null;\r",
													"    for (i in jsonDataALP2) {\r",
													"        if (jsonDataALP2[i].type == \"VatCode\" && jsonDataALP2[i].payableType == \"Debit\") {\r",
													"            testObject = jsonDataALP2[i].code;\r",
													"        }\r",
													"    }\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : AL 2 VAT-25\", function () {\r",
													"        pm.expect(testObject).to.be.oneOf([\"VAT-25\"]);\r",
													"    });\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"// console.log(pm.response.json());\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/PDF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : PDF received\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"%PDF-1.\"); // Start of file\r",
													"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
													"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
													"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/pdf",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"pdf"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"    //     pm.expect(jsonData.buyerReference).eql(\"Test Controller\");\r",
													"    //     // pm.expect(jsonData.buyerRef.name).eql(\"Test Controller\");\r",
													"    //     // pm.expect(jsonData.buyerRef.isValidated).is.true;\r",
													"    //     // pm.expect(jsonData.buyerRef.id).is.not.empty;\r",
													"\r",
													"    // });\r",
													"\r",
													"}\r",
													"// console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "INT /invoices/ID/status - posted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : buyerRef set\", function () {\r",
													"\r",
													"//         pm.expect(jsonData.buyerReference).eql(\"Test Controller\");\r",
													"\r",
													"\r",
													"//     });\r",
													"\r",
													"// }\r",
													"\r",
													"if (pm.response.code != 200) {\r",
													"    console.log(pm.response)\r",
													"} "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenINT}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"posted\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/status",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reports",
							"item": [
								{
									"name": "PWA /invoiceAutomation/chart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response.json());\r",
													"\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : headers\", function () {\r",
													"        pm.expect(jsonData.headers[0]).to.be.not.empty;\r",
													"    });\r",
													"\r",
													"    // pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : charts\", function () {\r",
													"    //     pm.expect(jsonData.charts[0]).to.be.not.empty;\r",
													"    // });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"startDate\": \"2020-12-31T23:00:00.000Z\",\r\n    \"endDate\": \"2021-12-31T22:59:59.999Z\",\r\n    \"timeSpanOption\": \"Current year\",\r\n    \"clientSellerPairs\": [\r\n        {\r\n            \"clientId\": \"{{datasetId}}\",\r\n            \"sellerId\": \"{{cSupplierId-A}}\"\r\n        }\r\n    ],\r\n    \"offset\": -1,\r\n    \"reportTypes\": [\r\n        \"1\",\r\n        \"2\",\r\n        \"3\",\r\n        \"4\",\r\n        \"7\",\r\n        \"8\",\r\n        \"9\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/reports/invoiceautomation/chart",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"reports",
												"invoiceautomation",
												"chart"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoiceAutomation/grid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    console.log(pm.response.json());\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : data\", function () {\r",
													"        pm.expect(jsonData.data[0]).to.be.not.empty;\r",
													"        pm.expect(jsonData.totalCount).to.be.greaterThan(0);\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/reports/invoiceautomation/grid?startDate=2020-12-31T23:00:00.000Z&endDate=2021-12-31T22:59:59.999Z&offset=-1&skip=0&take=20&requireTotalCount=true&select=[\"clientName\",\"sellerName\",\"invoiceAutomationAccountPercentage\",\"lineAutomationAccountPercentage\",\"invoiceAutomationDimensionPercentage\",\"lineAutomationDimensionPercentage\",\"invoiceAutomationVatPercentage\",\"lineAutomationVatPercentage\",\"autoPostPercentage\",\"accountant\",\"consultant\",\"sellerId\",\"clientId\"]&_=1613935892159",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"reports",
												"invoiceautomation",
												"grid"
											],
											"query": [
												{
													"key": "startDate",
													"value": "2020-12-31T23:00:00.000Z"
												},
												{
													"key": "endDate",
													"value": "2021-12-31T22:59:59.999Z"
												},
												{
													"key": "offset",
													"value": "-1"
												},
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "20"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "select",
													"value": "[\"clientName\",\"sellerName\",\"invoiceAutomationAccountPercentage\",\"lineAutomationAccountPercentage\",\"invoiceAutomationDimensionPercentage\",\"lineAutomationDimensionPercentage\",\"invoiceAutomationVatPercentage\",\"lineAutomationVatPercentage\",\"autoPostPercentage\",\"accountant\",\"consultant\",\"sellerId\",\"clientId\"]"
												},
												{
													"key": "_",
													"value": "1613935892159"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "--- Skip to END ---",
							"item": [
								{
									"name": "--- Skip to END ---",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// console.log('--- Skipping to END ---');\r",
													"postman.setNextRequest(\"--- END ---\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/health",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "27709 Invoice Header Actions",
							"item": [
								{
									"name": "Change supplier id",
									"item": [
										{
											"name": "PWA /invoices/ID/supplier - A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"supplier"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - take 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?skip=0&take=10&requireTotalCount=false",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "10"
														},
														{
															"key": "requireTotalCount",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - filter A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?filter=[\"erpVendorId\",\"=\",\"{{cSupplierCode-A}}\"]",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "filter",
															"value": "[\"erpVendorId\",\"=\",\"{{cSupplierCode-A}}\"]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /suppliers - filter B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/suppliers?skip=0&take=10&requireTotalCount=false&filter=[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"]]",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"suppliers"
													],
													"query": [
														{
															"key": "skip",
															"value": "0"
														},
														{
															"key": "take",
															"value": "10"
														},
														{
															"key": "requireTotalCount",
															"value": "false"
														},
														{
															"key": "filter",
															"value": "[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"vatId\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"bankAccounts\",\"contains\",\"{{cSupplierCode-B}}\"],\"or\",[\"name\",\"contains\",\"{{cSupplierCode-B}}\"]]",
															"disabled": true
														},
														{
															"key": "filter",
															"value": "[[\"erpVendorId\",\"contains\",\"{{cSupplierCode-B}}\"]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"exchangeRate\": 1,\r\n    \"invoiceNumber\": \"INT-20201202-1921119\",\r\n    \"invoiceDate\": \"2020-12-02\",\r\n    \"dueDate\": \"2020-12-12T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-INT-20201202-1921119\",\r\n    \"netAmount\": 200,\r\n    \"vatAmount\": 50,\r\n    \"vatHigh\": 50,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 250,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": null,\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers - B",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id\", function () {\r",
															"        pm.expect(jsonData.seller.erpVendorId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.vatId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.bankAccount).to.eql(\"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/supplier - A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"supplier"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Change all header values",
									"item": [
										{
											"name": "PWA invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.collectionVariables.set(\"cYYYYMMDD-HHmmss\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"SEK\",\r\n    \"exchangeRate\": 2,\r\n    \"invoiceNumber\": \"invoiceNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"invoiceDate\": \"2020-12-01\",\r\n    \"dueDate\": \"2020-12-01T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"netAmount\": 204,\r\n    \"vatAmount\": 51,\r\n    \"vatHigh\": 51,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 255,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": \"voucherDescription-{{cYYYYMMDD-HHmmss}}\",\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id\", function () {\r",
															"        pm.expect(jsonData.seller.erpVendorId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.vatId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.bankAccount).to.eql(\"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate\", function () {\r",
															"        pm.expect(jsonData.currency).to.eql(\"SEK\");\r",
															"        pm.expect(jsonData.exchangeRate).to.eql(2.0);\r",
															"        pm.expect(jsonData.reportingAmount).to.eql(510.00);\r",
															"\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description\", function () {\r",
															"        pm.expect(jsonData.voucherDescription).to.eql(\"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData.description).to.not.be.null;\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date\", function () {\r",
															"        pm.expect(jsonData.invoiceDate).to.eql(\"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date\", function () {\r",
															"        pm.expect(jsonData.dueDate).to.eql(\"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID\", function () {\r",
															"        pm.expect(jsonData.kidNumber).to.eql(\"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number\", function () {\r",
															"        pm.expect(jsonData.invoiceNumber).to.eql(\"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts\", function () {\r",
															"        pm.expect(jsonData.netAmount).to.eql(204);\r",
															"        pm.expect(jsonData.vatAmount).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountHigh).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountMid).to.eql(0);\r",
															"        pm.expect(jsonData.vatAmountLow).to.eql(0);\r",
															"        pm.expect(jsonData.totalAmount).to.eql(255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingTotalAmount).to.eql(-255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingNetAmount).to.eql(-204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id\", function () {\r",
															"        pm.expect(jsonData.seller.erpVendorId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.vatId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.bankAccount).to.eql(\"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate\", function () {\r",
															"        pm.expect(jsonData.currency).to.eql(\"SEK\");\r",
															"        pm.expect(jsonData.exchangeRate).to.eql(2.0);\r",
															"        pm.expect(jsonData.reportingAmount).to.eql(510.00);\r",
															"\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description\", function () {\r",
															"        pm.expect(jsonData.voucherDescription).to.eql(\"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData.description).to.not.be.null;\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date\", function () {\r",
															"        pm.expect(jsonData.invoiceDate).to.eql(\"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date\", function () {\r",
															"        pm.expect(jsonData.dueDate).to.eql(\"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID\", function () {\r",
															"        pm.expect(jsonData.kidNumber).to.eql(\"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number\", function () {\r",
															"        pm.expect(jsonData.invoiceNumber).to.eql(\"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts\", function () {\r",
															"        pm.expect(jsonData.netAmount).to.eql(204);\r",
															"        pm.expect(jsonData.vatAmount).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountHigh).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountMid).to.eql(0);\r",
															"        pm.expect(jsonData.vatAmountLow).to.eql(0);\r",
															"        pm.expect(jsonData.totalAmount).to.eql(255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingTotalAmount).to.eql(-255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingNetAmount).to.eql(-204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "PWA invoices/ID/headers Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.collectionVariables.set(\"cYYYYMMDD-HHmmss\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "authority",
														"value": "webapi.testsemine.no"
													},
													{
														"key": "pragma",
														"value": "no-cache"
													},
													{
														"key": "cache-control",
														"value": "no-cache"
													},
													{
														"key": "accept",
														"value": "application/json, text/plain, */*"
													},
													{
														"key": "dnt",
														"value": "1"
													},
													{
														"key": "authorization",
														"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
													},
													{
														"key": "x-language-code",
														"value": "en"
													},
													{
														"key": "user-agent",
														"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
													},
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "origin",
														"value": "https://my.testsemine.no"
													},
													{
														"key": "sec-fetch-site",
														"value": "same-site"
													},
													{
														"key": "sec-fetch-mode",
														"value": "cors"
													},
													{
														"key": "sec-fetch-dest",
														"value": "empty"
													},
													{
														"key": "accept-language",
														"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"supplierId\": \"{{cSupplierCode-B}}*BBAN-{{cSupplierCode-B}}\",\r\n    \"sellerNsParameterValueId\": null,\r\n    \"buyerId\": \"9ecd591b-3ae5-4012-bba8-00470c6777a2\",\r\n    \"invoiceCurrency\": \"SEK\",\r\n    \"exchangeRate\": 2,\r\n    \"invoiceNumber\": \"{{cInvoiceNumberDuplicate}}\",\r\n    \"invoiceDate\": \"2020-12-01\",\r\n    \"dueDate\": \"2020-12-01T18:21:11.999Z\",\r\n    \"kidNumber\": \"KidNumber-{{cYYYYMMDD-HHmmss}}\",\r\n    \"netAmount\": 204,\r\n    \"vatAmount\": 51,\r\n    \"vatHigh\": 51,\r\n    \"vatMiddle\": 0,\r\n    \"vatLow\": 0,\r\n    \"totalAmount\": 255,\r\n    \"flagId\": null,\r\n    \"doNotPay\": false,\r\n    \"voucherDescription\": \"voucherDescription-{{cYYYYMMDD-HHmmss}}\",\r\n    \"reInvoicingEnabled\": true,\r\n    \"subsidiaryAddress\": \"externalCode-Delivery20201130-090409\"\r\n}"
												},
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Change supplier id\t\tExpected: changed to selected. Bank account and org number updated\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change supplier id\", function () {\r",
															"        pm.expect(jsonData.seller.erpVendorId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.name).to.eql(\"name-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.vatId).to.eql(pm.environment.get(\"cSupplierCode-B\"));\r",
															"        pm.expect(jsonData.seller.bankAccount).to.eql(\"BBAN-\" + pm.environment.get(\"cSupplierCode-B\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Currency\t\tUpdated exchange rate and reporting amount\r",
															"// Change exchange rate\t\tUpdated reporting amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Currency and Exchange rate\", function () {\r",
															"        pm.expect(jsonData.currency).to.eql(\"SEK\");\r",
															"        pm.expect(jsonData.exchangeRate).to.eql(2.0);\r",
															"        pm.expect(jsonData.reportingAmount).to.eql(510.00);\r",
															"\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Add a description\t\t \r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Add a description\", function () {\r",
															"        pm.expect(jsonData.voucherDescription).to.eql(\"voucherDescription-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"        pm.expect(jsonData.description).to.not.be.null;\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change invoice date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change invoice date\", function () {\r",
															"        pm.expect(jsonData.invoiceDate).to.eql(\"2020-12-01T00:00:00Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change due date\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change due date\", function () {\r",
															"        pm.expect(jsonData.dueDate).to.eql(\"2020-12-01T18:21:11.999Z\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change KID\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change KID\", function () {\r",
															"        pm.expect(jsonData.kidNumber).to.eql(\"KidNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change Invoice number\", function () {\r",
															"        pm.expect(jsonData.invoiceNumber).to.eql(\"invoiceNumber-\" + pm.collectionVariables.get(\"cYYYYMMDD-HHmmss\"));\r",
															"    });\r",
															"}\r",
															"\r",
															"\r",
															"// Change net amount\t\tChange should be reflected in remaining amounts. After refresh values should remain\r",
															"// Change total amount\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Change amounts\", function () {\r",
															"        pm.expect(jsonData.netAmount).to.eql(204);\r",
															"        pm.expect(jsonData.vatAmount).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountHigh).to.eql(51);\r",
															"        pm.expect(jsonData.vatAmountMid).to.eql(0);\r",
															"        pm.expect(jsonData.vatAmountLow).to.eql(0);\r",
															"        pm.expect(jsonData.totalAmount).to.eql(255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingTotalAmount).to.eql(-255);\r",
															"        pm.expect(jsonData.lineItemAmount.remainingNetAmount).to.eql(-204.00);\r",
															"    });\r",
															"}\r",
															"\r",
															"// Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{cInvoiceId}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										},
										{
											"name": "INT /invoices - Cost Minimum Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.environment.set(\"invoiceIdDuplicate\", jsonData.invoiceId);\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require(\"moment\");\r",
															"\r",
															"pm.environment.set(\"cInvoiceNumberDuplicate\", \"D-\" + moment().format(\"YYYYMMDD-HHmmssS\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TokenINT}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"InvoiceNumber\": \"{{cInvoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 250.00,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 50.00,\r\n        \"AccountingLineTotalAmount\": 250.01,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 200.00,\r\n        \"ReportingAmount\": 200.02,\r\n        \"RoundingAmount\": 0.3\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"name-{{cSupplierCode-A}}\",\r\n        \"Code\": \"{{cSupplierCode-A}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-A}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-A}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-A}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-A}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n        {\r\n            \"LineNumber\": 1,\r\n            \"InvoiceLineNumber\": \"1\",\r\n            \"ReferenceLineNumber\": \"{{cInvoiceNumber}}\",\r\n            \"ItemNumber\": \"ItemNumber-{{cInvoiceNumber}}\",\r\n            \"GtinType\": null,\r\n            \"Gtin\": \"GTIN-{{cInvoiceNumber}}\",\r\n            \"Description\": \"Description-{{cIssueDate}}\",\r\n            \"Quantity\": 10.0,\r\n            \"UnitPrice\": 20.00,\r\n            \"TotalAmount\": 250.00,\r\n            \"NetAmount\": 200.0,\r\n            \"Discount\": 0.5,\r\n            \"VatRate\": 25.0,\r\n            \"VatAmount\": 50.0,\r\n            \"StartPeriod\": 12,\r\n            \"TotalPeriod\": 3,\r\n            \"StartYear\": 2020,\r\n            \"IssueDate\": \"{{cIssueDate}}\",\r\n            \"Currency\": \"NOK\",\r\n            \"ConversionRate\": 1.0,\r\n            \"LedgerType\": 9,\r\n            \"AccountingParameters\": [\r\n                {\r\n                    \"Code\": \"2405\",\r\n                    \"ParentCode\": null,\r\n                    \"Type\": 0\r\n                }\r\n            ],\r\n            \"Attributes\": null\r\n        }\r\n    ],\r\n        \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 50,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
													"host": [
														"{{INT}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices"
													]
												},
												"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
											},
											"response": []
										},
										{
											"name": "PWA /invoices/ID/headers Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"// Should change status to duplicate\r",
															"if (pm.response.code == 200) {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice number duplicate\", function () {\r",
															"        pm.expect(jsonData.status).to.eql(\"Duplicate\");\r",
															"    });\r",
															"}\r",
															"\r",
															"// TODO: Change Invoice number to an existing invoice number\tFail\tShould change status to duplicate\r",
															"\r",
															"console.log(pm.response.json());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{invoiceIdDuplicate}}/headers",
													"host": [
														"{{PWA}}"
													],
													"path": [
														"organizations",
														"{{organizationId}}",
														"clients",
														"{{datasetId}}",
														"invoices",
														"{{invoiceIdDuplicate}}",
														"headers"
													]
												},
												"description": "Gets details for an invoice.\r\nTODO Get all details"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "27715 Invoice Line Action Buttons",
							"item": [
								{
									"name": "PWA /invoicelines - Add Line",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "content-length",
												"value": "0"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - LinesAdded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : LinesAdded\", function () {\r",
													"        pm.expect(jsonData.data[0].activityOperationType).to.eql(\"LinesAdded\");\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"console.log(jsonData);\r",
													"\r",
													"\r",
													"// let apiName = 'Groups - ';\r",
													"\r",
													"// let isSuccess = false;\r",
													"// pm.test(apiName + \"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"\r",
													"//     if (pm.response.status == \"OK\") {\r",
													"//         isSuccess = true;\r",
													"//     }\r",
													"// });\r",
													"\r",
													"// if (isSuccess) {\r",
													"//     let name = pm.collectionVariables.get(\"cGroupName-A\");\r",
													"\r",
													"//     let allGroups = pm.response.json();\r",
													"\r",
													"//     pm.test(apiName + \"Response length should be greater than zero\", function () {\r",
													"//         pm.expect(allGroups.length).not.equal(0);\r",
													"//     });\r",
													"\r",
													"//     if (allGroups.length > 0) {\r",
													"//         var desiredGroupName = allGroups.find(item => item.name == name);\r",
													"\r",
													"//         pm.test(apiName + \"Desired group should be found.\", function () {\r",
													"//             pm.expect(desiredGroupName).not.to.be.null;\r",
													"//             pm.expect(desiredGroupName).not.to.be.undefined;\r",
													"//         });\r",
													"\r",
													"//         if (desiredGroupName != null) {\r",
													"//             let name = pm.collectionVariables.get(\"cGroupName-A\");\r",
													"//             let code = pm.collectionVariables.get(\"cGroupCode-A\");\r",
													"\r",
													"//             pm.test(apiName + \"Desired group name should match with the request name.\", function () {\r",
													"//                 pm.expect(desiredGroupName.name).is.to.equal(name);\r",
													"//             });\r",
													"\r",
													"//             pm.test(apiName + \"Desired client info code should match with the request code.\", function () {\r",
													"//                 pm.expect(desiredGroupName.code).is.to.equal(code);\r",
													"//             });\r",
													"\r",
													"//             pm.collectionVariables.set(\"cGroupId-A\", desiredGroupName.id);\r",
													"//         }\r",
													"//     }\r",
													"// }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceLines\", function () {\r",
													"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
													"        pm.expect(jsonData.invoiceLines).to.be.not.empty;\r",
													"        pm.expect(jsonData.invoiceAmounts).to.be.not.empty;\r",
													"\r",
													"    });\r",
													"\r",
													"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Delete\", jsonData.invoiceLines[0].invoiceLineId);\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Split\", jsonData.invoiceLines[1].invoiceLineId);\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/deletelines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice Line Deleted\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0].invoiceLineId).to.be.not.eql(pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"invoiceLineIds\":[\"{{invoiceLineId_Delete}}\"]}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/deletelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"deletelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice Line Deleted\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0].invoiceLineId).to.be.not.eql(pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID/split",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice Line Deleted\", function () {\r",
													"        pm.expect(jsonData.invoiceLines[0].invoiceLineId).to.be.not.eql(pm.collectionVariables.get(\"invoiceLineId_Delete\"));\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"invoiceLineIds\":[\"{{invoiceLineId_Delete}}\"]}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Split}}/split?rowCount=2",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Split}}",
												"split"
											],
											"query": [
												{
													"key": "rowCount",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - NumericSplitApplied",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : NumericSplitApplied\", function () {\r",
													"        pm.expect(jsonData.data[0].activityOperationType).to.eql(\"NumericSplitApplied\");\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"LineItem_1\", jsonData.data[0].details.references[0].id);\r",
													"    pm.collectionVariables.set(\"LineItem_2\", jsonData.data[0].details.references[1].id);\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/invoicelines/groups",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authority",
												"value": "webapi.testsemine.no"
											},
											{
												"key": "pragma",
												"value": "no-cache"
											},
											{
												"key": "cache-control",
												"value": "no-cache"
											},
											{
												"key": "accept",
												"value": "application/json, text/plain, */*"
											},
											{
												"key": "dnt",
												"value": "1"
											},
											{
												"key": "authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDY5MzI2NjksImV4cCI6MTYwNjk3NTg2OSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi50ZXN0c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiI2MURJSGg3SGQ0MU84NHZFZzY4YVd2V1VMaGlzS3hDSnRXVU5NOF9EbXJ1bnciLCJpYXQiOjE2MDY5MzI2NjksInNfaGFzaCI6IlFMbHJlUExjWVhMQ1FIUUF4TzU3S3ciLCJzaWQiOiJTY2xWMUIyRTdtSDNFalByczNid3VBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA2OTMwNTA5LCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiI5ZWNkNTkxYi0zYWU1LTQwMTItYmJhOC0wMDQ3MGM2Nzc3YTIiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.bHWydZeqrm7MvsXXd2aRVVhRD8pB8ZuImYVfwgz8XnH-eJGBOKGKvCzRT13zKhXTgiT3OUdvkGAOU66fhutLwu6vJEGNAu18DyAv3IhbWwBqixd3Un3yJBvP_E5KX4OamXMpmJLng_FKAYLR12UGkQLFnR4m-z25ezyabhXhFJHiZNRdwk43ATIuLskS9Gi4RwpbS1YC17iTOkObupq9ypxLYAYsCxN4unvShpyOJCwb545tOhwDQ0IocO_7WSpW4e9VCZ9UPx3VX8wu42SBq7qoyWs5bHMectJBWN-2QycSKstO65oYDRjKwctgm04W5PQ_BvuNmal9JXKCIh8gLA"
											},
											{
												"key": "x-language-code",
												"value": "en"
											},
											{
												"key": "user-agent",
												"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
											},
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "origin",
												"value": "https://my.testsemine.no"
											},
											{
												"key": "sec-fetch-site",
												"value": "same-site"
											},
											{
												"key": "sec-fetch-mode",
												"value": "cors"
											},
											{
												"key": "sec-fetch-dest",
												"value": "empty"
											},
											{
												"key": "accept-language",
												"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"masterLineSourceLineId\": \"{{LineItem_1}}\",\r\n    \"invoiceLineIds\": [\r\n        \"{{LineItem_1}}\",\r\n        \"{{LineItem_2}}\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/groups",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/activities - LinesGrouped",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : NumericSplitApplied\", function () {\r",
													"        pm.expect(jsonData.data[0].activityOperationType).to.eql(\"LinesGrouped\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities?skip=0&take=1&requireTotalCount=true&sort=[{\"selector\":\"createdDate\",\"desc\":true}]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"activities"
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true"
												},
												{
													"key": "sort",
													"value": "[{\"selector\":\"createdDate\",\"desc\":true}]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoices/ID/invoiceLines Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceLines\", function () {\r",
													"        // pm.expect(JSON.stringify(jsonData)).to.be.empty;\r",
													"        pm.expect(jsonData.invoiceLines).to.be.not.empty;\r",
													"        pm.expect(jsonData.invoiceAmounts).to.be.not.empty;\r",
													"\r",
													"    });\r",
													"\r",
													"    if (typeof (jsonData.invoiceLines[0]) != \"undefined\") {\r",
													"        pm.collectionVariables.set(\"invoiceLineId_Code\", jsonData.invoiceLines[0].invoiceLineId);\r",
													"    }\r",
													"}\r",
													"\r",
													"console.log(jsonData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /accountinglines/generate - Validation errors",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - Apply code",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20.4,\r\n    \"netAmount\": 204,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-02T18:21:11.999Z\",\r\n    \"startPeriodMonth\": null,\r\n    \"startPeriodYear\": null,\r\n    \"totalPeriod\": null,\r\n    \"gtin\": null,\r\n    \"accountTypeParameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"3008bccd-9f80-4aea-a25b-c89478062954\",\r\n            \"parameterValueId\": \"00000000-0000-0000-0000-000000000000\"\r\n        },\r\n        {\r\n            \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n            \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Code}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - copyToAllLines",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"column\": \"AccountingParameter\",\r\n    \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\",\r\n    \"invoiceLineId\": \"31e124b0-5816-4335-b040-b946af55b759\",\r\n    \"requestType\": \"copyToAllLines\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/applyall",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"applyall"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - Apply interim",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20.4,\r\n    \"netAmount\": 204,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-02T18:21:11.999Z\",\r\n    \"startPeriodMonth\": null,\r\n    \"startPeriodYear\": null,\r\n    \"totalPeriod\": null,\r\n    \"gtin\": null,\r\n    \"accountTypeParameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"9932fa22-b8f0-4d46-acee-6c1cc26be863\",\r\n            \"parameterValueId\": \"a8b433b8-ecc3-4375-a59f-9cc8330e1105\"\r\n        },\r\n        {\r\n            \"parameterId\": \"3008bccd-9f80-4aea-a25b-c89478062954\",\r\n            \"parameterValueId\": \"00000000-0000-0000-0000-000000000000\"\r\n        },\r\n        {\r\n            \"parameterId\": \"8ee75574-a814-4a96-a3db-e511a1fd33ae\",\r\n            \"parameterValueId\": \"209a0d25-bbdc-46e4-8cb2-a9699b7edfd2\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/{{invoiceLineId_Code}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"{{invoiceLineId_Code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /invoicelines/ID - copyToAllLines",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"column\": \"AccountingParameter\",\r\n    \"parameterId\": \"8ee75574-a814-4a96-a3db-e511a1fd33ae\",\r\n    \"parameterValueId\": \"209a0d25-bbdc-46e4-8cb2-a9699b7edfd2\",\r\n    \"invoiceLineId\": \"31e124b0-5816-4335-b040-b946af55b759\",\r\n    \"requestType\": \"copyToAllLines\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/invoicelines/applyall",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"invoicelines",
												"applyall"
											]
										}
									},
									"response": []
								},
								{
									"name": "PWA /accountinglines/generate",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/accountinglines/generate",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"invoices",
												"{{cInvoiceId}}",
												"accountinglines",
												"generate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Find invoices in list",
							"item": [
								{
									"name": "PWA /invoices/ filter - Cost",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"function sleep(milisecond) {\r",
													"    var date = Date.now();\r",
													"    while ((date + milisecond) > Date.now());\r",
													"}\r",
													"\r",
													"var retries = pm.globals.get(\"retries\");\r",
													"\r",
													"\r",
													"////////////// FIND INVOICE ///////////////\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"    // pm.environment.unset(\"cInvoiceId\");\r",
													"\r",
													"    var jsonData = pm.response.json().data[0];\r",
													"\r",
													"    // If invoiceId found, move to next request. \r",
													"    // If invoiceId not found repeat this request 20 times before failing.\r",
													"    if (retries < 20) {\r",
													"        if (jsonData != null) {\r",
													"            pm.environment.set(\"cInvoiceId\", jsonData.id);\r",
													"            pm.globals.set(\"retries\", 0);\r",
													"            console.log(\"cInvoiceId \" + pm.environment.get(\"cInvoiceId\"));\r",
													"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
													"                pm.expect(jsonData.id).to.be.not.null;\r",
													"            });\r",
													"        } else {\r",
													"            // Wait 5s and then try again\r",
													"            sleep(5000);\r",
													"            retries++;\r",
													"            pm.globals.set(\"retries\", retries);\r",
													"            console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
													"            postman.setNextRequest(\"PWA /invoices/ filter - Cost\");\r",
													"        }\r",
													"    } else {\r",
													"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : invoiceId not null \", function () {\r",
													"            pm.expect(jsonData.id).to.be.not.null;\r",
													"        });\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=1&filter=[\"invoiceNumber\",\"=\",\"{{invoiceNumber}}\"]",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"invoices"
											],
											"query": [
												{
													"key": "skip",
													"value": "0",
													"disabled": true
												},
												{
													"key": "take",
													"value": "1"
												},
												{
													"key": "requireTotalCount",
													"value": "true",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "%5B%7B%22selector%22%3A%22invoiceNumber%22%2C%22desc%22%3Atrue%7D%5D",
													"disabled": true
												},
												{
													"key": "filter",
													"value": "[\"invoiceNumber\",\"=\",\"{{invoiceNumber}}\"]"
												}
											]
										},
										"description": "Gets details for an invoice.\r\nTODO Get all details"
									},
									"response": []
								}
							]
						},
						{
							"name": "PWA context/invoices/ID - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/context/invoices/{{cInvoiceId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"context",
										"invoices",
										"{{cInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/supplier - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/supplier",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"supplier"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/operations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/operations",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"operations"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/actions/determinepostingdate - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions/determinepostingdate",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"actions",
										"determinepostingdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/actions - Cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/actions",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /parameters/ID/values/condensed?take=15&query=req-acc",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "semine.webapi.nginx.devsemine.no"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "dnt",
										"value": "1"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDcxOTc0MDQsImV4cCI6MTYwNzI4MzgwNCwiaXNzIjoiaHR0cHM6Ly9zZW1pbmUubG9naW4ubmdpbnguZGV2c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiJhOVlWa0hhVGRmSzVQRkUwTS1FVGcyc25WQmVXZGwzWkRQbmJzbTZjNjNSVGwiLCJpYXQiOjE2MDcxOTc0MDIsInNfaGFzaCI6ImhfdjB0OUh1eHNOMy1HSU5venJ2MGciLCJzaWQiOiJqQkEyU1A5bnhudmpLbm1mTjlwdHhBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA3MTk3NDAxLCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiJlYzE4OTMwNS0wZjk5LTRhMDEtOGMwMC0yNmZlMGU4ZDk1N2YiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.i1Dp9oYDrZ4PYg6uPDWO5vYjRNk8OhgGaEIav-gwvlZ4C2_X1PriL81edQROoqglBXMrBzCTIMa6M5RSObI9n22agU1YbuYuhphY04bvnq4OLbNIaVWdb34NdSfQGB6NusKsOfMr-8n9ND_w6-tcfQGwk0rdurNc-PQ0hgze0JXZOWPKqqI4cSSNLFQsF4G9TOalCEBbjqK6O4XZaoguXWyTj2qIKEY4gwP9Cz2Si2bXkGaT1TbhxDrPctfRnd5DFSY_cbrtLTtayLdmFLFcH5SREZTnvkm1VcuGvEnEv-pJzgJhIRGKw7nfmpWlDgl7nhm-VtH1VG5_kP9B1BIukw"
									},
									{
										"key": "azds-route-as",
										"value": "semine"
									},
									{
										"key": "x-language-code",
										"value": "en"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"
									},
									{
										"key": "origin",
										"value": "https://semine.angular.nginx.devsemine.no"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-site"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "accept-language",
										"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
									}
								],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/619fbbed-79ef-4f29-855c-d170cc20d1b4/values/condensed?take=15&query=req-acc",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"619fbbed-79ef-4f29-855c-d170cc20d1b4",
										"values",
										"condensed"
									],
									"query": [
										{
											"key": "take",
											"value": "15"
										},
										{
											"key": "query",
											"value": "req-acc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoicelines/ID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "authority",
										"value": "semine.webapi.nginx.devsemine.no"
									},
									{
										"key": "pragma",
										"value": "no-cache"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "dnt",
										"value": "1"
									},
									{
										"key": "authorization",
										"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjJDRTREMkQ1QTg4MjFCNkJDNjREQjMwNkUzODJDN0ZBNDk3NjhCQ0EiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJMT1RTMWFpQ0cydkdUYk1HNDRMSC1rbDJpOG8ifQ.eyJuYmYiOjE2MDcxOTc0MDQsImV4cCI6MTYwNzI4MzgwNCwiaXNzIjoiaHR0cHM6Ly9zZW1pbmUubG9naW4ubmdpbnguZGV2c2VtaW5lLm5vIiwiYXVkIjoic2VtaW5lIiwibm9uY2UiOiJhOVlWa0hhVGRmSzVQRkUwTS1FVGcyc25WQmVXZGwzWkRQbmJzbTZjNjNSVGwiLCJpYXQiOjE2MDcxOTc0MDIsInNfaGFzaCI6ImhfdjB0OUh1eHNOMy1HSU5venJ2MGciLCJzaWQiOiJqQkEyU1A5bnhudmpLbm1mTjlwdHhBIiwic3ViIjoidGVzdGNvbnRyb2xsZXJAdXNlZnVsLm5vIiwiYXV0aF90aW1lIjoxNjA3MTk3NDAxLCJpZHAiOiJsb2NhbCIsIm5hbWUiOiJUZXN0IENvbnRyb2xsZXIiLCJ1c2VyaWQiOiJlYzE4OTMwNS0wZjk5LTRhMDEtOGMwMC0yNmZlMGU4ZDk1N2YiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJ0ZXN0Y29udHJvbGxlckB1c2VmdWwubm8iLCJhbXIiOlsicHdkIl19.i1Dp9oYDrZ4PYg6uPDWO5vYjRNk8OhgGaEIav-gwvlZ4C2_X1PriL81edQROoqglBXMrBzCTIMa6M5RSObI9n22agU1YbuYuhphY04bvnq4OLbNIaVWdb34NdSfQGB6NusKsOfMr-8n9ND_w6-tcfQGwk0rdurNc-PQ0hgze0JXZOWPKqqI4cSSNLFQsF4G9TOalCEBbjqK6O4XZaoguXWyTj2qIKEY4gwP9Cz2Si2bXkGaT1TbhxDrPctfRnd5DFSY_cbrtLTtayLdmFLFcH5SREZTnvkm1VcuGvEnEv-pJzgJhIRGKw7nfmpWlDgl7nhm-VtH1VG5_kP9B1BIukw"
									},
									{
										"key": "azds-route-as",
										"value": "semine"
									},
									{
										"key": "x-language-code",
										"value": "en"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "origin",
										"value": "https://semine.angular.nginx.devsemine.no"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-site"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "accept-language",
										"value": "nb-NO,nb;q=0.9,no;q=0.8,nn;q=0.7,en-US;q=0.6,en;q=0.5"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": null,\r\n    \"quantity\": 10,\r\n    \"unitPrice\": 20,\r\n    \"netAmount\": 200,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0.5,\r\n    \"issueDate\": \"2020-12-06T00:25:37.697Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-Batch-100-1-20201205-1751480\",\r\n    \"accountTypeParameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n            \"parameterValueId\": \"4492c679-9625-4534-a653-9a038523d498\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/05b58ef5-c3e2-436f-832a-d832f7710506/invoicelines/61ad19cb-4103-4215-aa0f-e96a7359943f",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"05b58ef5-c3e2-436f-832a-d832f7710506",
										"invoicelines",
										"61ad19cb-4103-4215-aa0f-e96a7359943f"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "--- END ---",
					"item": [
						{
							"name": "--- END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"invoiceType : \" + pm.environment.get(\"invoiceType\"))\r",
											"console.log('/// END ///');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/activities - posted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json().data;\r",
											"\r",
											"    // console.log(jsonData)\r",
											"\r",
											"    var jsonDataActivity;\r",
											"    \r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].activityOperationType == \"PostedSuccessfully\") {\r",
											"            jsonDataActivity = jsonData[i];\r",
											"            console.log(jsonDataActivity);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    ///////// Status in approved if workflow triggered /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : activities invoice posted\", function () {\r",
											"\r",
											"        pm.expect(jsonDataActivity.createdBy).property(\"userName\", \"Test Integration\");\r",
											"        pm.expect(jsonDataActivity.createdBy).property(\"email\", \"testintegration@useful.no\");\r",
											"        pm.expect(jsonDataActivity.details).property(\"comment\", null);\r",
											"\r",
											"    });\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceId}}/activities",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceId}}",
										"activities"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenPWA}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" :  Response time should be less than 60 seconds\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"",
					"",
					"// console.log(pm.environment.get(\"cSupplierCode-A\"));",
					"// console.log(pm.environment.get(\"cSupplierVATId-A\"));",
					"",
					"// console.log(pm.environment.get(\"cSupplierCode-A\"));",
					"// console.log(pm.environment.get(\"cSupplierVATId-A\"));",
					"",
					"",
					"// console.log(pm.environment.get(\"UserController\"));",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0a136636-aff2-4e8c-ad66-1d08e2783144",
			"key": "cInvoiceNumber",
			"value": ""
		},
		{
			"id": "af01c916-ac64-446e-a415-3233b1e24fe7",
			"key": "cPackageId",
			"value": ""
		},
		{
			"id": "3199eba8-1dbc-4dc3-be99-dcda48846685",
			"key": "cSupplierCode-A",
			"value": ""
		},
		{
			"id": "e39393ac-16f2-4c55-a07e-f42ff3b31757",
			"key": "cSupplierVATId-A",
			"value": ""
		},
		{
			"id": "b23c8084-5eb0-4b64-9aee-4e6de23c2847",
			"key": "cSupplierId-A",
			"value": ""
		},
		{
			"id": "982368e1-6fc7-405c-af5a-34fb447d04e6",
			"key": "cAccountingCode-A",
			"value": ""
		},
		{
			"id": "eaf76c94-5114-499b-b1c2-ede4f2fe914b",
			"key": "cDueDate",
			"value": ""
		},
		{
			"id": "64c81caf-f642-4b09-a90d-2a49c3dc02cd",
			"key": "cInvoiceDate",
			"value": ""
		},
		{
			"id": "f3c82b7d-793a-486e-a4a2-1d8bee248db2",
			"key": "cIssueDate",
			"value": ""
		},
		{
			"id": "30db5520-e161-4032-a809-4747d410bd46",
			"key": "cAccountTypeParameterId",
			"value": ""
		},
		{
			"id": "d1eb5fda-4fff-466a-9fa0-c7e58e4d1705",
			"key": "cInvoiceLineId",
			"value": ""
		},
		{
			"id": "9854880e-7f0f-4ce1-a818-3122222f79c3",
			"key": "cAttachmentId",
			"value": ""
		},
		{
			"id": "a7e57f44-9a67-482d-bb08-86b9cfa5f301",
			"key": "cWorkflowId",
			"value": ""
		},
		{
			"id": "35c66287-effb-4d90-89c5-cfdd19fc9894",
			"key": "oAccountingCode-A",
			"value": ""
		},
		{
			"id": "57aaa9b3-6590-4f3a-976d-eacfc48a634e",
			"key": "YYYYMMDD-HHmmss",
			"value": ""
		},
		{
			"id": "f6121887-60ae-4c31-b35d-1d57a14d5372",
			"key": "cYYYYMMDD-HHmmss",
			"value": ""
		},
		{
			"id": "3d709431-0b42-42f5-a920-c145bc19ca7d",
			"key": "invoiceLineId_Delete",
			"value": ""
		},
		{
			"id": "95e172f5-d0c9-4c1c-90e0-1eb950842a5e",
			"key": "invoiceLineId_Split",
			"value": ""
		},
		{
			"id": "2f5226df-de77-48da-a44c-bf37f35f9e86",
			"key": "LineItem_1",
			"value": ""
		},
		{
			"id": "539e888d-9d70-4403-9e34-991fcbbddfe0",
			"key": "LineItem_2",
			"value": ""
		},
		{
			"id": "8c2ef277-8696-4787-b21e-cec19960a228",
			"key": "invoiceLineId_Code",
			"value": ""
		},
		{
			"id": "14e52b1d-e34d-4d23-8c7e-5b3956b6c796",
			"key": "address1-Delivery",
			"value": ""
		},
		{
			"id": "64e8cc96-b690-4db8-babd-58986f950aea",
			"key": "address2-Delivery",
			"value": ""
		},
		{
			"id": "8bf8bc3b-cd06-4cab-95da-a246a464acbf",
			"key": "addressType-Delivery",
			"value": ""
		},
		{
			"id": "546d326e-c2dc-47fb-aed2-3372c164cfd2",
			"key": "city-Delivery",
			"value": ""
		},
		{
			"id": "6f3face7-51aa-4b37-81cf-c75fc689d2b1",
			"key": "code-Delivery",
			"value": ""
		},
		{
			"id": "7d3f0445-464b-44a3-b8b9-259176c6007c",
			"key": "code-Delivery-Encoded",
			"value": ""
		},
		{
			"id": "ef48cb2d-6506-4d9e-bc51-b5905b15147c",
			"key": "country-Delivery",
			"value": ""
		},
		{
			"id": "25e03452-722e-4265-92fe-e8695bab331f",
			"key": "externalCode-Delivery",
			"value": ""
		},
		{
			"id": "5b08f716-2572-41df-a660-cae5317c20b3",
			"key": "name-Delivery",
			"value": ""
		},
		{
			"id": "0d7793ba-c7e0-42e5-a073-f6fdd8a3361e",
			"key": "status",
			"value": ""
		},
		{
			"id": "745f22e7-c2a2-4fbb-be11-290da6e000b4",
			"key": "zipCode-Delivery",
			"value": ""
		},
		{
			"id": "ffe17cb1-17b5-4755-9a25-4d47067e6d42",
			"key": "parameterValueIdLedger",
			"value": ""
		}
	]
}