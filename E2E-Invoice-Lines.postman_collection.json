{
	"info": {
		"_postman_id": "54f59981-2746-41b9-9f2d-69443edc9ecc",
		"name": "E2E-Invoice-Lines",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "InvoiceLine",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 10)\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        //pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassController}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invoice-1",
					"item": [
						{
							"name": "INT /invoices - Cost Minimum - Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"INT-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// Invoice dates\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"pm.environment.set(\"cInvoiceDate\", moment());\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"pm.environment.set(\"dateStart\", \"11.11.2020\");\r",
											"pm.environment.set(\"dateEnd\", \"12.02.2021\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceIdForLine\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit is: \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"console.log(\"cInvoiceIdForLine is  : \" + pm.environment.get(\"cInvoiceIdForLine\"));\r",
											"\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 500,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 400,\r\n        \"ReportingAmount\": 500,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-FA}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"FixedAsset-{{cSupplierCode-FA}}\",\r\n        \"Code\": \"{{cSupplierCode-FA}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-FA}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-FA}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-FA}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-FA}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{invoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{invoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"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IDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDY4NCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgNjM0IDYxMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2MTIgMCA1NDkgMCA2MTUgMCAwIDYzMyAyNzcgMCAwIDAgOTc0IDYzMyAwIDAgMCAwIDUyMCAzOTIgXQogICAgL1RvVW5pY29kZSA5IDAgUgo+PgplbmRvYmoKMSAwIG9iago8PCAvVHlwZSAvUGFnZXMKICAgL0tpZHMgWyAyIDAgUiBdCiAgIC9Db3VudCAxCj4+CmVuZG9iagoxMiAwIG9iago8PCAvUHJvZHVjZXIgKGNhaXJvIDEuMTYuMCAoaHR0cHM6Ly9jYWlyb2dyYXBoaWNzLm9yZykpCiAgIC9DcmVhdG9yIDxGRUZGMDA0OTAwNkUwMDZCMDA3MzAwNjMwMDYxMDA3MDAwNjUwMDIwMDAzMTAwMkUwMDMwMDAyMDAwMjgwMDY4MDA3NDAwNzQwMDcwMDA3MzAwM0EwMDJGMDAyRjAwNjkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyRTAwNkYwMDcyMDA2NzAwMjk+CiAgIC9DcmVhdGlvbkRhdGUgKEQ6MjAyMDEyMDIxODQ4NDYrMDEnMDApCj4+CmVuZG9iagoxMyAwIG9iago8PCAvVHlwZSAvQ2F0YWxvZwogICAvUGFnZXMgMSAwIFIKPj4KZW5kb2JqCnhyZWYKMCAxNAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDU1OTIgMDAwMDAgbiAKMDAwMDAwMDQ1MSAwMDAwMCBuIAowMDAwMDAwMzQyIDAwMDAwIG4gCjAwMDAwMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDMyMCAwMDAwMCBuIAowMDAwMDA1MTgzIDAwMDAwIG4gCjAwMDAwMDA2ODMgMDAwMDAgbiAKMDAwMDAwNDUwMiAwMDAwMCBuIAowMDAwMDA0NTI1IDAwMDAwIG4gCjAwMDAwMDQ4ODkgMDAwMDAgbiAKMDAwMDAwNDkxMiAwMDAwMCBuIAowMDAwMDA1NjU3IDAwMDAwIG4gCjAwMDAwMDU5MzMgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSAxNAogICAvUm9vdCAxMyAwIFIKICAgL0luZm8gMTIgMCBSCj4+CnN0YXJ0eHJlZgo1OTg2CiUlRU9GCg==\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "--- Sleep 5 sec---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(7);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"if (retries < 15) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries);\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - checkInvoiceSublier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200, 404, 503) {\r",
											"     pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
											"    pm.environment.set(\"sublierId\", pm.response.json().seller.id);\r",
											"     pm.environment.set(\"sublierName\", pm.response.json().seller.name);\r",
											"}\r",
											"console.log(\"SublierId is: \" + pm.environment.get(\"sublierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \" SublierName is: \" +  pm.environment.get(\"sublierName\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/- attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments 1 OK\", function () {\r",
											"        pm.expect(jsonData[0]).to.be.not.empty;\r",
											"       pm.expect(jsonData[0]).to.have.not.property(\"attachmentId\", []);\r",
											"        pm.expect(jsonData[0]).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \".pdf\");\r",
											"        pm.expect(jsonData[0]).to.have\r",
											"        .property(\"isInvoicePdf\", true);\r",
											"        // pm.expect(jsonData[0].fileSize).to.not.eql(0);\r",
											"        pm.expect(jsonData[0]).to.have.property(\"mimeType\", \"application/pdf\");\r",
											"        pm.expect(jsonData[0]).to.have.property(\"isInitialInvoiceDocument\", true);\r",
											"\r",
											"    });\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachments 2 OK\", function () {\r",
											"        pm.expect(jsonData[1]).to.be.not.empty;\r",
											"        pm.expect(jsonData[1]).to.have.not.property(\"attachmentId\", []);\r",
											"        pm.expect(jsonData[1]).to.have.property(\"fileName\", pm.environment.get(\"invoiceNumber\") + \"-2.pdf\");\r",
											"        pm.expect(jsonData[1]).to.have.property(\"isInvoicePdf\", false);\r",
											"        // pm.expect(jsonData[1].fileSize).to.not.eql(0);\r",
											"        pm.expect(jsonData[1]).to.have.property(\"mimeType\", \"application/pdf\");\r",
											"        pm.expect(jsonData[1]).to.have.property(\"isInitialInvoiceDocument\",true);\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"attachmentId_1\", jsonData[0].attachmentId)\r",
											"    pm.environment.set(\"attachmentId_2\", jsonData[1].attachmentId)\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/attachments/ 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found.\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"%PDF-1.5\"); // Start of file\r",
											"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
											"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
											"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments/{{attachmentId_1}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments",
										"{{attachmentId_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/attachments/ 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_2 is found.\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"%PDF-1.5\"); // Start of file\r",
											"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
											"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
											"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
											"    });\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments/{{attachmentId_2}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments",
										"{{attachmentId_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/- attachment_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for (x in jsonData) {\r",
											"        \r",
											"            pm.environment.set(\"attachmentId_3\", jsonData[x].attachmentId);\r",
											"        }\r",
											"}\r",
											" console.log(\"attachmentId_3 is : \" +pm.environment.get(\"attachmentId_3\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "files",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "application/pdf",
											"type": "file",
											"src": "/Users/duygueren/Desktop/postman/AttachmentForPostAndDelete_(1).pdf"
										},
										{
											"key": "files",
											"value": "JVBERi0xLjUKJcK1w63CrsO7CjQgMCBvYmoKPDwgL0xlbmd0aCA1IDAgUgogICAvRmlsdGVyIC9G\nbGF0ZURlY29kZQo+PgpzdHJlYW0KeMKcZU/Cu27DgzAMw5zDuRUcw63DgcKMwqgHKcKNLcKQwqVb\nUW1FwofDgMKwwpMOCsOQw4bDv8KPKsKNLQPCrQgIwrgjeXdkNMK1BsKuX8O0TDEmVcOGwrHDgBfC\nmMOfw5bDtxkPJ8KDw6cbPGdIwpTDqsOTw7BYasOIOiHCm1Qsw5pgKQZlJ8KYCxzDpsOBDAYZw7MM\nw6/DncObVD7CrxPDpsKeJXbDk23DgcKnwp7CtVvClsOTw5gPwq7Cu8KUw6nCusO0H8O5BcKOw7lu\nTUHColh9JHA2wpIyI8KrwpDDhsKAZWfCksKjw6QDOsO2wqRJw5Eawq0BasKkwqQkbsOHI8OaaMOI\nwqvDgj4iUk3CpEk0wrzCmsKMOxMSwokNwpsEwrIPw5U8QHNZwonCusKyw6XDmMKYwpZzwpXDuHvD\nicKIF8O4f8OdDMKvw7ADX8OmVWAKZW5kc3RyZWFtCmVuZG9iago1IDAgb2JqCiAgIDIyOAplbmRv\nYmoKMyAwIG9iago8PAogICAvRXh0R1N0YXRlIDw8CiAgICAgIC9hMCA8PCAvQ0EgMSAvY2EgMSA+\nPgogICA+PgogICAvRm9udCA8PAogICAgICAvZi0wLTAgNiAwIFIKICAgPj4KPj4KZW5kb2JqCjIg\nMCBvYmoKPDwgL1R5cGUgL1BhZ2UgJSAxCiAgIC9QYXJlbnQgMSAwIFIKICAgL01lZGlhQm94IFsg\nMCAwIDU5NS4yNzU1NzQgODQxLjg4OTc3MSBdCiAgIC9Db250ZW50cyA0IDAgUgogICAvR3JvdXAg\nPDwKICAgICAgL1R5cGUgL0dyb3VwCiAgICAgIC9TIC9UcmFuc3BhcmVuY3kKICAgICAgL0kgdHJ1\nZQogICAgICAvQ1MgL0RldmljZVJHQgogICA+PgogICAvUmVzb3VyY2VzIDMgMCBSCj4+CmVuZG9i\nago3IDAgb2JqCjw8IC9MZW5ndGggOCAwIFIKICAgL0ZpbHRlciAvRmxhdGVEZWNvZGUKICAgL0xl\nbmd0aDEgNTQyMAo+PgpzdHJlYW0KeMKcw6VXe3hUw5XCtV/Du8KswrPDp8KdwpkzwpPCmTxIw6bC\nlWRIwoYQEhNCCEQzIigPwqXDocKhBW7CowPChMKIVEwAw6VhwogEwrzDpMKBw5hgwoXCqMKIMSJQ\nBcKKKVJIICBoDFZMw6vClcKEW8KrXhViKcO3wo7CkcOawqDCvWPCssOTdcKGwqDCtsK3w7bDtsK7\nw7/DtMOrd8O3wp4ze8OvwrXDtmPDvcOWa8KfAwwADFAFCMKewoVLw6fCl8K/Z3xmO8KAw74tAGnD\nnsOCwpXDt3vDoB5nPsKAKQ3CgMKJw5LDssK7wpcuG8K9cgnCgMKZw4bCsMOvw657w5fClGrCnW8G\nwqnCv8Kfw5Z4Fi/Cml9iw7otO0fDvC7CosKNWUzChMKoZ8K1FQAWE8KNUxYvwr1/dWA1wr9Ew6Ms\nGsKPwr3Ct2zDoXzCgMOAw7s0XkzDo8KCwqXDs1fCl8OLFcKaZTTDnkVjT8O5w7JFw6XDo8K1wr/C\np8KuwqUdwoAvBglKRcKDXMOKd8KRwrRaGBYww4lfwoHDpivCpsOjw6skGTLDm8K7QsOXwoHDkhXD\nqgplRVvCvVbCn8OXw6otwpXCoX8FJsO0fyIawrTDpj9+wr5cw6MHBjXCgxfDpMKdw7wywqTDgkPC\ngcKCKMKTZDZKLsK3S8KnwpfCtAbDicOtdk0wGF1uw5nDgcOAw7HCnH1rw5w2wqvCvA3CtsO6HsKz\nbk5zGcKMw64ELSQlw4TCmzPCtMOxw7bCpDTDpcO9w7ZQf8Kow4dqw4vCp0JHw7fDtMO1woTClMOe\nL3rClQ5rbH7DlsK0WXPCtMKKw7lTw6oONXPCkw5aw7zCjBUfdsO7M8O9w5/Ds2Mxc8KMYsOJSRrC\nhz3DhsONXMOMYcKXwr1Jw4NTc10sJ3tMw67DqMOhwplsFMOLHcKdwpLCkx0jT17DscOWXcK7X17C\ntcOnw4HDs8O/Lj4QF8KXfFZVEVrDvsOTwrbCmsOtFcOnw59kwrFXw67DuQ3Dn8O1esOewpjCqsKV\nCxfCucOjw5PDnz3DvMOuR1nCmW9PwrrCucO2wqHDu8OWwrrDozJOw67Dq8OoGU7DpsKEZcKEe8Kd\nXAF2SMKAw7JACjjCmMK+WlfDix0vMsOeamLDh8OiWm0twqbDjcKJCQ5Jw6fDkMOBNMOJZsKZwpTC\nqMO0wofDukLDrQQwwoIuw5TCo8O0UsOtw6slQlbDgF/DqCx3NjnDn3ZedsOyQihkwoVSwqHCozDC\ngcKPw5Rmw6oyw7UjDWVQw4bDisKkMkdZwoLCvngZI8Ksw54IwrA8wofCmSV7w4DCqkBONmgjw7jC\ntcOywrrDvsKDwqbDjiNLTi9Yw7jDtg9Fwp84w43DvMO9w6fCmcK2RcOaXcK7wr3DlSzDnTnDr8OE\nw6nDkcKjD8KMGMOJw4YyA8KLZjfCiQ/DmsKfOHTCoMKRXBLCjgJowp3ChCkJw6YFwoZrbMO6OAto\nwpxawofCqcOGw6nDgcKWwoTCtnhFC1bCi07CpynCssOqLEXCiXHCumE3JxPCpsOsw77DvsO+UARV\nZkFBT19BeyjDm2ojwpMFwqLCs1LCilLDilPCtsKkNFF9JcOlw4PClMOBFD3DiX4DSR7Do8KwJltH\nD1fDrcO1w61Owo4jw4LClMO9wpNObnjDqUTDq8OyB8Oqw7fCtC5fw7XDqMKew5bDlsOCw6Y1D8Ou\nw4PCusK1K8Kvwpwfw7jCgcOUw7jDnMKOE8K7BmrCpMOGwp1Pwr/DssO8QMKNHDxww7fCgsK1w6TD\nmWTCl1MEZMKNw4Yew7HDqcO0woBZc0LDvhnCtEnCnMOpZMK4WcKnw7QXwoTCsknDjsKew75QVsOA\nwqjDqAPDuiJ9UF/CrsOnwqw4OidyfsOywqkWKnLDsMKrJsKNw73DksKQTsOkEsOSSTTCjAnDhMKj\nHsOQw4w0NWZrwovCqcONw4AkHUzCj8OSw6vCjDfDm1U1w7TChVQNw7TDtMK1wociw7APBR3Cv3JI\nwoTDt8KvASxpWcK7dsObw77DlsOWCS8/cMKqQ8OawqVCesK2UcKFRFAWwpV8BmwwTMOnXsOiw53C\nhGIqwqHCkMK2w4F6wpkFMBECXMKndMO1w7TDt8OQWX3CocOsLDbCrcOZMHvDjnHDkEHCgMKEw5XC\ngW7DsMOkWGvDnsOYwrnCgWjDkMK7QWHCisOkw5bCqjjDi8O1w4/DqsO1w4XDqHV4SQrCr0bDvmzC\noMO3w4xAL8Ovw54bw67DpsOpKsOOwrLDgQt4wppwwqbDgsOFwqE4wp41FMOGwrPCvgljwqhmdcKy\nwr3DmlEXw5dqwpVbfS3Dn8OEw7HDjATCnVnCq8KzJ01KU8O6w5spaXw7wo5DworCuMOSwqtcw6nC\ntcO9eRxfC2NIwqUwDixNNCQaE03Co8OIw5lHGkfCmsOGw6vDhxvDhhvDh8Kbwowew7DCsBQpw43C\nkGYcEcKdacOPdMKMwohJc8KlwrnDvR7CvzclwrXDmlBtwqw2VUfDmcOIw7JMwpI0BsKNEU0YwoVm\nwrTCoMKCw7E4DBMwUXbDqlMzw73ChcO+wrvDvMOrw7xVw74tw74mw79lf1wxUBjDvUXDgsOQJMO/\nw4/ChDHChsKMwoXCj0x/YV5dw53CgsKtwoXDrcK7wr/DvMO1wrzDl8OuLcOtwpjCv2HDs8KifcKB\nfU9+w7TDi8OSQ3LDocKBwrTCtMOZwrMDU8K8w6YRT8OVw604wpzCnHwiN3fDrsKMaUU+S8OKwrYN\nwo3Du13Cql8yw4gjw6fDvMKcN8KSH8KNDcOEwpvCucOOwoIvwoLClcK1w6lqDEbDksKyDDrDhWZW\nw73CqMKgwp1+w5nCqsOmMkNXYyk/P8Orw6BLDsKmesKSaj57w4x4w6YgUXPCrcOJwrk5VsK2wopV\nwojCjcOTVhw/w57CvcKzwqbChjfCilfDqwfCmsOqwqZvf8O2HSlYw49uwrgaE8KKwprDr8OJwpck\nwrrCm14Nw5xIw6fCgsOMZcOJw4rCucOMwqwGNMKAVQJEwoPDlsOKZcKNSsOUW8ORwqBTGRMAwrXD\nmxjCrsOXc8K9TsKrwpFRYsKgw6cGwqPDksOVHhsJw7fCnsKuwpBtw4jCpsO8Uy3DvcKuNcK6wqtd\nw6Vqwp/CjMOsMcKpRsKeYGEWw4nCosK1w6gsMAdWQjlsBsK9wpbDqSQNw6rDpRgWL8Odw4HDpkhF\nwqbCu8OZYmk1WynCrcOFw6XDsirDrWpdDcKrwpXCqkxPSk9hwoMcS8KWw5MzL8OLYcOJw6jDhWTC\nqU3DtEo+UcOxwonClMO/TsOtw4BdwrXDncOcPBDCjwfDgsOpbMKdWB/DgV5BeTrCg8O8w5oAPmgL\nwqTDhsK7wo3CsXozwrwYwqtpNVs9w5XDrsKjwonCrcOJw6TDhsKxJsKIw4U4NcKWw53CqMKzTxpO\nw7HDvFZXKFtVPsOhbMOvw6nDqycvw67CoHxtw43Ct8OmwqvDucO6wr4sZ8KWK8OLwp3DpcOJw7Jm\nJRXCpgbCnAFXw4Adw7AEwrzCgcKkImfCkcKrw4hdw6Qpw7IWJRXCpcKWwqdudMOWwrhqw5w1wp4a\nw6/DhsKkLcKpTcKpwpdTXcOXwpZeW3RtQcOQFXQHPUFvwrnCq8OcXcOuKcO3VsK5wqrDnFXCnipv\n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\nLSVoFhhlworDoVECTTTDmxTCg0bCgQYFw7UCdTRNJ1BrR00Jw4rDhMKUw4kDHEhUFMKUwqUVLmUg\nUxAEwrIWVsKyw7FRwpbDvsOPUMOgHy3DgMOfLMOOPwENw4A5w68KZW5kc3RyZWFtCmVuZG9iago4\nIDAgb2JqCiAgIDM3MjUKZW5kb2JqCjkgMCBvYmoKPDwgL0xlbmd0aCAxMCAwIFIKICAgL0ZpbHRl\nciAvRmxhdGVEZWNvZGUKPj4Kc3RyZWFtCnjCnF3CkcOPbsKDMAzDhsOveQofwrtDRcKgwrTCtBJC\nwprCugvCh8O9w5HDmB4gJMKGRhohCsOhw4DDm8OPScKqTsOawoHDuBfDm8OfJ8OjZMOXw7bCpTXD\nmkPDtsOhZsOZwqHCh0Ebw6VwwplXJxF6HMK1YXkBSkt/wr/DhVNOw4LCssKMw4TDncK2eMKcWjPD\njMKswq4hw7vCpMOiw6LDnQbCu2c1w7fDuMOEACB7dwrCnTYjw6zCvsKvXUp1wqvCtT84wqHDscOA\nWcOTwoDDgsKBw6xewoV9ExNCFsOFw7tWUV3Du21PwrLCv8KOwq/DjSIUw7HCnsKnwpHDpMKscMKx\nQsKiE2ZEVnPDnkA9DA1DwqPDvsOVw7JDwpLDtMKDwrwJw4fDqsOjwoFaOcKnw4DDqsOTMTIFYsKV\nWAXCviTCvgTDhsOESFzDsMOIFMOIwqdMPiVxwpU8wqvDoFnCpXwVw7JlHsKZAsO5JD5FTsO9wqc4\nw4M5w7E5Dn/CnzLDvEbDmMO3Yz9ydcKOVhMfJcOuJGxDG3zCvMKbwp1tUMOFw68XbwXCi8KhCmVu\nZHN0cmVhbQplbmRvYmoKMTAgMCBvYmoKICAgMjg2CmVuZG9iagoxMSAwIG9iago8PCAvVHlwZSAv\nRm9udERlc2NyaXB0b3IKICAgL0ZvbnROYW1lIC9BTlpITkorRGVqYVZ1U2FucwogICAvRm9udEZh\nbWlseSAoRGVqYVZ1IFNhbnMpCiAgIC9GbGFncyAzMgogICAvRm9udEJCb3ggWyAtMTAyMCAtNDYy\nIDE3OTMgMTIzMiBdCiAgIC9JdGFsaWNBbmdsZSAwCiAgIC9Bc2NlbnQgOTI4CiAgIC9EZXNjZW50\nIC0yMzUKICAgL0NhcEhlaWdodCAxMjMyCiAgIC9TdGVtViA4MAogICAvU3RlbUggODAKICAgL0Zv\nbnRGaWxlMiA3IDAgUgo+PgplbmRvYmoKNiAwIG9iago8PCAvVHlwZSAvRm9udAogICAvU3VidHlw\nZSAvVHJ1ZVR5cGUKICAgL0Jhc2VGb250IC9BTlpITkorRGVqYVZ1U2FucwogICAvRmlyc3RDaGFy\nIDMyCiAgIC9MYXN0Q2hhciAxMTYKICAgL0ZvbnREZXNjcmlwdG9yIDExIDAgUgogICAvRW5jb2Rp\nbmcgL1dpbkFuc2lFbmNvZGluZwogICAvV2lkdGhzIFsgMzE3IDAgMCAwIDAgMCAwIDAgMCAwIDAg\nMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2ODQgMCAwIDAgMCAw\nIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDYzNCA2MTAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAg\nNjEyIDAgNTQ5IDAgNjE1IDAgMCA2MzMgMjc3IDAgMCAwIDk3NCA2MzMgMCAwIDAgMCA1MjAgMzky\nIF0KICAgIC9Ub1VuaWNvZGUgOSAwIFIKPj4KZW5kb2JqCjEgMCBvYmoKPDwgL1R5cGUgL1BhZ2Vz\nCiAgIC9LaWRzIFsgMiAwIFIgXQogICAvQ291bnQgMQo+PgplbmRvYmoKMTIgMCBvYmoKPDwgL1By\nb2R1Y2VyIChjYWlybyAxLjE2LjAgKGh0dHBzOi8vY2Fpcm9ncmFwaGljcy5vcmcpKQogICAvQ3Jl\nYXRvciA8RkVGRjAwNDkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyMDAwMzEwMDJFMDAz\nMDAwMjAwMDI4MDA2ODAwNzQwMDc0MDA3MDAwNzMwMDNBMDAyRjAwMkYwMDY5MDA2RTAwNkIwMDcz\nMDA2MzAwNjEwMDcwMDA2NTAwMkUwMDZGMDA3MjAwNjcwMDI5PgogICAvQ3JlYXRpb25EYXRlIChE\nOjIwMjAxMjAyMTg0ODQ2KzAxJzAwKQo+PgplbmRvYmoKMTMgMCBvYmoKPDwgL1R5cGUgL0NhdGFs\nb2cKICAgL1BhZ2VzIDEgMCBSCj4+CmVuZG9iagp4cmVmCjAgMTQKMDAwMDAwMDAwMCA2NTUzNSBm\nIAowMDAwMDA1NTkyIDAwMDAwIG4gCjAwMDAwMDA0NTEgMDAwMDAgbiAKMDAwMDAwMDM0MiAwMDAw\nMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDAzMjAgMDAwMDAgbiAKMDAwMDAwNTE4MyAw\nMDAwMCBuIAowMDAwMDAwNjgzIDAwMDAwIG4gCjAwMDAwMDQ1MDIgMDAwMDAgbiAKMDAwMDAwNDUy\nNSAwMDAwMCBuIAowMDAwMDA0ODg5IDAwMDAwIG4gCjAwMDAwMDQ5MTIgMDAwMDAgbiAKMDAwMDAw\nNTY1NyAwMDAwMCBuIAowMDAwMDA1OTMzIDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgMTQKICAg\nL1Jvb3QgMTMgMCBSCiAgIC9JbmZvIDEyIDAgUgo+PgpzdGFydHhyZWYKNTk4NgolJUVPRgo=",
											"contentType": "application/pdf",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/attachments/_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment_1 is found.\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"%PDF-1.5\"); // Start of file\r",
											"        pm.expect(pm.response.text()).to.include(\"%%EOF\"); // End of file\r",
											"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
											"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments/{{attachmentId_3}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments",
										"{{attachmentId_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/attachments_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments/{{attachmentId_3}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments",
										"{{attachmentId_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/attachments/ CheckAttachment_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    var fileName = false;\r",
											"    for (var i in jsonData) {\r",
											"        if (jsonData[i].fileName == \"AttachmentForPostAndDelete (1).pdf\") {\r",
											"            fileName = true;\r",
											"            break;\r",
											"    \r",
											"        }\r",
											"    }\r",
											"     console.log(fileName)\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Attachment is deleted.. \", function () {\r",
											"        pm.expect(jsonData[i]).to.not.have.property(\"fileName\", \"AttachmentForPostAndDelete (1).pdf\");\r",
											"    });\r",
											"    \r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/attachments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Skip to END-1 ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to END ---');\r",
											"postman.setNextRequest(\"--- END-1 ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/workflows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Workflow present\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"workflowState\", \"Active\");\r",
											"        pm.expect(jsonData.steps).to.be.not.empty;\r",
											"        pm.expect(jsonData.steps[0].allowedActions).to.be.not.empty;\r",
											"        pm.expect(jsonData.invoiceLines).to.be.empty;\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/workflows",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"workflows"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/workflowGroups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"     pm.environment.set(\"workflowgroupId\", pm.response.json()[0].id);\r",
											"}\r",
											"console.log(\"WorkflowgroupsId is: \" + pm.environment.get(\"workflowgroupsId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/workflowgroups",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"workflowgroups"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/workflowGroups - members",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/wfgroups/{{workflowgroupId}}/members",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"wfgroups",
										"{{workflowgroupId}}",
										"members"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/setasmodifiedbyapprover",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/setasmodifiedbyapprover",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"setasmodifiedbyapprover"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/ seeActivityForSetasmodifiedbyapprover",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/activities",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"activities"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "--- END-1 ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log('/// END ///');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "INT /invoices - seeInvoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and sublier are found. \", function () {",
											"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
											"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", pm.environment.get(\"sublierName\"));",
											"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Api\");",
											"        ",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "PWA /parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-A\")) {\r",
											"            pm.environment.set(\"dimensionParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
											"            pm.environment.set(\"interimParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
											"            pm.environment.set(\"ledgerParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"DimensionParameterId is: \" + pm.environment.get(\"dimensionParameterId\"));\r",
											"console.log(\"InterimParameterId is: \" + pm.environment.get(\"interimParameterId\"));\r",
											"console.log(\"LedgerParameterId is: \" + pm.environment.get(\"ledgerParameterId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"pm.environment.set('cDimensionCode-A', 'cDimCode-A ' + moment().format(\"YYMM\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"condensed"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INT-Account",
					"item": [
						{
							"name": "INT clients/ID/accountingcodes makeAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// pm.environment.set(\"count\", 5);\r",
											"\r",
											"console.log(\"Account is creted!\");\r",
											"\r",
											"// pm.environment.set(\"firstRequest\", pm.info.requestName);\r",
											"\r",
											"// console.log(pm.environment.get(\"firstRequest\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cAccountingCode-B', 'Adam-1-A-1' + moment().format(\"YYMM\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\":\"{{cAccountingCode-B}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Adams konto-22\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"{{cAccountingCode-B}} - Account code\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "<uuid>",
											"description": "(Required) Organization id of the organization to which the accounting codes are related."
										},
										{
											"key": "clientId",
											"value": "<uuid>",
											"description": "(Required) Client id of the client to which the accounting codes are related."
										}
									]
								},
								"description": "Inserts and updates accounting codes for a given client"
							},
							"response": []
						},
						{
							"name": "INT clients/ID/accountingcodes/A - seeAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{cAccountingCode-B}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes",
										"{{cAccountingCode-B}}"
									]
								},
								"description": "Gets an accounting code based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /values/condensed 1 Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.environment.set(\"parameterValueIdLedger\", jsonData.parameterValueId);\r",
											"}\r",
											"\r",
											"console.log(\"cAccountingCode-B is found: \" + pm.environment.get(\"cAccountingCode-B\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{ledgerParameterId}}/values/condensed?query={{cAccountingCode-B}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{ledgerParameterId}}",
										"values",
										"condensed"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "Adam-18",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-B}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INT Interim",
					"item": [
						{
							"name": "/accountingcodes Interim-3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"// pm.environment.set('cGLCode-A', 'cGLCode-A-' + moment().format(\"YYMM\"));",
											"",
											"pm.environment.set('Interim-3', \"II-M-3-\" + moment().format(\"YYMMDD-HHmmss\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{Interim-3}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"Interim account\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"Interim konto æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						},
						{
							"name": "/accountingcodes Interim-3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"  // console.log(jsonDataAL);\r",
											"\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Interim is found.\", function () {\r",
											"        pm.expect(jsonData.code).to.eql(pm.environment.get(\"Interim-3\"));\r",
											"        });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/accountingcodes/{{Interim-3}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"accountingcodes",
										"{{Interim-3}}"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /values/condensed 1 - Interim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json()[0];\r",
											"    pm.environment.set(\"interimParameterValueId\", jsonData.parameterValueId)\r",
											"}\r",
											"console.log(\"InterimParameterValueId is: \" +pm.environment.get(\"interimParameterValueId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{interimParameterId}}/values/condensed?take=5&query={{Interim-3}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"{{interimParameterId}}",
										"values",
										"condensed"
									],
									"query": [
										{
											"key": "take",
											"value": "5"
										},
										{
											"key": "query",
											"value": "{{Interim-3}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INT - Dimension",
					"item": [
						{
							"name": "Dimension A",
							"item": [
								{
									"name": "INT /dimensions A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cDimensionCode-A', 'cDimCode-A ' + moment().format(\"YYMM\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{cDimensionCode-A}}\",\n    \"status\": \"Active\",\n    \"description\": [\n        {\n            \"description\": \"{{cDimensionCode-A}} æøå\",\n            \"languageCode\": \"Norwegian\"\n        },\n        {\n            \"description\": \"{{cDimensionCode-A}}\",\n            \"languageCode\": \"English\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/A/values/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    // pm.expect(JSON.stringify(pm.response.json())|pm.response.code).to.eql(404);\r",
													"    // pm.expect(JSON.stringify(pm.response.json())).to.have.status(404);\r",
													"\r",
													"    pm.response.to.have.status(200);\r",
													"    // if (pm.response.code != 200) { pm.test(JSON.stringify(pm.response)); }\r",
													"});\r",
													"\r",
													"console.log(pm.response.json());\r",
													"\r",
													"// Create some sort of stack trace for DevOps\r",
													"if (pm.response.code != 200) { \r",
													"    pm.test(JSON.stringify(pm.response.json())); }"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"pm.environment.set('cHHmmss', moment().format(\"HHmmss\"));\r",
													"pm.environment.set('cDimensionCodeValue-A', 'DimValue-A ' + moment().format(\"YYMMDD\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"dimensionCode\": \"{{cDimensionCode-A}}\",\n        \"code\": \"{{cDimensionCodeValue-A}}\",\n        \"status\": \"Active\",\n        \"aliases\": [\n            \"{{cHHmmss}}-Alias-A\"\n        ],\n        \"description\": [\n            {\n                \"description\": \"Dimensjosnverdi æøå\",\n                \"languageCode\": \"Norwegian\"\n            },\n            {\n                \"description\": \"Dimension value\",\n                \"languageCode\": \"English\"\n            }\n        ]\n    }\n]"
										},
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-A}}",
												"values"
											]
										},
										"description": "Inserts and updates accounting codes for a given client"
									},
									"response": []
								},
								{
									"name": "INT /dimensions/A/values/A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//console.log(\"DimensionParameterValue: \" + pm.environment.get(\"cDimensionCodeValue-A\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values/{{cDimensionCodeValue-A}}",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-A}}",
												"values",
												"{{cDimensionCodeValue-A}}"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "INT /dimensions/A/values",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/dimensions/{{cDimensionCode-A}}/values",
											"host": [
												"{{INT}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"dimensions",
												"{{cDimensionCode-A}}",
												"values"
											]
										},
										"description": "Gets an accounting code based on the ERP code."
									},
									"response": []
								},
								{
									"name": "PWA /values/condensed 1 - Dimension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"if (pm.response.code == 200) {\r",
													"\r",
													"const jsonDataAL = pm.response.json();\r",
													"   //console.log(jsonDataAL);\r",
													"\r",
													"    var jsonDataAL1;\r",
													"\r",
													"    var i;\r",
													"\r",
													"    for (i in jsonDataAL) {\r",
													"        if (jsonDataAL[i].code == pm.environment.get(\"cDimensionCodeValue-A\")) {\r",
													"            var jsonDataAL1 =jsonDataAL[i];\r",
													"        pm.environment.set(\"dimensionParameterValueId\", jsonDataAL1.parameterValueId);\r",
													"        pm.environment.set(\"dimensionParameterId\", jsonDataAL1.parameterId)\r",
													"    }\r",
													"    }\r",
													"    }\r",
													"    // console.log(\"DimensionParameterValueId: \" + pm.environment.get(\"dimensionParameterValueId\"));\r",
													"    // console.log(\"DimensionParameterId: \" + pm.environment.get(\"dimensionParameterId\"));\r",
													"    // console.log(\"cDimensionCodeValue-A: \" + pm.environment.get(\"cDimensionCodeValue-A\"));\r",
													"\r",
													"// if (pm.response.code == 200) {\r",
													"//     const jsonData = pm.response.json()[0];\r",
													"//     pm.environment.set(\"dimensionParameterValueId\", jsonData.parameterValueId)\r",
													"// }\r",
													"// console.log(\"DimensionParameterValueId is: \" +pm.environment.get(\"dimensionParameterValueId\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TokenPWA}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/{{dimensionParameterId}}/values/condensed?take=5&query={{cDimensionCodeValue-A}}",
											"host": [
												"{{PWA}}"
											],
											"path": [
												"organizations",
												"{{organizationId}}",
												"clients",
												"{{datasetId}}",
												"parameters",
												"{{dimensionParameterId}}",
												"values",
												"condensed"
											],
											"query": [
												{
													"key": "take",
													"value": "5"
												},
												{
													"key": "query",
													"value": "{{cDimensionCodeValue-A}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "INT-VAT",
					"item": [
						{
							"name": "/vatcodes - 25,15,10,0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"pm.environment.set('cVatCode-R1-25', 'R1-VAT-25-' + moment().format(\"YYMMDD\"));\r",
											"pm.environment.set('cVatCode-R2-15', 'R2-VAT-15-' + moment().format(\"YYMMDD\"));\r",
											"pm.environment.set('cVatCode-R3-10', 'R2-VAT-10-' + moment().format(\"YYMMDD\"));\r",
											"pm.environment.set('cVatCode-R4-0', 'R2-VAT-0-' + moment().format(\"YYMMDD\"));\r",
											"\r",
											"\r",
											"pm.environment.set('cVatCode-S1', 'S1-VAT-10' + moment().format(\"YYMMDD\"));\r",
											"pm.environment.set('cVatCode-S2', 'S2-VAT-0' + moment().format(\"YYMMDD\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"code\": \"{{cVatCode-R1-25}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"25% VAT code\",\n                \"languageCode\": \"English\"\n            },\n            {\n                \"description\": \"25% MVA kode æøå\",\n                \"languageCode\": \"Norwegian\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 25\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-R2-15}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"15% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"15% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 15\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-R3-10}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"10% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"10% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 10\n            }\n        ]\n    },\n    {\n        \"code\": \"{{cVatCode-R4-0}}\",\n        \"status\": \"Active\",\n        \"description\": [\n            {\n                \"description\": \"0% VAT code\",\n                \"languageCode\": \"1\"\n            },\n            {\n                \"description\": \"0% MVA kode æøå\",\n                \"languageCode\": \"0\"\n            }\n        ],\n        \"vatRates\": [\n            {\n                \"validFrom\": \"2020-01-22T20:17:49.096Z\",\n                \"ratePercentage\": 0\n            }\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes"
									]
								},
								"description": "Inserts and updates transaction types"
							},
							"response": []
						},
						{
							"name": "/vatcodes/VAT-25",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R1-25}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{cVatCode-R1-25}}"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "/vatcodes/VAT-15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R2-15}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{cVatCode-R2-15}}"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "/vatcodes/VAT-10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R3-10}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{cVatCode-R3-10}}"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "/vatcodes/VAT-0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId}}/vatcodes/{{cVatCode-R4-0}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"vatcodes",
										"{{cVatCode-R4-0}}"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						},
						{
							"name": "PWA /parameters/condensed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].type == \"Dimension\" && jsonData[x].code == pm.environment.get(\"cDimensionCode-A\")) {\r",
											"            pm.environment.set(\"dimensionParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Interim\" && jsonData[x].code == \"INTERIM\") {\r",
											"            pm.environment.set(\"interimParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"        if (jsonData[x].type == \"Ledger\" && jsonData[x].code == \"NS\") {\r",
											"            pm.environment.set(\"ledgerParameterId\", jsonData[x].parameterId)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"DimensionParameterId is: \" + pm.environment.get(\"dimensionParameterId\"));\r",
											"console.log(\"InterimParameterId is: \" + pm.environment.get(\"interimParameterId\"));\r",
											"console.log(\"LedgerParameterId is: \" + pm.environment.get(\"ledgerParameterId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');",
											"pm.environment.set('cDimensionCode-A', 'cDimCode-A ' + moment().format(\"YYMM\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/parameters/condensed",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"parameters",
										"condensed"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PWA-Users",
					"item": [
						{
							"name": "PWA/Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"   console.log(jsonData);\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].name==\"Test Integration\") {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"testIntegrationId\", jsonDataAL.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].name==\"Adam Arelsen\") {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"adamsId\", jsonDataAL.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].name==\"Test Admin\") {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"testAdminId\", jsonDataAL.id);\r",
											"    }\r",
											"    }\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].name==\"Test Controller\") {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"testControllerId\", jsonDataAL.id);\r",
											"    }\r",
											"    }\r",
											"}\r",
											"console.log(\"TestIntegrationId is : \" +pm.environment.get(\"testIntegrationId\"));\r",
											"console.log(\"AdamsId is : \" +pm.environment.get(\"adamsId\"));\r",
											"console.log(\"TestAdminId is : \" +pm.environment.get(\"testAdminId\"));\r",
											"console.log(\"TestControllerId is : \" +pm.environment.get(\"testControllerId\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/users",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"users"
									]
								},
								"description": "Gets a fixed asset object based on the ERP code."
							},
							"response": []
						}
					]
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "PWA /invoiceLines/ID 1 - AddLIne_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-A\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-A\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"lineNumber\", pm.collectionVariables.get(\"lineNumber\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 0);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 400);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 400);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 500);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"var jsonData = pm.response.json().invoiceLines;\r",
											"   console.log(jsonData);\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].invoiceId=pm.environment.get(\"cInvoiceIdForLine\")) {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"quantity\", jsonDataAL.quantity);\r",
											"    pm.environment.set(\"unitPrice\", jsonDataAL.unitPrice);\r",
											"    pm.environment.set(\"netAmount\", jsonDataAL.netAmount);\r",
											"    pm.environment.set(\"totalAmount\", jsonDataAL.totalAmount); \r",
											"    }\r",
											"    }\r",
											"    }\r",
											"    // console.log(\"quantity is : \" + pm.environment.get(\"quantity\"));\r",
											"    // console.log(\"unitPrice is : \" + pm.environment.get(\"unitPrice\"));\r",
											"    // console.log(\"netAmount is : \" + pm.environment.get(\"netAmount\"));\r",
											"    // console.log(\"totalAmount is : \" + pm.environment.get(\"totalAmount\"));\r",
											"\r",
											"    // console.log(\"Line \" + pm.collectionVariables.get(\"lineNumber\") + \" is creted.\");\r",
											"    // console.log(\"cAccountTypeParameterId-A is : \" + pm.environment.get(\"cAccountTypeParameterId-A\"));\r",
											"    // console.log(\"cInvoiceLineId-A is : \" + pm.environment.get(\"cInvoiceLineId-A\"));\r",
											"\r",
											"//==========//For create Lopp//==================\r",
											"// var currentCount = pm.environment.get(\"count\")\r",
											"// if (currentCount > 0){\r",
											"//  currentCount = currentCount -1 ;\r",
											"//  pm.environment.set(\"count\", currentCount);\r",
											"//     postman.setNextRequest(pm.info.requestId);\r",
											"// } else {\r",
											"//     postman.setNextRequest();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLineForAmount_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"parameterIdLedger\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5.\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", pm.environment.get(\"quantity\"));\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", pm.environment.get(\"unitPrice\"));\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", pm.environment.get(\"netAmount\"));\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", pm.environment.get(\"totalAmount\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - putVat-VAT-25",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");",
											"",
											"// pm.environment.set(\"parameterValueId\", \"9276bcb4-3584-47ac-a010-54591ddddd40\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": null,\n    \"quantity\": 1,\n    \"unitPrice\": 250,\n    \"netAmount\": 250,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 21,\n    \"totalPeriod\": 3,\n      \"gtin\": \"GTIN-UBL-20210108-1511024\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{interimParameterId}}\",\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\n        },\n        {\n            \"parameterId\": \"{{vatParameterId}}\",\n            \"parameterValueId\": \"{{vatParameterValueId}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-A}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-A}}"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - Split",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-B\", pm.response.json().invoiceLines[1].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-B\", pm.response.json().invoiceLines[1].accountTypeParameterId);\r",
											"}\r",
											"//console.log( pm.environment.get(\"cInvoiceLineId-1\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-C\", pm.response.json().invoiceLines[2].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-C\", pm.response.json().invoiceLines[2].accountTypeParameterId);\r",
											"}\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-D\", pm.response.json().invoiceLines[3].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-D\", pm.response.json().invoiceLines[3].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"var lineNumber = pm.collectionVariables.get(\"lineNumber\")\r",
											"\r",
											"console.log(\"lineNumber is : \" + lineNumber);\r",
											"\r",
											"  var jsonData = pm.response.json();\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line_1 number is correct.\", function () {\r",
											"        pm.expect(jsonData.invoiceLines[0]).to.have.property(\"lineNumber\", lineNumber);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line_1.1 number is correct.\", function () {\r",
											"        pm.expect(jsonData.invoiceLines[1]).to.have.property(\"lineNumber\", lineNumber + 1);\r",
											"    });\r",
											"}\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line_1.2 number is correct.\", function () {\r",
											"        pm.expect(jsonData.invoiceLines[2]).to.have.property(\"lineNumber\", lineNumber + 2);\r",
											"    });\r",
											"    if (pm.response.code == 200) {\r",
											"\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line_1.3 number is correct.\", function () {\r",
											"        pm.expect(jsonData.invoiceLines[3]).to.have.property(\"lineNumber\", lineNumber + 3);\r",
											"    });\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"console.log(\"Line is split.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var lineNumber = pm.variables.get('lineNumber');",
											"",
											"// pm.variables.set(\"lineNumber\", parseInt(lineNumber));",
											"",
											"// console.log(pm.variables.get(lineNumber));",
											"",
											"//var lineNumber = pm.collectionVariables.get(\"lineNumber\")",
											"",
											"//console.log(\"lineNumber is : \" + lineNumber);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-A}}/split/?rowCount=3",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-A}}",
										"split",
										""
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										},
										{
											"key": "rowCount",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeSplit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.environment.get('cMasterLineId'));\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"for (x in jsonData) {\r",
											"    if (jsonData[x].parentInvoiceLineId = pm.environment.get('cMasterLineId')) {\r",
											"        var groups =jsonData[x].parentInvoiceLineId\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Groups Found\", function () {\r",
											"    pm.expect(pm.environment.get('cMasterLineId')).to.eql(groups);\r",
											"});\r",
											"console.log(\"Groups is : \" + groups + \".\");\r",
											"\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"\r",
											"    ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 312.5);\r",
											"    });\r",
											"}\r",
											"    if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[1];\r",
											"\r",
											"\r",
											"    ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 83.33);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 104.17);\r",
											"    });\r",
											"    }\r",
											"\r",
											"    if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[2];\r",
											"\r",
											"\r",
											"    ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 83.33);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 104.17);\r",
											"    });\r",
											"    }\r",
											"\r",
											"    if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[3];\r",
											"\r",
											"\r",
											"    ///////// Check periods applied /////////\r",
											"   pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 83.34);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 104.16);\r",
											"    });\r",
											"    }\r",
											"\r",
											"\r",
											"//console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-E\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-E\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"var lineNumber=pm.collectionVariables.get(\"lineNumber\");\r",
											"console.log(\"lineNumber is : \" + lineNumber);\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											" pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct:\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"lineNumber\", lineNumber + 4);\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"console.log(\"Line is copied.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-A}}/copy",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-A}}",
										"copy"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 201) {\r",
											"    pm.environment.set(\"cMasterLineId\", pm.response.json().invoiceLines[0].parentInvoiceLineId);\r",
											"}\r",
											"\r",
											"console.log(\"Lines \" + pm.environment.get(\"cInvoiceLineId-B\") + \", \" + pm.environment.get(\"cInvoiceLineId-C\") + \", \" + pm.environment.get(\"cInvoiceLineId-D\") + \" are grouped under \" + pm.environment.get(\"cMasterLineId\") + \".\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"masterLineSourceLineId\":\n\n        \"{{cInvoiceLineId-A}}\",\n\n        \"invoiceLineIds\":\n        [\n            \"{{cInvoiceLineId-E}}\"\n         ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/groups",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Sleep 5 sec---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(7);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.environment.get('cMasterLineId'));\r",
											"\r",
											"var jsonData = pm.response.json().invoiceLines;\r",
											"\r",
											"for (x in jsonData) {\r",
											"    if (jsonData[x].parentInvoiceLineId = pm.environment.get('cMasterLineId')) {\r",
											"        var groups =jsonData[x].parentInvoiceLineId\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Groups Found\", function () {\r",
											"    pm.expect(pm.environment.get('cMasterLineId')).to.eql(groups);\r",
											"});\r",
											"\r",
											"console.log(\"Groups is : \" + groups + \".\");\r",
											"\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    for (x in jsonData) {\r",
											"    if (jsonData[x].numberOfChildGroupedLines = 2) {\r",
											"        var jsonDataAL =jsonData[x];\r",
											"    }\r",
											"    }\r",
											"   ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period is found\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonDataAL).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonDataAL).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonDataAL).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonDataAL).to.have.property(\"netAmount\", 500);\r",
											"        pm.expect(jsonDataAL).to.have.property(\"totalAmount\", 625);\r",
											"    });\r",
											"    \r",
											"}\r",
											"\r",
											"//console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -UnGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"console.log(\"Group \" + pm.environment.get(\"cMasterLineId\") + \" is dvided.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/groups/?masterInvoiceLineIds={{cMasterLineId}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"groups",
										""
									],
									"query": [
										{
											"key": "masterInvoiceLineIds",
											"value": "{{cMasterLineId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"parameterIdLedger\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5.\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"\r",
											"    ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 21);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 250);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 312.5);\r",
											"    });\r",
											"}\r",
											"\r",
											"console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putAccountLine-B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\" ,\r\n    \"quantity\": 2,\r\n    \"unitPrice\": 2,\r\n    \"netAmount\": 2,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-B}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-B}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putAccountLine-C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 2,\r\n    \"unitPrice\": 2,\r\n    \"netAmount\": 2,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        }\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-C}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-C}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putAccountLine-D",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"console.log(jsonDataAL);",
											"",
											"    var jsonDataAL_1, jsonDataAL_2;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"cAccountingCode-B\")) {",
											"            var jsonDataAL_1 =jsonDataAL[i];",
											"        pm.environment.set(\"accountCode\", jsonDataAL_1.code);",
											"        pm.environment.set(\"accountDescription\", jsonDataAL_1.description);",
											"    }",
											"    }",
											"}",
											"    console.log(\"AccountDescription is: \" +pm.environment.get(\"accountDescription\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 2,\r\n    \"unitPrice\": 2,\r\n    \"netAmount\": 2,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        }\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putAccountLine-E",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"console.log(jsonDataAL);",
											"",
											"    var jsonDataAL_1, jsonDataAL_2;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"cAccountingCode-B\")) {",
											"            var jsonDataAL_1 =jsonDataAL[i];",
											"        pm.environment.set(\"accountCode\", jsonDataAL_1.code);",
											"        pm.environment.set(\"accountDescription\", jsonDataAL_1.description);",
											"    }",
											"    }",
											"}",
											"    console.log(\"AccountDescription is: \" +pm.environment.get(\"accountDescription\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 2,\r\n    \"unitPrice\": 2,\r\n    \"netAmount\": 2,\r\n    \"vatRate\": 15,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-01-24T09:54:33.048Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-UBL-20210108-1511024\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        }\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-E}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-E}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -postLineComment-B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId-B\")) {",
											"            var jsonDataAL=jsonData;",
											"        pm.environment.set(\"commentId_B\", jsonDataAL.commentId);",
											"        pm.environment.set(\"comment_B\", jsonDataAL.comment);",
											"    }",
											"    }",
											"    console.log(\"CommentId_B is: \" +pm.environment.get(\"commentId_B\"));",
											"    console.log(\"Comment_B is: \" +pm.environment.get(\"comment_B\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"@Test Integration﻿ It is for line-B.\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationId}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-B}}/comments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-B}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -postLineComment-C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId-C\")) {",
											"            var jsonDataAL=jsonData;",
											"        pm.environment.set(\"commentId_C\", jsonDataAL.commentId);",
											"        pm.environment.set(\"comment_C\", jsonDataAL.comment);",
											"    }",
											"    }",
											"    console.log(\"CommentId_C is: \" +pm.environment.get(\"commentId_C\"));",
											"    console.log(\"Comment_C is: \" +pm.environment.get(\"comment_C\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"@Test Integration﻿ It is for line-C.\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationId}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-C}}/comments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-C}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -postLineComment-D",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId-D\")) {",
											"            var jsonDataAL=jsonData;",
											"        pm.environment.set(\"commentId_D\", jsonDataAL.commentId);",
											"        pm.environment.set(\"comment_D\", jsonDataAL.comment);",
											"    }",
											"    }",
											"    console.log(\"CommentId_D is: \" +pm.environment.get(\"commentId_D\"));",
											"    console.log(\"Comment_D is: \" +pm.environment.get(\"comment_D\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"@Test Integration﻿ It is for line-D.\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationId}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}/comments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -postLineComment-E",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
											"//     console.log(response.json());",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (pm.response.code == 200) {",
											"const jsonData = pm.response.json();",
											"console.log(jsonData);",
											"",
											"        if (jsonData.invoiceLineId == pm.environment.get(\"cInvoiceLineId-E\")) {",
											"            var jsonDataAL=jsonData;",
											"        pm.environment.set(\"commentId_E\", jsonDataAL.commentId);",
											"        pm.environment.set(\"comment_E\", jsonDataAL.comment);",
											"    }",
											"    }",
											"    console.log(\"CommentId_E is: \" +pm.environment.get(\"commentId_E\"));",
											"    console.log(\"Comment_E is: \" +pm.environment.get(\"comment_E\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"@Test Integration﻿ It is for line-E.\",\r\n    \"taggedUserIds\": \r\n    [\r\n                    \"{{testIntegrationId}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-E}}/comments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-E}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLinesComments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"const jsonData= pm.response.json();\r",
											"  // console.log(jsonDataAL);\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId-B\") &&jsonData[i].commentId==pm.environment.get(\"commentId_B\")) {\r",
											"            var jsonDataAL =jsonData[i];\r",
											"\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment_B is found.\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@Test Integration﻿ It is for line-B.\");\r",
											"});   \r",
											"}\r",
											"}\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId-C\") &&jsonData[i].commentId==pm.environment.get(\"commentId_C\")) {\r",
											"            var jsonDataAL =jsonData[i];\r",
											"\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment_C is found.\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@Test Integration﻿ It is for line-C.\");\r",
											"});   \r",
											"}\r",
											"}\r",
											"  \r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId-D\") &&jsonData[i].commentId==pm.environment.get(\"commentId_D\")) {\r",
											"            var jsonDataAL =jsonData[i];\r",
											"\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment_D is found.\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@Test Integration﻿ It is for line-D.\");\r",
											"});   \r",
											"}\r",
											"}\r",
											" \r",
											"    for (i in jsonData) {\r",
											"        if (jsonData[i].invoiceLineId ==pm.environment.get(\"cInvoiceLineId-E\") &&jsonData[i].commentId==pm.environment.get(\"commentId_E\")) {\r",
											"            var jsonDataAL =jsonData[i];\r",
											"\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Comment_E is found.\", function () {\r",
											"        pm.expect(jsonDataAL).to.have.property(\"comment\", \"@Test Integration﻿ It is for line-E.\");\r",
											"});   \r",
											"}\r",
											"}\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/comments",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;\r",
											"  // console.log(jsonDataAL);\r",
											"\r",
											"    var jsonDataAL1;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"cAccountingCode-B\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"accountDescription\"));\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"accountCode\"));\r",
											"});\r",
											"}\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -GenerateWithoutInterim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" -Trying to generete without Interim : 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 409) {\r",
											"\r",
											"const jsonDataAL = pm.response.json().errors;\r",
											"   //console.log(jsonDataAL);\r",
											"\r",
											"    var jsonDataAL1;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].fieldName == \"INTERIM\") {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.environment.set(\"message\", jsonDataAL1.message);\r",
											"    }\r",
											"    }\r",
											"    }\r",
											"    console.log(\"The message is: \" + pm.environment.get(\"message\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/accountinglines/generate?documentType=CostInvoice",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"accountinglines",
										"generate"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										},
										{
											"key": "documentType",
											"value": "CostInvoice"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - seeGenerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonData = pm.response.json().lineItemAmount;",
											"   //console.log(jsonDataAL);",
											"    var i;",
											"",
											"    for (i in jsonData) {",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is not genereted.\", function () {",
											"        pm.expect(jsonData).to.not.have.property(\"remainingTotalAmount\", 0.00);",
											"         pm.expect(jsonData).to.not.have.property(\"remainingNetAmount\", 0.00);",
											"});",
											"}",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"headers"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putInterimLine-B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");",
											"",
											"// pm.environment.set(\"parameterValueId\", \"9276bcb4-3584-47ac-a010-54591ddddd40\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"It is for to make Lines.\",\n    \"quantity\": 1,\n    \"unitPrice\": 100,\n    \"netAmount\": 100,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 20,\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{interimParameterId}}\",\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-B}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-B}}"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putInterimLine-C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"It is for to make Lines.\",\n    \"quantity\": 1,\n    \"unitPrice\": 100,\n    \"netAmount\": 100,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 20,\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{interimParameterId}}\",\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-C}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-C}}"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putInterimLine-D",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"   //console.log(jsonDataAL);",
											"",
											"    var jsonDataAL1;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Interim\" && jsonDataAL[i].code == pm.environment.get(\"Interim-3\")) {",
											"            var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"interimCode\", jsonDataAL1.code);",
											"        pm.environment.set(\"interimDescription\", jsonDataAL1.description);",
											"         pm.environment.set(\"interimParameterTypeCode\", jsonDataAL1.parameterTypeCode);",
											"    }",
											"    }",
											"    }",
											"    console.log(\"InterimDescription: \" + pm.environment.get(\"interimDescription\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.environment.set(\"parameterId\", \"5ac449c7-393c-4f69-8e7d-0cb664551bc9\");",
											"",
											"// pm.environment.set(\"parameterValueId\", \"9276bcb4-3584-47ac-a010-54591ddddd40\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"It is for to make Lines.\",\n    \"quantity\": 1,\n    \"unitPrice\": 100,\n    \"netAmount\": 100,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 20,\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{interimParameterId}}\",\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putInterimLine-E",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"   //console.log(jsonDataAL);",
											"",
											"    var jsonDataAL1;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Interim\" && jsonDataAL[i].code == pm.environment.get(\"Interim-3\")) {",
											"            var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"interimCode\", jsonDataAL1.code);",
											"        pm.environment.set(\"interimDescription\", jsonDataAL1.description);",
											"         pm.environment.set(\"interimParameterTypeCode\", jsonDataAL1.parameterTypeCode);",
											"    }",
											"    }",
											"    }",
											"    console.log(\"InterimDescription: \" + pm.environment.get(\"interimDescription\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"It is for to make Lines.\",\n    \"quantity\": 1,\n    \"unitPrice\": 50,\n    \"netAmount\": 50,\n    \"vatRate\": 25,\n    \"discount\": 0,\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\n    \"startPeriodMonth\": 11,\n    \"startPeriodYear\": 20,\n    \"totalPeriod\": 3,\n    \"gtin\": \"GTIN-\",\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\n    \"accountingParameters\": [\n        {\n            \"parameterId\": \"{{parameterIdLedger}}\",\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\n        },\n        {\n            \"parameterId\": \"{{interimParameterId}}\",\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-E}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-E}}"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - AddLIne_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-F\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-F\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"lineNumber\", pm.collectionVariables.get(\"lineNumber\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 50);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 50);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 62.5);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"var jsonData = pm.response.json().invoiceLines;\r",
											"   console.log(jsonData);\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].invoiceId=pm.environment.get(\"cInvoiceIdForLine\")) {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"quantity\", jsonDataAL.quantity);\r",
											"    pm.environment.set(\"unitPrice\", jsonDataAL.unitPrice);\r",
											"    pm.environment.set(\"netAmount\", jsonDataAL.netAmount);\r",
											"    pm.environment.set(\"totalAmount\", jsonDataAL.totalAmount); \r",
											"    }\r",
											"    }\r",
											"    }\r",
											"    // console.log(\"quantity is : \" + pm.environment.get(\"quantity\"));\r",
											"    // console.log(\"unitPrice is : \" + pm.environment.get(\"unitPrice\"));\r",
											"    // console.log(\"netAmount is : \" + pm.environment.get(\"netAmount\"));\r",
											"    // console.log(\"totalAmount is : \" + pm.environment.get(\"totalAmount\"));\r",
											"\r",
											"console.log(\"Line_F\" + pm.collectionVariables.get(\"lineNumber\") + \" is creted.\");\r",
											"console.log(\"cAccountTypeParameterId-A is : \" + pm.environment.get(\"cAccountTypeParameterId-A\"));\r",
											"console.log(\"cInvoiceLineId-A is : \" + pm.environment.get(\"cInvoiceLineId-A\"));\r",
											"\r",
											"//==========//For create Lopp//==================\r",
											"// var currentCount = pm.environment.get(\"count\")\r",
											"// if (currentCount > 0){\r",
											"//  currentCount = currentCount -1 ;\r",
											"//  pm.environment.set(\"count\", currentCount);\r",
											"//     postman.setNextRequest(pm.info.requestId);\r",
											"// } else {\r",
											"//     postman.setNextRequest();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLineForAmount_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"parameterIdLedger\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5.\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", pm.environment.get(\"quantity\"));\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", pm.environment.get(\"unitPrice\"));\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", pm.environment.get(\"netAmount\"));\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", pm.environment.get(\"totalAmount\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-F}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-F}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putDimension-B",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"console.log(pm.environment.get(\"dimensionParameterId\"));",
											"console.log(pm.environment.get(\"dimensionParameterValueId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 100,\r\n    \"netAmount\": 100,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{interimParameterId}}\",\r\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{dimensionParameterId}}\",\r\n            \"parameterValueId\": \"{{dimensionParameterValueId}}\"\r\n        }\r\n    ]\r\n}\r\n\r\n// {\r\n//     \"text\": \"It is for to make Lines.\",\r\n//     \"quantity\": 1,\r\n//     \"unitPrice\": 100,\r\n//     \"netAmount\": 100,\r\n//     \"vatRate\": 25,\r\n//     \"discount\": 0,\r\n//     \"issueDate\": \"2021-02-19T14:38:52.287Z\",\r\n//     \"startPeriodMonth\": 11,\r\n//     \"startPeriodYear\": 20,\r\n//     \"totalPeriod\": 3,\r\n//     \"gtin\": \"GTIN-\",\r\n//     \"accountTypeParameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n//     \"accountingParameters\": [\r\n//         {\r\n//             \"parameterId\": \"619fbbed-79ef-4f29-855c-d170cc20d1b4\",\r\n//             \"parameterValueId\": \"7f40deed-2ea2-4d67-9f3d-d0b721bdc03e\"\r\n//         },\r\n//         {\r\n//             \"parameterId\": \"9f8daf42-49e1-4d33-8648-8992a6ee6c78\",\r\n//             \"parameterValueId\": \"e9c31ad7-8bfb-4b60-be2b-748f65c6043a\"\r\n//         },\r\n//         {\r\n//             \"parameterId\": \"696fa82c-e503-4d4e-977a-12c0f9418a96\",\r\n//             \"parameterValueId\": \"4487f149-efd8-4271-84ac-c954675f6c4a\"\r\n//         }\r\n//     ]\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-B}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-B}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putDimension-C",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 100,\r\n    \"netAmount\": 100,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{interimParameterId}}\",\r\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{dimensionParameterId}}\",\r\n            \"parameterValueId\": \"{{dimensionParameterValueId}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-C}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-C}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putDimension-D",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"   //console.log(jsonDataAL);",
											"",
											"    var jsonDataAL1;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"cDimensionCodeValue-A\")) {",
											"            var jsonDataAL1 =jsonDataAL[i];",
											"        pm.environment.set(\"dimensionCode\", jsonDataAL1.code);",
											"        pm.environment.set(\"dimensionDescription\", jsonDataAL1.description);",
											"    }",
											"    }",
											"    }",
											"    console.log(\"dimensionDescription: \" + pm.environment.get(\"dimensionDescription\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 100,\r\n    \"netAmount\": 100,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{interimParameterId}}\",\r\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{dimensionParameterId}}\",\r\n            \"parameterValueId\": \"{{dimensionParameterValueId}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -putDimension-E",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;",
											"   //console.log(jsonDataAL);",
											"",
											"    var jsonDataAL1;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"cDimensionCodeValue-A\")) {",
											"            var jsonDataAL1 =jsonDataAL[i];",
											"       pm.environment.set(\"dimensionCode\", jsonDataAL1.code);",
											"        pm.environment.set(\"dimensionDescription\", jsonDataAL1.description);",
											"    }",
											"    }",
											"    }",
											"    console.log(\"dimensionDescription: \" + pm.environment.get(\"dimensionDescription\"));",
											"    console.log(\"dimensionCode: \" + pm.environment.get(\"dimensionCode\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It is for to make Lines.\",\r\n    \"quantity\": 1,\r\n    \"unitPrice\": 100,\r\n    \"netAmount\": 100,\r\n    \"vatRate\": 25,\r\n    \"discount\": 0,\r\n    \"issueDate\": \"2021-02-19T14:38:52.287Z\",\r\n    \"startPeriodMonth\": 11,\r\n    \"startPeriodYear\": 20,\r\n    \"totalPeriod\": 3,\r\n    \"gtin\": \"GTIN-\",\r\n    \"accountTypeParameterId\": \"{{parameterIdLedger}}\",\r\n    \"accountingParameters\": [\r\n        {\r\n            \"parameterId\": \"{{parameterIdLedger}}\",\r\n            \"parameterValueId\": \"{{parameterValueIdLedger}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{interimParameterId}}\",\r\n            \"parameterValueId\": \"{{interimParameterValueId}}\"\r\n        },\r\n        {\r\n            \"parameterId\": \"{{dimensionParameterId}}\",\r\n            \"parameterValueId\": \"{{dimensionParameterValueId}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-E}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-E}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -checkAccountDimensionAndInterim",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonDataAL = pm.response.json().invoiceLines[0].accountingParameters;\r",
											"  // console.log(jsonDataAL);\r",
											"\r",
											"    var jsonDataAL1;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].parameterTypeCode == \"Ledger\" && jsonDataAL[i].code == pm.environment.get(\"cAccountingCode-B\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Account is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"accountCode\"));\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"accountDescription\"));\r",
											"});\r",
											"}\r",
											"}\r",
											"    for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].parameterTypeCode == \"Interim\" && jsonDataAL[i].code == pm.environment.get(\"Interim-3\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Interim is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"interimCode\"));\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"interimDescription\"));\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"parameterTypeCode\", pm.environment.get(\"interimParameterTypeCode\"));\r",
											"});\r",
											"}\r",
											"}\r",
											"for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].parameterTypeCode == \"Dimension\" && jsonDataAL[i].code == pm.environment.get(\"cDimensionCodeValue-A\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Dimension is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"code\", pm.environment.get(\"dimensionCode\"));\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"description\", pm.environment.get(\"dimensionDescription\"));\r",
											"});\r",
											"}\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - AddLIne_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-G\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-G\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"lineNumber\", pm.collectionVariables.get(\"lineNumber\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", -50);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", -50);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", -62.5);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"var jsonData = pm.response.json().invoiceLines;\r",
											"   console.log(jsonData);\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].invoiceId=pm.environment.get(\"cInvoiceIdForLine\")) {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"quantity\", jsonDataAL.quantity);\r",
											"    pm.environment.set(\"unitPrice\", jsonDataAL.unitPrice);\r",
											"    pm.environment.set(\"netAmount\", jsonDataAL.netAmount);\r",
											"    pm.environment.set(\"totalAmount\", jsonDataAL.totalAmount); \r",
											"    }\r",
											"    }\r",
											"    }\r",
											"console.log(\"Line \" + pm.collectionVariables.get(\"lineNumber\") + \" is creted.\");\r",
											"console.log(\"cAccountTypeParameterId-A is : \" + pm.environment.get(\"cAccountTypeParameterId-A\"));\r",
											"console.log(\"cInvoiceLineId-A is : \" + pm.environment.get(\"cInvoiceLineId-A\"));\r",
											"\r",
											"//==========//For create Lopp//==================\r",
											"// var currentCount = pm.environment.get(\"count\")\r",
											"// if (currentCount > 0){\r",
											"//  currentCount = currentCount -1 ;\r",
											"//  pm.environment.set(\"count\", currentCount);\r",
											"//     postman.setNextRequest(pm.info.requestId);\r",
											"// } else {\r",
											"//     postman.setNextRequest();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLineForAmount_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"parameterIdLedger\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5.\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", pm.environment.get(\"quantity\"));\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", pm.environment.get(\"unitPrice\"));\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", pm.environment.get(\"netAmount\"));\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", pm.environment.get(\"totalAmount\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-G}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-G}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - AddLIne_4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-H\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-H\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Line number is correct.\", function () {\r",
											"        pm.expect(jsonData.lineNumber).to.eql(pm.collectionVariables.get(\"lineNumber\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 0);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 0);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 0);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"var jsonData = pm.response.json().invoiceLines;\r",
											"   console.log(jsonData);\r",
											"\r",
											"    for (i in jsonData) {\r",
											"        if(jsonData[i].invoiceId=pm.environment.get(\"cInvoiceIdForLine\")) {\r",
											"           var jsonDataAL= jsonData[i];\r",
											"    pm.environment.set(\"quantity\", jsonDataAL.quantity);\r",
											"    pm.environment.set(\"unitPrice\", jsonDataAL.unitPrice);\r",
											"    pm.environment.set(\"netAmount\", jsonDataAL.netAmount);\r",
											"    pm.environment.set(\"totalAmount\", jsonDataAL.totalAmount); \r",
											"    }\r",
											"    }\r",
											"    }\r",
											"console.log(\"Line \" + pm.collectionVariables.get(\"lineNumber\") + \" is creted.\");\r",
											"console.log(\"cAccountTypeParameterId-A is : \" + pm.environment.get(\"cAccountTypeParameterId-A\"));\r",
											"console.log(\"cInvoiceLineId-A is : \" + pm.environment.get(\"cInvoiceLineId-A\"));\r",
											"\r",
											"//==========//For create Lopp//==================\r",
											"// var currentCount = pm.environment.get(\"count\")\r",
											"// if (currentCount > 0){\r",
											"//  currentCount = currentCount -1 ;\r",
											"//  pm.environment.set(\"count\", currentCount);\r",
											"//     postman.setNextRequest(pm.info.requestId);\r",
											"// } else {\r",
											"//     postman.setNextRequest();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeLineForAmount_4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"parameterIdLedger\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=250, netAmount=250, totalAmount=312.5.\");\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", pm.environment.get(\"quantity\"));\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", pm.environment.get(\"unitPrice\"));\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", pm.environment.get(\"netAmount\"));\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", pm.environment.get(\"totalAmount\"));\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"console.log(pm.response.json());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-H}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-H}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -Generate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"const jsonDataAL = pm.response.json().accountingLines;\r",
											"   //console.log(jsonDataAL);\r",
											"\r",
											"    var jsonDataAL1;\r",
											"\r",
											"    var i;\r",
											"\r",
											"    for (i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"        pm.environment.set(\"accountingLinesId\", jsonDataAL1.id);\r",
											"    }\r",
											"    }\r",
											"    }\r",
											"    console.log(\"AccountingLinesId is: \" + pm.environment.get(\"accountingLinesId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/accountinglines/generate?documentType=CostInvoice",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"accountinglines",
										"generate"
									],
									"query": [
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										},
										{
											"key": "documentType",
											"value": "CostInvoice"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Sleep 5 sec---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(7);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - seeGenerate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code == 200) {",
											"",
											"const jsonDataAL = pm.response.json().accountingLines;",
											"   //console.log(jsonDataAL);",
											"",
											"    var jsonDataAL1;",
											"",
											"    var i;",
											"",
											"    for (i in jsonDataAL) {",
											"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {",
											"            var jsonDataAL1 =jsonDataAL[i];",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is genereted.\", function () {",
											"        pm.expect(jsonDataAL1).to.have.property(\"id\", pm.environment.get(\"accountingLinesId\"));",
											"});",
											"}",
											"}",
											"}",
											"    console.log(\"AccountingLinesId is: \" + pm.environment.get(\"accountingLinesId\"));",
											"",
											"var jsonData = pm.response.json();",
											"if (pm.response.code == 200) {",
											"    const jsonDataAL = pm.response.json().accountingLines;",
											"    var headerFound = false",
											"    for (var i in jsonDataAL) {",
											"        if (jsonDataAL[i].lineItemType == \"HeaderLine\") {",
											"            headerFound = true;",
											"            break;",
											"        }",
											"    }",
											"    console.log(headerFound)",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : It is genereted.\", function () {",
											"        pm.expect(jsonDataAL).to.have.property(\"id\", pm.environment.get(\"accountingLinesId\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/accountinglines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"accountinglines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -seeChanging",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.environment.set(\"cInvoiceLineId-D\", pm.response.json().invoiceLines[0].invoiceLineId);\r",
											"    pm.environment.set(\"cAccountTypeParameterId-D\", pm.response.json().invoiceLines[0].accountTypeParameterId);\r",
											"}\r",
											"\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    var jsonData = pm.response.json().invoiceLines[0];\r",
											"    \r",
											"    ///////// Check periods applied /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Period was found\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodMonth\", 11);\r",
											"        pm.expect(jsonData).to.have.property(\"totalPeriod\", 3);\r",
											"        pm.expect(jsonData).to.have.property(\"startPeriodYear\", 20);\r",
											"    });\r",
											"\r",
											"    ////////// Amounts are correct /////////\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Amounts og text are correct\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"quantity\", 1);\r",
											"        pm.expect(jsonData).to.have.property(\"unitPrice\", 100);\r",
											"        pm.expect(jsonData).to.have.property(\"netAmount\", 100);\r",
											"        pm.expect(jsonData).to.have.property(\"totalAmount\", 125);\r",
											"        pm.expect(jsonData).to.have.property(\"text\", \"It is for to make Lines.\");\r",
											"    });\r",
											"\r",
											"}\r",
											"console.log(\"Espected datas are : quantity =1, unitPrice=100, netAmount=100, totalAmount=125.\");\r",
											"\r",
											"//Using lineNUmber for multiple runnig.\r",
											"pm.collectionVariables.set(\"lineNumber\", pm.response.json().invoiceLines[0].lineNumber);\r",
											"\r",
											"console.log(\"lineNumber is : \" + pm.collectionVariables.get(\"lineNumber\"));\r",
											"\r",
											"console.log(pm.response.json());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/{{cInvoiceLineId-D}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"{{cInvoiceLineId-D}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 - XLS_Exporter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : XLSX received\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"PK\u0003\u0004\u0014\u0000\u0000\"); // Start of file\r",
											"        pm.expect(pm.response.text()).to.include(\"\u0000\u0000\u0000\u0000\"); // End of file\r",
											"        pm.expect(pm.response.size().header).to.be.greaterThan(100);\r",
											"        pm.expect(pm.response.size().body).to.be.greaterThan(1000);\r",
											"    });\r",
											"}\r",
											"\r",
											"console.log(\"Invoice is exported.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"invoiceIds\": [\n        \"{{cInvoiceIdForLine}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/export/invoicelines?sort=%5B%5D&filter=%5B%5D",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"export",
										"invoicelines"
									],
									"query": [
										{
											"key": "sort",
											"value": "%5B%5D"
										},
										{
											"key": "take",
											"value": "15",
											"disabled": true
										},
										{
											"key": "query",
											"value": "{{cAccountingCode-A}}",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "%5B%5D"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "--- Skip to END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log('--- Skipping to END ---');\r",
											"postman.setNextRequest(\"--- END ---\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -deleteLine-A-H",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(\"Lines \" + pm.environment.get(\"cInvoiceLineId-B\") + \", \" + pm.environment.get(\"cInvoiceLineId-C\") + \", \" + pm.environment.get(\"cInvoiceLineId-D\") + \" are deleted.\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"invoiceLineIds\":\n[   \n    \"{{cInvoiceLineId-A}}\",\n    \"{{cInvoiceLineId-B}}\",\n    \"{{cInvoiceLineId-C}}\",\n    \"{{cInvoiceLineId-D}}\",\n    \"{{cInvoiceLineId-E}}\",\n    \"{{cInvoiceLineId-F}}\",\n    \"{{cInvoiceLineId-G}}\",\n    \"{{cInvoiceLineId-H}}\"\n    ]\n    }\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines/deletelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines",
										"deletelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoiceLines/ID 1 -checkDelete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Lines are  deleted.\", function () {\r",
											"        pm.expect(jsonData).to.have.property(\"invoiceLines\", []);\r",
											"});\r",
											"\r",
											"console.log(\"Lines \" + \r",
											"pm.environment.get(\"cInvoiceLineId-A\") + \", \" +\r",
											"pm.environment.get(\"cInvoiceLineId-B\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-C\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-D\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-E\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-F\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-G\") + \", \" + \r",
											"pm.environment.get(\"cInvoiceLineId-H\") + \" are deleted.\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// //Run to and with ..... line\r",
											"// var lineNumber = pm.collectionVariables.get(\"lineNumber\")\r",
											"// if (lineNumber <3900){\r",
											"//      postman.setNextRequest(pm.environment.get(\"firstRequest\"));\r",
											"// } else {\r",
											"//     postman.setNextRequest();\r",
											"// }\r",
											"\r",
											"//pm.collectionVariables.unset(\"lineNumber\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId}}/invoices/{{cInvoiceIdForLine}}/invoicelines",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId}}",
										"invoices",
										"{{cInvoiceIdForLine}}",
										"invoicelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "--- END ---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log('/// END ///');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenINT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "95e13602-a431-4d83-91dc-47ca844faf82",
			"key": "lineNumber",
			"value": ""
		}
	]
}