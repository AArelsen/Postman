{
	"info": {
		"_postman_id": "a8f0e109-3ee2-485c-bb53-f1c2c5f51372",
		"name": "E2E-Invoice-FindInvoiceWithClientAndAssigned",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AllInvoices",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "IDP /connect/token INT - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"    //   console.log(pm.environment.get(\"TokenINT\"));\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        // pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        \r",
											"        pm.environment.set(\"TokenINT\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        // console.log(pm.environment.get(\"TokenINT\"));\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"pm.environment.set(\"tryCounterLimit\", 10)\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeIntegration}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserIntegration}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassIntegration}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "IDP /connect/token PWA - Try Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Init try\r",
											"var tryCounter = pm.globals.get(\"tryCounter\");\r",
											"// console.log(pm.response.json());\r",
											"\r",
											"if (pm.response.code == 200 && pm.globals.get(\"tryCounter\") < pm.environment.get(\"tryCounterLimit\")) {\r",
											"\r",
											"    // If we get a token, pass test and go directly to target\r",
											"\r",
											"    if (pm.response.json().access_token != null) {\r",
											"\r",
											"        //pm.environment.set(\"Token\", pm.response.json().access_token);\r",
											"        pm.environment.set(\"TokenPWA\", pm.response.json().access_token);\r",
											"        pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () { pm.response.to.have.status(200); });\r",
											"        console.log(\"tryCounter init \" + tryCounter);\r",
											"        postman.setNextRequest();\r",
											"        return;\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(5);      "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"tryCounter\", 0);\r",
											"\r",
											"\r",
											"pm.globals.set(\"retries\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"user-agent": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{Oauth2ClientSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{Oauth2ClientId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{ScopeController}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{UserController}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{PassController}}",
											"type": "text"
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{IDP}}/connect/token",
									"host": [
										"{{IDP}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "INT - Supplier ClientAcl_1",
					"item": [
						{
							"name": "INT /suppliers FA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cSupplierCode-ACL_1', 'ACL_1-' + moment().format(\"YYMM\"));\r",
											"pm.environment.set('cSupplierVATId-ACL_1', 'ACL_1-' + moment().format(\"YYMM\"));\r",
											"\r",
											"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
											"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-ACL_1}}\",\n            \"city\": \"city-{{cSupplierCode-ACL_1}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-ACL_1}}\",\n            \"phone\": \"phone-{{cSupplierCode-ACL_1}}\",\n            \"email\": \"email-{{cSupplierCode-ACL_1}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-ACL_1}}\",\n        \"name\": \"FixedAsset-{{cSupplierCode-ACL_1}}\",\n        \"organizationNumber\": \"{{cSupplierCode-ACL_1}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-ACL_1}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-ACL_1}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-ACL_1}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-ACL_1}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-ACL_1}}\"\n            }\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/suppliers",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"suppliers"
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "INT /suppliers/FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenINT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/suppliers/{{cSupplierCode-ACL_1}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"suppliers",
										"{{cSupplierCode-ACL_1}}"
									]
								},
								"description": "Gets a supplier for a given client"
							},
							"response": []
						}
					]
				},
				{
					"name": "Invoice-Client_1AndTestUser",
					"item": [
						{
							"name": "INT /invoices - Cost Minimum - Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_1}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"CAU-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// Invoice dates\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"pm.environment.set(\"cInvoiceDate\", moment());\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"pm.environment.set(\"dateStart\", \"11.11.2020\");\r",
											"pm.environment.set(\"dateEnd\", \"12.02.2021\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"\r",
											"console.log(\"invoiceCountLimit is: \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"console.log(\"cInvoiceId is  : \" + pm.environment.get(\"cInvoiceId\"));\r",
											"\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 125,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 100,\r\n        \"ReportingAmount\": 125,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"FixedAsset-{{cSupplierCode-ACL_1}}\",\r\n        \"Code\": \"{{cSupplierCode-ACL_1}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-A}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-ACL_1}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"ACL-SP-{{cSupplierCode-ACL_1}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-ACL_1}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{cInvoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "--- Sleep 5 sec---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(7);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"if (retries < 15) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries);\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - seeInvoiceSublier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200, 404, 503) {\r",
											"     pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
											"    pm.environment.set(\"sublierId\", pm.response.json().seller.id);\r",
											"     pm.environment.set(\"sublierName\", pm.response.json().seller.name);\r",
											"}\r",
											"console.log(\"SublierId is: \" + pm.environment.get(\"sublierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \" SublierName is: \" +  pm.environment.get(\"sublierName\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "INT /invoices - seeInvoiceAndCheckInvoiceSublier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and sublier are found. \", function () {",
											"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
											"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", pm.environment.get(\"sublierName\"));",
											"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Api\");",
											"        ",
											"    });",
											"     ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_1}}/invoices/{{cInvoiceId}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_1}}",
										"invoices",
										"{{cInvoiceId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						}
					]
				},
				{
					"name": "INT - Supplier ClientAcl_2",
					"item": [
						{
							"name": "INT /suppliers FA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.environment.set('cSupplierCode-ACL_2', 'ACL_2-' + moment().format(\"YYMM\"));\r",
											"pm.environment.set('cSupplierVATId-ACL_2', 'ACL_2-' + moment().format(\"YYMM\"));\r",
											"\r",
											"// pm.environment.set('cSupplierCode-A',  \"123456785\");\r",
											"// pm.environment.set('cSupplierVATId-A',  \"123456785\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method +  \" \" + pm.info.requestName +\" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"address\": {\n            \"country\": \"NO\",\n            \"street\": \"street-{{cSupplierCode-ACL_2}}\",\n            \"city\": \"city-{{cSupplierCode-ACL_2}}\",\n            \"zipcode\": \"zipcode-{{cSupplierCode-ACL_2}}\",\n            \"phone\": \"phone-{{cSupplierCode-ACL_2}}\",\n            \"email\": \"email-{{cSupplierCode-ACL_2}}@useful.no\"\n        },\n        \"code\": \"{{cSupplierCode-ACL_2}}\",\n        \"name\": \"FixedAsset-{{cSupplierCode-ACL_2}}\",\n        \"organizationNumber\": \"{{cSupplierCode-ACL_2}}\",\n        \"status\": \"Active\",\n        \"organizationAuthorityCode\": \"organizationAuthorityCode-{{cSupplierCode-ACL_2}}\",\n        \"bankAccounts\": [\n            {\n                \"accountNumber\": \"BBAN-{{cSupplierCode-ACL_2}}\",\n                \"bankName\": \"bankName-{{cSupplierCode-ACL_2}}\",\n                \"status\": \"Active\",\n                \"ibanAccountNumber\": \"ibanAccountNumber-{{cSupplierCode-ACL_2}}\",\n                \"swiftCode\": \"swiftCode-{{cSupplierCode-ACL_2}}\"\n            }\n        ]\n    }\n]"
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/suppliers",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"suppliers"
									]
								},
								"description": "Inserts and updates a set of suppliers for a client"
							},
							"response": []
						},
						{
							"name": "INT /suppliers/FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/suppliers/{{cSupplierCode-ACL_2}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"suppliers",
										"{{cSupplierCode-ACL_2}}"
									]
								},
								"description": "Gets a supplier for a given client"
							},
							"response": []
						}
					]
				},
				{
					"name": "Invoice-Client_2AndTestUser",
					"item": [
						{
							"name": "INT /invoices - Cost Minimum - Init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"\r",
											"pm.environment.set(\"invoiceStartTime\", moment().format(\"YYYYMMDD-HHmmss\"));\r",
											"\r",
											"pm.environment.set(\"invoiceCount\", 1);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceCount\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_2}}",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						},
						{
							"name": "INT /invoices - Cost Minimum - Repeat N",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require(\"moment\");\r",
											"var invoiceCount;\r",
											"\r",
											"invoiceCount = pm.environment.get(\"invoiceCount\");\r",
											"pm.environment.set(\"invoiceNumber\", \"ACL-\" + invoiceCount + \"-\" + pm.environment.get(\"invoiceCountLimit\") + \"--\" + pm.environment.get(\"invoiceStartTime\"));\r",
											"\r",
											"invoiceCount++;\r",
											"pm.environment.set(\"invoiceCount\", invoiceCount);\r",
											"\r",
											"console.log(pm.environment.get(\"invoiceNumber\"));\r",
											"\r",
											"\r",
											"// Invoice dates\r",
											"pm.environment.set(\"cIssueDate\", moment().subtract(10, 'days'));\r",
											"pm.environment.set(\"cInvoiceDate\", moment());\r",
											"pm.environment.set(\"cDueDate\", moment().add(10, 'days'));\r",
											"\r",
											"pm.environment.set(\"dateStart\", \"11.11.2020\");\r",
											"pm.environment.set(\"dateEnd\", \"12.02.2021\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"cInvoiceId\", jsonData.invoiceId);\r",
											"}\r",
											"\r",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"console.log(\"invoiceCountLimit is: \" + pm.environment.get(\"invoiceCountLimit\"));\r",
											"console.log(pm.response.json());\r",
											"\r",
											"console.log(\"cInvoiceId is  : \" + pm.environment.get(\"cInvoiceId\"));\r",
											"\r",
											"\r",
											"if (pm.environment.get(\"invoiceCount\") <= pm.environment.get(\"invoiceCountLimit\")) {\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} else {\r",
											"    postman.setNextRequest(); // Just move on to the next request\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"InvoiceNumber\": \"{{invoiceNumber}}\",\r\n    \"documentType\": \"CostInvoice\",\r\n    \"invoiceType\": \"Debit\",\r\n    \"invoiceSourceType\": \"Api\",\r\n    \"InvoiceDate\": \"{{cInvoiceDate}}\",\r\n    \"invoiceCurrency\": \"NOK\",\r\n    \"customerReference\": \"customerReference\",\r\n    \"supplierReference\": \"supplierReference\",\r\n    \"purchaserName\": \"Test Controller\",\r\n    \"paymentTerms\": \"paymentTerms\",\r\n    \"buyerReference\": \"buyerReference\",\r\n    \"buyerContactPerson\": \"buyerContactPerson\",\r\n    \"buyerCode\": \"buyerCode\",\r\n    \"buyerEmail\": \"buyerEmail\",\r\n    \"project\": \"project\",\r\n    \"department\": \"department\",\r\n    \"carPlateNumber\": \"carPlateNumber\",\r\n    \"orderReference\": \"orderReference\",\r\n    \"ReInvoice\": true,\r\n    \"InvoiceAmount\": {\r\n        \"ConversionRate\": 1.0,\r\n        \"ConversionDate\": \"2020-10-19T22:00:00+00:00\",\r\n        \"TotalAmount\": 125,\r\n        \"BalanceAmount\": 0.0,\r\n        \"VatAmount\": 25,\r\n        \"AccountingLineTotalAmount\": 0.0,\r\n        \"AccountingLineRemainingTotal\": 0.0,\r\n        \"NetAmount\": 100,\r\n        \"ReportingAmount\": 125,\r\n        \"RoundingAmount\": 0.0\r\n    },\r\n    \"PaymentInformation\": {\r\n        \"DueDate\": \"{{cDueDate}}\",\r\n        \"BankAccountNumber\": \"BBAN-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"IbanAccountNumber\": null,\r\n        \"KidNumber\": \"KidNumber-{{cInvoiceNumber}}\"\r\n    },\r\n    \"SupplierParty\": {\r\n        \"Name\": \"FixedAsset-{{cSupplierCode-ACL_2}}\",\r\n        \"Code\": \"{{cSupplierCode-ACL_2}}\",\r\n        \"VatNumber\": \"{{cSupplierVATId-ACL_2}}\",\r\n        \"OrganizationNumber\": \"{{cSupplierCode-ACL_2}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Street-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"Mobile\": \"Street-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"Web\": \"Street-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"Street\": \"Street-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"Zip\": \"Zip-SP-9999\",\r\n        \"Country\": \"NO\",\r\n        \"City\": \"City\",\r\n        \"BankAccountNumber\": \"ACL-SP-{{cSupplierCode-ACL_2}}\",\r\n        \"IbanAccountNumber\": \"IBAN-SP-{{cSupplierCode-ACL_2}}\"\r\n    },\r\n    \"CustomerParty\": {\r\n        \"Name\": \"Name-CP-{{clientRegistrationNumber}}\",\r\n        \"Code\": \"Code-CP-{{clientRegistrationNumber}}\",\r\n        \"VatNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumber\": \"{{clientRegistrationNumber}}\",\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": \"Phone-CP-{{clientRegistrationNumber}}\",\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": null,\r\n        \"Zip\": null,\r\n        \"Country\": null,\r\n        \"City\": null,\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },\r\n    \"PurchaseOrderNumber\": \"-1\",\r\n    \"InvoiceLines\": [\r\n    ],\r\n    \"attachments\": [\r\n        {\r\n            \"isInvoicePdf\": true,\r\n            \"fileName\": \"{{cInvoiceNumber}}.pdf\",\r\n            \"fileData\": \"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IDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDY4NCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgNjM0IDYxMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCA2MTIgMCA1NDkgMCA2MTUgMCAwIDYzMyAyNzcgMCAwIDAgOTc0IDYzMyAwIDAgMCAwIDUyMCAzOTIgXQogICAgL1RvVW5pY29kZSA5IDAgUgo+PgplbmRvYmoKMSAwIG9iago8PCAvVHlwZSAvUGFnZXMKICAgL0tpZHMgWyAyIDAgUiBdCiAgIC9Db3VudCAxCj4+CmVuZG9iagoxMiAwIG9iago8PCAvUHJvZHVjZXIgKGNhaXJvIDEuMTYuMCAoaHR0cHM6Ly9jYWlyb2dyYXBoaWNzLm9yZykpCiAgIC9DcmVhdG9yIDxGRUZGMDA0OTAwNkUwMDZCMDA3MzAwNjMwMDYxMDA3MDAwNjUwMDIwMDAzMTAwMkUwMDMwMDAyMDAwMjgwMDY4MDA3NDAwNzQwMDcwMDA3MzAwM0EwMDJGMDAyRjAwNjkwMDZFMDA2QjAwNzMwMDYzMDA2MTAwNzAwMDY1MDAyRTAwNkYwMDcyMDA2NzAwMjk+CiAgIC9DcmVhdGlvbkRhdGUgKEQ6MjAyMDEyMDIxODQ4NDYrMDEnMDApCj4+CmVuZG9iagoxMyAwIG9iago8PCAvVHlwZSAvQ2F0YWxvZwogICAvUGFnZXMgMSAwIFIKPj4KZW5kb2JqCnhyZWYKMCAxNAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDU1OTIgMDAwMDAgbiAKMDAwMDAwMDQ1MSAwMDAwMCBuIAowMDAwMDAwMzQyIDAwMDAwIG4gCjAwMDAwMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDMyMCAwMDAwMCBuIAowMDAwMDA1MTgzIDAwMDAwIG4gCjAwMDAwMDA2ODMgMDAwMDAgbiAKMDAwMDAwNDUwMiAwMDAwMCBuIAowMDAwMDA0NTI1IDAwMDAwIG4gCjAwMDAwMDQ4ODkgMDAwMDAgbiAKMDAwMDAwNDkxMiAwMDAwMCBuIAowMDAwMDA1NjU3IDAwMDAwIG4gCjAwMDAwMDU5MzMgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSAxNAogICAvUm9vdCAxMyAwIFIKICAgL0luZm8gMTIgMCBSCj4+CnN0YXJ0eHJlZgo1OTg2CiUlRU9GCg==\"\r\n        },\r\n        {\r\n            \"isInvoicePdf\": false,\r\n            \"fileName\": \"{{cInvoiceNumber}}-2.pdf\",\r\n            \"fileData\": \"\"\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 15,\r\n            \"taxAmount\": 0.15,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"Mid\"\r\n        },\r\n        {\r\n            \"currency\": \"NOK\",\r\n            \"taxRate\": 25,\r\n            \"taxAmount\": 25,\r\n            \"taxCategory\": \"taxCategory\",\r\n            \"taxExemptionReason\": \"taxExemptionReason\",\r\n            \"taxType\": \"High\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/invoices",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"invoices"
									]
								},
								"description": "\"DeliveryParty\": {\r\n        \"Name\": \"{{name-Delivery}}\",\r\n        \"Code\": \"{{code-Delivery}}\",\r\n        \"VatNumber\": null,\r\n        \"OrganizationNumber\": null,\r\n        \"OrganizationNumberAuthority\": null,\r\n        \"Phone\": null,\r\n        \"Mobile\": null,\r\n        \"Web\": null,\r\n        \"Street\": \"{{address1-Delivery}}\",\r\n        \"Zip\": \"{{zipCode-Delivery}}\",\r\n        \"Country\": \"{{country-Delivery}}\",\r\n        \"City\": \"{{city-Delivery}}\",\r\n        \"BankAccountNumber\": null,\r\n        \"IbanAccountNumber\": null\r\n    },"
							},
							"response": []
						},
						{
							"name": "--- Sleep 5 sec---",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Wait 5 secs before the next try\r",
											"(function myLoop(i) {\r",
											"    setTimeout(function () {\r",
											"        console.log('sleep ' + i);\r",
											"        if (--i) myLoop(i);\r",
											"    }, 1000)\r",
											"})(7);  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/health",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - Poll available state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"function sleep(milisecond) {\r",
											"    var date = Date.now();\r",
											"    while ((date + milisecond) > Date.now());\r",
											"}\r",
											"\r",
											"var retries = pm.globals.get(\"retries\");\r",
											"\r",
											"if (retries < 15) { // Try every 20s for 5 minutes\r",
											"    if (pm.response.code == 200) {\r",
											"        var jsonData = pm.response.json();\r",
											"        var i = 0;\r",
											"        if (typeof jsonData == \"object\") {\r",
											"\r",
											"            if (jsonData.type == \"Invoice\" && (jsonData.status == \"InReview\" || jsonData.status == \"New\" || jsonData.status == \"Duplicate\")) {\r",
											"\r",
											"                pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Cost fields OK\", function () {\r",
											"                    pm.expect(jsonData).to.have.property(\"type\", \"Invoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"documentType\", \"CostInvoice\");\r",
											"                    pm.expect(jsonData).to.have.property(\"invoicePurchaseSummary\", null);\r",
											"                    pm.expect(jsonData).to.have.property(\"isPurchaseInvoice\", false);\r",
											"                });\r",
											"                postman.setNextRequest();\r",
											"                pm.globals.set(\"retries\", 0);\r",
											"\r",
											"                console.log(jsonData);\r",
											"\r",
											"            } else {\r",
											"                retries++;\r",
											"                pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"                postman.setNextRequest(pm.info.requestId);\r",
											"                console.log(jsonData);\r",
											"                sleep(20000); // Wait 20s and then try again\r",
											"            }\r",
											"\r",
											"        } else {\r",
											"            retries++;\r",
											"            pm.globals.set(\"retries\", retries); console.log(\"retries: \" + pm.globals.get(\"retries\"));\r",
											"            postman.setNextRequest(pm.info.requestId);\r",
											"            console.log(jsonData);\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : [ New , InReview, Duplicate ]\", function () {\r",
											"                pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"            });\r",
											"            sleep(20000); // Wait 20s and then try again\r",
											"        }\r",
											"\r",
											"    } else {\r",
											"        retries++;\r",
											"        pm.globals.set(\"retries\", retries); console.log(\"Wait 20 sec. retries: \" + pm.globals.get(\"retries\"));\r",
											"        postman.setNextRequest(pm.info.requestId);\r",
											"        console.log(pm.response.json());\r",
											"        sleep(20000); // Wait 20s and then try again\r",
											"    }\r",
											"} else {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 15 [ New , InReview, Duplicate ]\", function () {\r",
											"        pm.expect(jsonData.status).to.be.oneOf([ \"New\", \"InReview\", \"Duplicate\"]);\r",
											"    });\r",
											"    console.log(\"retries: \" + retries);\r",
											"    postman.setNextRequest(\"--- Skip to END ---\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "PWA /invoices/ID/headers - seeInvoiceSublier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200,404,503\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 503]);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200, 404, 503) {\r",
											"     pm.environment.set(\"invoiceNumber\", pm.response.json().invoiceNumber);\r",
											"    pm.environment.set(\"sublierId\", pm.response.json().seller.id);\r",
											"     pm.environment.set(\"sublierName\", pm.response.json().seller.name);\r",
											"}\r",
											"console.log(\"SublierId is: \" + pm.environment.get(\"sublierId\")+ \" InvoiceNumber is: \" + pm.environment.get(\"invoiceNumber\") + \" SublierName is: \" +  pm.environment.get(\"sublierName\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/invoices/{{cInvoiceId}}/headers",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"invoices",
										"{{cInvoiceId}}",
										"headers"
									]
								},
								"description": "Gets details for an invoice.\r\nTODO Get all details"
							},
							"response": []
						},
						{
							"name": "INT /invoices - seeInvoiceAndCheckInvoiceSublier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Invoice and sublier are found. \", function () {",
											"        pm.expect(jsonData).to.have.property(\"invoiceNumber\", pm.environment.get(\"invoiceNumber\"));",
											"        pm.expect(jsonData.supplierParty).to.have.property(\"name\", pm.environment.get(\"sublierName\"));",
											"        pm.expect(jsonData).to.have.property(\"invoiceSourceType\", \"Api\");",
											"        ",
											"    });",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{INT}}/organizations/{{organizationId}}/clients/{{datasetId_2}}/invoices/{{cInvoiceId}}",
									"host": [
										"{{INT}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients",
										"{{datasetId_2}}",
										"invoices",
										"{{cInvoiceId}}"
									]
								},
								"description": "Gets all approved invoices for a client.\r\nTODO Get header info"
							},
							"response": []
						}
					]
				},
				{
					"name": "Invoice-Select",
					"item": [
						{
							"name": "PWA /Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json().data;\r",
											"    for (x in jsonData) {\r",
											"        if (jsonData[x].name == \"0011 - ClientForAcl_1\") {\r",
											"            pm.environment.set(\"client_1\", jsonData[x].id)\r",
											"        }\r",
											"        if (jsonData[x].name == \"0012 - ClientForAcl_2\") {\r",
											"            pm.environment.set(\"client_2\", jsonData[x].id)\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(\"Client_1 is : \" +pm.environment.get(\"client_1\"));\r",
											"console.log(\"Client_2 is : \" +pm.environment.get(\"client_2\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/clients",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//////// Set Environment Variables /////////\r",
											"if (pm.response.code == 200) {\r",
											"    const jsonData = pm.response.json();\r",
											"    for(i in jsonData){\r",
											"        if (jsonData[i].name == \"Test Controller\") {\r",
											"            jsonDataAL=jsonData[i]\r",
											"            pm.environment.set(\"testController\", jsonDataAL.id)\r",
											"        }\r",
											"\r",
											"}\r",
											"}\r",
											"console.log(\"TestController is: \" + pm.environment.get(\"testController\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/users",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Invoice-Client_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonDataAL = pm.response.json().data;\r",
											"    console.log(jsonDataAL);\r",
											"\r",
											"    for (var i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].clientId == pm.environment.get(\"client_1\")) {\r",
											"            var jsonDataAL1 = jsonDataAL[i];\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : Client_1 is found.\", function () {\r",
											"                pm.expect(jsonDataAL1).to.have.property(\"clientId\", pm.environment.get(\"client_1\"));\r",
											"            });\r",
											"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=10&sort=[{\"selector\":\"clientName\",\"desc\":false}]&filter=[[[\"clientId\",\"=\",\"{{datasetId_1}}\"]],\"and\",[\"assigned.userNames\",\"contains\",\"\"]]&_=1618490831217",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "10"
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "[{\"selector\":\"clientName\",\"desc\":false}]"
										},
										{
											"key": "filter",
											"value": "[[[\"clientId\",\"=\",\"{{datasetId_1}}\"]],\"and\",[\"assigned.userNames\",\"contains\",\"\"]]"
										},
										{
											"key": "_",
											"value": "1618490831217"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Invoice-Client_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonDataAL = pm.response.json().data;\r",
											"     console.log(jsonDataAL);\r",
											"\r",
											"    for (var i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].clientId == pm.environment.get(\"client_2\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i];\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : client_2 is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"clientId\", pm.environment.get(\"client_2\"));\r",
											"        });\r",
											"\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=10&sort=[{\"selector\":\"receivedDate\",\"desc\":true},{\"selector\":\"issueDate\",\"desc\":true}]&filter=[[\"clientId\",\"=\",\"{{datasetId_2}}\"]]&_=1618492174971",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "10"
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "[{\"selector\":\"receivedDate\",\"desc\":true},{\"selector\":\"issueDate\",\"desc\":true}]"
										},
										{
											"key": "filter",
											"value": "[[\"clientId\",\"=\",\"{{datasetId_2}}\"]]"
										},
										{
											"key": "_",
											"value": "1618492174971"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Invoice-Client_1AAndAssigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"testController\", pm.environment.get(\"testController\").toUpperCase());\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonDataAL = pm.response.json().data;\r",
											"     console.log(jsonDataAL);\r",
											"\r",
											"    for (var i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].clientId ==  pm.environment.get(\"client_1\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i].assigned;\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TestController and Client_1 is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"userIds\", pm.environment.get(\"testController\"));\r",
											"        });\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(jsonDataAL1);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=10&sort=[{\"selector\":\"clientName\",\"desc\":false}]&_=1618393985821&filter=[[[\"clientId\",\"=\",\"{{datasetId_1}}\"]],\"and\",[\"assigned.userNames\",\"=\",\"Test Controller\"]]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "10"
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "[{\"selector\":\"clientName\",\"desc\":false}]"
										},
										{
											"key": "_",
											"value": "1618393985821"
										},
										{
											"key": "filter",
											"value": "[[[\"clientId\",\"=\",\"{{datasetId_1}}\"]],\"and\",[\"assigned.userNames\",\"=\",\"Test Controller\"]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PWA /Invoice-Client_2AAndAssigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"testController\", pm.environment.get(\"testController\").toUpperCase());\r",
											"\r",
											"if (pm.response.code == 200) {\r",
											"\r",
											"    const jsonDataAL = pm.response.json().data;\r",
											"     console.log(jsonDataAL);\r",
											"\r",
											"    for (var i in jsonDataAL) {\r",
											"        if (jsonDataAL[i].clientId ==  pm.environment.get(\"client_2\")) {\r",
											"            var jsonDataAL1 =jsonDataAL[i].assigned;\r",
											"            pm.test(pm.environment.get(\"ENV\") + \" \" + pm.request.method + \" \" + pm.info.requestName + \" : TestController and Client_2 is found.\", function () {\r",
											"        pm.expect(jsonDataAL1).to.have.property(\"userIds\", pm.environment.get(\"testController\"));\r",
											"        });\r",
											"        }\r",
											"    }\r",
											"}\r",
											"console.log(jsonDataAL1);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TokenPWA}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PWA}}/organizations/{{organizationId}}/invoices?take=10&sort=[{\"selector\":\"clientName\",\"desc\":false}]&_=1618393985821&filter=[[[\"clientId\",\"=\",\"{{datasetId_2}}\"]],\"and\",[\"assigned.userNames\",\"=\",\"Test Controller\"]]",
									"host": [
										"{{PWA}}"
									],
									"path": [
										"organizations",
										"{{organizationId}}",
										"invoices"
									],
									"query": [
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "10"
										},
										{
											"key": "requireTotalCount",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "[{\"selector\":\"clientName\",\"desc\":false}]"
										},
										{
											"key": "_",
											"value": "1618393985821"
										},
										{
											"key": "filter",
											"value": "[[[\"clientId\",\"=\",\"{{datasetId_2}}\"]],\"and\",[\"assigned.userNames\",\"=\",\"Test Controller\"]]"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TokenINT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "da7e6700-63ae-4215-8c21-820773fafd45",
			"key": "lineNumber",
			"value": ""
		},
		{
			"id": "ac013824-4032-4d46-ab48-cdad2dc54851",
			"key": "lineNumber_2",
			"value": ""
		},
		{
			"id": "bda2a1b6-5a40-4494-a95c-3d0c494d3058",
			"key": "lineNumber_1",
			"value": ""
		},
		{
			"id": "929fed2e-098b-4a0e-82e1-3799f6954f6f",
			"key": "periodizedLinesId_1",
			"value": ""
		},
		{
			"id": "2304c7db-f539-42ee-a6eb-bf671650fd66",
			"key": "periodizedLinesId_1B",
			"value": ""
		},
		{
			"id": "0691de63-e8c6-4f7b-8b72-005ae3769f92",
			"key": "periodizedLinesId",
			"value": ""
		}
	]
}